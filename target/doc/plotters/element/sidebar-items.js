initSidebarItems({"struct":[["BackendCoordAndZ","Used for 3d coordinate transformations."],["BackendCoordOnly","Used for 2d coordinate transformations."],["Circle","A circle element"],["ComposedElement","A container for two drawable elements, used for composition."],["Cross","A cross marker for visualizing data series."],["Cubiod","Represents a cuboid, a six-faced solid."],["DynElement","The container for a dynamically dispatched element"],["EmptyElement","An empty composable element. This is the starting point of a composed element."],["MultiLineText","An multi-line text element. The `Text` element allows only single line text and the `MultiLineText` supports drawing multiple lines"],["PathElement","An element of a series of connected lines"],["Pie","A Pie Graph"],["Pixel","An element representing a single pixel."],["Polygon","An element of a filled polygon"],["Rectangle","A rectangle element"],["Text","A single line text element. This can be owned or borrowed string, dependents on `String` or `str` moved into."],["TriangleMarker","A triangle marker for visualizing data series."]],"trait":[["CoordMapper","Useful to translate from guest coordinates to backend coordinates"],["Drawable","The trait indicates we are able to draw it on a drawing area"],["IntoDynElement","The trait that makes the conversion from the statically dispatched element to the dynamically dispatched element"],["PointCollection","A type which is logically a collection of points, under any given coordinate system. Note: Ideally, a point collection trait should be any type of which coordinate elements can be iterated. This is similar to `iter` method of many collection types in std."],["PointElement","A common trait for elements that can be interpreted as points: A cross, a circle, a triangle markerâ€¦"]],"type":[["Path","This is a deprecated type. Please use new name [`PathElement`] instead."]]});