var searchIndex = JSON.parse('{\
"atty":{"doc":"atty is a simple utility that answers one question","t":[13,13,13,4,11,11,11,11,11,11,5,5,11,11,11],"n":["Stderr","Stdin","Stdout","Stream","borrow","borrow_mut","clone","fmt","from","into","is","isnt","try_from","try_into","type_id"],"q":["atty","","","","","","","","","","","","","",""],"d":["","","","possible stream sources","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","returns true if this is a tty","returns true if this is <em>not</em> a tty","","",""],"i":[1,1,1,0,1,1,1,1,1,1,0,0,1,1,1],"f":[null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["stream",4]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["stream",4]],["bool",0]],[[["stream",4]],["bool",0]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[4,"Stream"]]},\
"bitflags":{"doc":"A typesafe bitmask flag generator useful for sets of …","t":[14],"n":["bitflags"],"q":["bitflags"],"d":["The macro used to generate the flag structures."],"i":[0],"f":[null],"p":[]},\
"bstr":{"doc":"A byte string library.","tn":["B","BStr","BString","ByteSlice","ByteVec","Bytes","CharIndices","Chars","DrainBytes","Fields","FieldsWith","Find","FindReverse","Finder","FinderReverse","FromUtf8Error","GraphemeIndices","Graphemes","Lines","LinesWithTerminator","SentenceIndices","Sentences","Split","SplitN","SplitNReverse","SplitReverse","Utf8Chunk","Utf8Chunks","Utf8Error","WordIndices","Words","WordsWithBreakIndices","WordsWithBreaks","as_bstr","as_bstr","as_bstr_mut","as_bstr_mut","as_bytes","as_bytes","as_bytes","as_bytes","as_bytes","as_bytes","as_bytes","as_bytes","as_bytes","as_bytes","as_bytes","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_slice","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","bytes","char_indices","char_indices","chars","chars","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","concat","contains_str","contains_str","copy_within_str","copy_within_str","decode_last_utf8","decode_utf8","default","deref","deref","deref_mut","deref_mut","description","description","deserialize","drain_bytes","drain_bytes","ends_with_str","ends_with_str","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","error_len","fields","fields","fields_with","fields_with","find","find","find","find_byte","find_byte","find_byteset","find_byteset","find_char","find_char","find_iter","find_iter","find_non_ascii_byte","find_non_ascii_byte","find_not_byteset","find_not_byteset","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_os_str","from_os_str","from_os_str_lossy","from_os_str_lossy","from_os_string","from_os_string","from_path","from_path","from_path_buf","from_path_buf","from_path_lossy","from_path_lossy","from_slice","from_slice","grapheme_indices","grapheme_indices","graphemes","graphemes","hash","hash","incomplete","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","insert_char","insert_char","insert_str","insert_str","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_os_string","into_os_string","into_os_string_lossy","into_os_string_lossy","into_owned","into_owned","into_path_buf","into_path_buf","into_path_buf_lossy","into_path_buf_lossy","into_string","into_string","into_string_lossy","into_string_lossy","into_string_unchecked","into_string_unchecked","into_vec","invalid","io","is_ascii","is_ascii","is_utf8","is_utf8","join","last_byte","last_byte","len","len","lines","lines","lines_with_terminator","lines_with_terminator","make_ascii_lowercase","make_ascii_lowercase","make_ascii_uppercase","make_ascii_uppercase","ne","ne","needle","needle","new","new","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pop_byte","pop_byte","pop_char","pop_char","push_byte","push_byte","push_char","push_char","push_str","push_str","remove_char","remove_char","repeatn","repeatn","replace","replace","replace_into","replace_into","replace_range","replace_range","replacen","replacen","replacen_into","replacen_into","reverse_bytes","reverse_bytes","reverse_chars","reverse_chars","reverse_graphemes","reverse_graphemes","rfind","rfind","rfind","rfind_byte","rfind_byte","rfind_byteset","rfind_byteset","rfind_char","rfind_char","rfind_iter","rfind_iter","rfind_not_byteset","rfind_not_byteset","rsplit_str","rsplit_str","rsplitn_str","rsplitn_str","sentence_indices","sentence_indices","sentences","sentences","serialize","serialize","size_hint","size_hint","split_str","split_str","splitn_str","splitn_str","starts_with_str","starts_with_str","to_ascii_lowercase","to_ascii_lowercase","to_ascii_uppercase","to_ascii_uppercase","to_lowercase","to_lowercase","to_lowercase_into","to_lowercase_into","to_os_str","to_os_str","to_os_str_lossy","to_os_str_lossy","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_path","to_path","to_path_lossy","to_path_lossy","to_str","to_str","to_str_lossy","to_str_lossy","to_str_lossy_into","to_str_lossy_into","to_str_unchecked","to_str_unchecked","to_string","to_string","to_string","to_string","to_uppercase","to_uppercase","to_uppercase_into","to_uppercase_into","trim","trim","trim_end","trim_end","trim_end_with","trim_end_with","trim_start","trim_start","trim_start_with","trim_start_with","trim_with","trim_with","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","utf8_chunks","utf8_chunks","utf8_error","valid","valid_up_to","word_indices","word_indices","words","words","words_with_break_indices","words_with_break_indices","words_with_breaks","words_with_breaks","BufReadExt","ByteLines","ByteRecords","borrow","borrow","borrow_mut","borrow_mut","byte_lines","byte_records","fmt","fmt","for_byte_line","for_byte_line_with_terminator","for_byte_record","for_byte_record_with_terminator","from","from","into","into","into_iter","into_iter","next","next","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["bstrbstr::io","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A short-hand constructor for building a <code>&amp;[u8]</code>.","A wrapper for <code>&amp;[u8]</code> that provides convenient string …","A wrapper for <code>Vec&lt;u8&gt;</code> that provides convenient string …","A trait that extends <code>&amp;[u8]</code> with string oriented methods.","A trait that extends <code>Vec&lt;u8&gt;</code> with string oriented methods.","An iterator over the bytes in a byte string.","An iterator over Unicode scalar values in a byte string …","An iterator over Unicode scalar values in a byte string.","A draining byte oriented iterator for <code>Vec&lt;u8&gt;</code>.","An iterator over the fields in a byte string, separated by …","An iterator over fields in the byte string, separated by a …","An iterator over non-overlapping substring matches.","An iterator over non-overlapping substring matches in …","A single substring searcher fixed to a particular needle.","A single substring reverse searcher fixed to a particular …","An error that may occur when converting a <code>Vec&lt;u8&gt;</code> to a …","An iterator over grapheme clusters in a byte string and …","An iterator over grapheme clusters in a byte string.","An iterator over all lines in a byte string, without their …","An iterator over all lines in a byte string, including …","An iterator over sentences in a byte string, along with …","An iterator over sentences in a byte string.","An iterator over substrings in a byte string, split by a …","An iterator over at most <code>n</code> substrings in a byte string, …","An iterator over at most <code>n</code> substrings in a byte string, …","An iterator over substrings in a byte string, split by a …","A chunk of valid UTF-8, possibly followed by invalid UTF-8 …","An iterator over chunks of valid UTF-8 in a byte slice.","An error that occurs when UTF-8 decoding fails.","An iterator over words in a byte string and their byte …","An iterator over words in a byte string.","An iterator over all word breaks in a byte string, along …","An iterator over all word breaks in a byte string.","Return this byte slice as a <code>&amp;BStr</code>.","Return this byte slice as a <code>&amp;BStr</code>.","Return this byte slice as a <code>&amp;mut BStr</code>.","Return this byte slice as a <code>&amp;mut BStr</code>.","Return the original bytes as a slice that failed to …","View the underlying data as a subslice of the original …","View the underlying data as a subslice of the original …","View the underlying data as a subslice of the original …","View the underlying data as a subslice of the original …","View the underlying data as a subslice of the original …","View the underlying data as a subslice of the original …","View the underlying data as a subslice of the original …","View the underlying data as a subslice of the original …","View the underlying data as a subslice of the original …","View the underlying data as a subslice of the original …","","","","","","","Views the remaining underlying data as a subslice of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an iterator over the bytes in this byte string.","Returns an iterator over the bytes in this byte string.","Returns an iterator over the Unicode scalar values in this …","Returns an iterator over the Unicode scalar values in this …","Returns an iterator over the Unicode scalar values in this …","Returns an iterator over the Unicode scalar values in this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Concatenate the elements given by the iterator together …","Returns true if and only if this byte string contains the …","Returns true if and only if this byte string contains the …","Copies elements from one part of the slice to another part …","Copies elements from one part of the slice to another part …","UTF-8 decode a single Unicode scalar value from the end of …","UTF-8 decode a single Unicode scalar value from the …","","","","","","","","","Creates a draining iterator that removes the specified …","Creates a draining iterator that removes the specified …","Returns true if and only if this byte string has the given …","Returns true if and only if this byte string has the given …","","","","","","","","","","","","","","","","","","","","Returns the total number of invalid UTF-8 bytes …","Returns an iterator over the fields in a byte string, …","Returns an iterator over the fields in a byte string, …","Returns an iterator over the fields in a byte string, …","Returns an iterator over the fields in a byte string, …","Returns the index of the first occurrence of the given …","Returns the index of the first occurrence of the given …","Returns the index of the first occurrence of this needle …","Returns the index of the first occurrence of the given …","Returns the index of the first occurrence of the given …","Returns the index of the first occurrence of any of the …","Returns the index of the first occurrence of any of the …","Returns the index of the first occurrence of the given …","Returns the index of the first occurrence of the given …","Returns an iterator of the non-overlapping occurrences of …","Returns an iterator of the non-overlapping occurrences of …","Returns the index of the first non-ASCII byte in this byte …","Returns the index of the first non-ASCII byte in this byte …","Returns the index of the first occurrence of a byte that …","Returns the index of the first occurrence of a byte that …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Create an immutable byte string from an OS string slice.","Create an immutable byte string from an OS string slice.","Lossily create a new byte string from an OS string slice.","Lossily create a new byte string from an OS string slice.","Create a new byte string from an owned OS string.","Create a new byte string from an owned OS string.","Create an immutable byte string from a file path.","Create an immutable byte string from a file path.","Create a new byte string from an owned file path.","Create a new byte string from an owned file path.","Lossily create a new byte string from a file path.","Lossily create a new byte string from a file path.","Create a new owned byte string from the given byte slice.","Create a new owned byte string from the given byte slice.","Returns an iterator over the grapheme clusters in this …","Returns an iterator over the grapheme clusters in this …","Returns an iterator over the grapheme clusters in this …","Returns an iterator over the grapheme clusters in this …","","","Returns whether the invalid sequence might still become …","","","","","","","","","","","","","","","Inserts the given codepoint into this <code>Vec&lt;u8&gt;</code> at a …","Inserts the given codepoint into this <code>Vec&lt;u8&gt;</code> at a …","Inserts the given byte string into this byte string at a …","Inserts the given byte string into this byte string at a …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Converts this byte string into an OS string, in place.","Converts this byte string into an OS string, in place.","Lossily converts this byte string into an OS string, in …","Lossily converts this byte string into an OS string, in …","Convert this finder into its owned variant, such that it …","Convert this finder into its owned variant, such that it …","Converts this byte string into an owned file path, in …","Converts this byte string into an owned file path, in …","Lossily converts this byte string into an owned file path, …","Lossily converts this byte string into an owned file path, …","Converts a <code>Vec&lt;u8&gt;</code> into a <code>String</code> if and only if this byte …","Converts a <code>Vec&lt;u8&gt;</code> into a <code>String</code> if and only if this byte …","Lossily converts a <code>Vec&lt;u8&gt;</code> into a <code>String</code>. If this byte …","Lossily converts a <code>Vec&lt;u8&gt;</code> into a <code>String</code>. If this byte …","Unsafely convert this byte string into a <code>String</code>, without …","Unsafely convert this byte string into a <code>String</code>, without …","Consume this error and return the original byte string …","Returns the (possibly empty) invalid UTF-8 bytes in this …","Utilities for working with I/O using byte strings.","Returns true if and only if every byte in this byte string …","Returns true if and only if every byte in this byte string …","Returns true if and only if the entire byte string is …","Returns true if and only if the entire byte string is …","Join the elements given by the iterator with the given …","Returns the last byte in this byte string, if it’s …","Returns the last byte in this byte string, if it’s …","","","An iterator over all lines in a byte string, without their …","An iterator over all lines in a byte string, without their …","An iterator over all lines in a byte string, including …","An iterator over all lines in a byte string, including …","Convert this byte string to its lowercase ASCII equivalent …","Convert this byte string to its lowercase ASCII equivalent …","Convert this byte string to its uppercase ASCII equivalent …","Convert this byte string to its uppercase ASCII equivalent …","","","Returns the needle that this finder searches for.","Returns the needle that this finder searches for.","Create a new finder for the given needle.","Create a new reverse finder for the given needle.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Removes the last byte from this <code>Vec&lt;u8&gt;</code> and returns it.","Removes the last byte from this <code>Vec&lt;u8&gt;</code> and returns it.","Removes the last codepoint from this <code>Vec&lt;u8&gt;</code> and returns …","Removes the last codepoint from this <code>Vec&lt;u8&gt;</code> and returns …","Appends the given byte to the end of this byte string.","Appends the given byte to the end of this byte string.","Appends the given <code>char</code> to the end of this byte string.","Appends the given <code>char</code> to the end of this byte string.","Appends the given slice to the end of this byte string. …","Appends the given slice to the end of this byte string. …","Removes a <code>char</code> from this <code>Vec&lt;u8&gt;</code> at the given byte …","Removes a <code>char</code> from this <code>Vec&lt;u8&gt;</code> at the given byte …","Create a new byte string by repeating this byte string <code>n</code> …","Create a new byte string by repeating this byte string <code>n</code> …","Replace all matches of the given needle with the given …","Replace all matches of the given needle with the given …","Replace all matches of the given needle with the given …","Replace all matches of the given needle with the given …","Removes the specified range in this byte string and …","Removes the specified range in this byte string and …","Replace up to <code>limit</code> matches of the given needle with the …","Replace up to <code>limit</code> matches of the given needle with the …","Replace up to <code>limit</code> matches of the given needle with the …","Replace up to <code>limit</code> matches of the given needle with the …","Reverse the bytes in this string, in place.","Reverse the bytes in this string, in place.","Reverse the codepoints in this string, in place.","Reverse the codepoints in this string, in place.","Reverse the graphemes in this string, in place.","Reverse the graphemes in this string, in place.","Returns the index of the last occurrence of the given …","Returns the index of the last occurrence of the given …","Returns the index of the last occurrence of this needle in …","Returns the index of the last occurrence of the given …","Returns the index of the last occurrence of the given …","Returns the index of the last occurrence of any of the …","Returns the index of the last occurrence of any of the …","Returns the index of the last occurrence of the given …","Returns the index of the last occurrence of the given …","Returns an iterator of the non-overlapping occurrences of …","Returns an iterator of the non-overlapping occurrences of …","Returns the index of the last occurrence of a byte that is …","Returns the index of the last occurrence of a byte that is …","Returns an iterator over substrings of this byte string, …","Returns an iterator over substrings of this byte string, …","Returns an iterator of at most <code>limit</code> substrings of this …","Returns an iterator of at most <code>limit</code> substrings of this …","Returns an iterator over the sentences in this byte string …","Returns an iterator over the sentences in this byte string …","Returns an iterator over the sentences in this byte string.","Returns an iterator over the sentences in this byte string.","","","","","Returns an iterator over substrings of this byte string, …","Returns an iterator over substrings of this byte string, …","Returns an iterator of at most <code>limit</code> substrings of this …","Returns an iterator of at most <code>limit</code> substrings of this …","Returns true if and only if this byte string has the given …","Returns true if and only if this byte string has the given …","Returns a new <code>Vec&lt;u8&gt;</code> containing the ASCII lowercase …","Returns a new <code>Vec&lt;u8&gt;</code> containing the ASCII lowercase …","Returns a new <code>Vec&lt;u8&gt;</code> containing the ASCII uppercase …","Returns a new <code>Vec&lt;u8&gt;</code> containing the ASCII uppercase …","Returns a new <code>Vec&lt;u8&gt;</code> containing the lowercase equivalent …","Returns a new <code>Vec&lt;u8&gt;</code> containing the lowercase equivalent …","Writes the lowercase equivalent of this byte string into …","Writes the lowercase equivalent of this byte string into …","Create an OS string slice from this byte string.","Create an OS string slice from this byte string.","Lossily create an OS string slice from this byte string.","Lossily create an OS string slice from this byte string.","","","","","","","","","","","","","","","","","Create a path slice from this byte string.","Create a path slice from this byte string.","Lossily create a path slice from this byte string.","Lossily create a path slice from this byte string.","Safely convert this byte string into a <code>&amp;str</code> if it’s …","Safely convert this byte string into a <code>&amp;str</code> if it’s …","Convert this byte string to a valid UTF-8 string by …","Convert this byte string to a valid UTF-8 string by …","Copy the contents of this byte string into the given owned …","Copy the contents of this byte string into the given owned …","Unsafely convert this byte string into a <code>&amp;str</code>, without …","Unsafely convert this byte string into a <code>&amp;str</code>, without …","","","","","Returns a new <code>Vec&lt;u8&gt;</code> containing the uppercase equivalent …","Returns a new <code>Vec&lt;u8&gt;</code> containing the uppercase equivalent …","Writes the uppercase equivalent of this byte string into …","Writes the uppercase equivalent of this byte string into …","Return a byte string slice with leading and trailing …","Return a byte string slice with leading and trailing …","Return a byte string slice with trailing whitespace …","Return a byte string slice with trailing whitespace …","Return a byte string slice with trailing characters …","Return a byte string slice with trailing characters …","Return a byte string slice with leading whitespace removed.","Return a byte string slice with leading whitespace removed.","Return a byte string slice with leading characters …","Return a byte string slice with leading characters …","Return a byte string slice with leading and trailing …","Return a byte string slice with leading and trailing …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Iterate over chunks of valid UTF-8.","Iterate over chunks of valid UTF-8.","Return the underlying UTF-8 error that occurred. This …","Returns the (possibly empty) valid UTF-8 bytes in this …","Returns the byte index of the position immediately …","Returns an iterator over the words in this byte string …","Returns an iterator over the words in this byte string …","Returns an iterator over the words in this byte string. If …","Returns an iterator over the words in this byte string. If …","Returns an iterator over the words and their byte offsets …","Returns an iterator over the words and their byte offsets …","Returns an iterator over the words in this byte string, …","Returns an iterator over the words in this byte string, …","An extention trait for <code>std::io::BufRead</code> which provides …","An iterator over lines from an instance of <code>std::io::BufRead</code>…","An iterator over records from an instance of …","","","","","Returns an iterator over the lines of this reader, where …","Returns an iterator over byte-terminated records of this …","","","Executes the given closure on each line in the underlying …","Executes the given closure on each line in the underlying …","Executes the given closure on each byte-terminated record …","Executes the given closure on each byte-terminated record …","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,14,13,14,14,15,16,17,18,13,14,14,19,20,21,22,15,23,24,25,26,27,28,29,2,3,4,5,6,7,8,9,10,11,12,30,31,16,17,18,13,14,19,20,21,22,15,23,24,25,26,27,28,29,2,3,4,5,6,7,8,9,10,11,12,30,31,1,1,1,1,1,1,14,19,20,15,3,4,5,6,7,8,9,10,11,12,30,14,19,20,15,3,4,5,6,7,8,9,10,11,12,30,13,14,0,1,1,1,1,0,0,14,13,14,13,14,2,31,14,32,32,1,1,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,2,31,31,1,1,1,1,1,1,19,1,1,1,1,1,1,1,1,1,1,1,1,13,13,14,14,19,20,21,22,15,23,24,25,26,27,28,29,2,2,3,4,5,6,7,8,9,10,11,12,30,31,31,16,17,18,14,14,14,14,14,14,19,20,21,22,15,23,24,25,26,27,28,29,2,3,4,5,6,7,8,9,10,11,12,30,31,14,14,14,14,14,14,1,1,32,32,32,32,1,1,32,32,32,32,32,32,1,1,1,1,13,14,18,13,13,13,13,13,13,13,13,13,13,13,13,13,13,32,32,32,32,16,17,18,14,19,20,21,22,15,23,24,25,26,27,28,29,2,3,4,5,6,7,8,9,10,11,12,30,31,16,17,21,22,15,23,24,25,26,27,28,29,3,4,5,6,7,8,9,10,11,12,30,32,32,32,32,19,20,32,32,32,32,32,32,32,32,32,32,2,18,0,1,1,1,1,0,1,1,15,29,1,1,1,1,1,1,1,1,2,31,19,20,19,20,16,17,21,22,15,23,24,25,26,27,28,29,3,4,5,6,7,8,9,10,11,12,30,15,29,3,4,11,12,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,32,32,32,32,32,32,32,32,32,32,32,32,1,1,1,1,1,1,32,32,1,1,1,1,1,1,1,1,1,1,1,1,20,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,13,14,15,30,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,13,14,19,20,15,3,4,5,6,7,8,9,10,11,12,30,1,1,1,1,1,1,1,1,1,1,1,1,13,14,2,31,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,16,17,18,14,19,20,21,22,15,23,24,25,26,27,28,29,2,3,4,5,6,7,8,9,10,11,12,30,31,16,17,18,14,19,20,21,22,15,23,24,25,26,27,28,29,2,3,4,5,6,7,8,9,10,11,12,30,31,16,17,18,13,14,19,20,21,22,15,23,24,25,26,27,28,29,2,3,4,5,6,7,8,9,10,11,12,30,31,1,1,2,18,31,1,1,1,1,1,1,1,1,0,0,0,33,34,33,34,35,35,33,34,35,35,35,35,33,34,33,34,33,34,33,34,33,34,33,34,33,34],"f":[[[["",0]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["bstr",3]],[[["",0]],["bstr",3]],[[["",0]],["bstr",3]],[[["",0]],["bstr",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["bstr",3]],[[["",0]]],[[["",0]]],[[["",0]],["bstr",3]],[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["bstrbytes",3]],[[["",0]],["bytes",3]],[[["",0]],["charindices",3]],[[["",0]],["charindices",3]],[[["",0]],["chars",3]],[[["",0]],["chars",3]],[[["",0]],["bstring",3]],[[["",0]],["finder",3]],[[["",0]],["finderreverse",3]],[[["",0]],["bytes",3]],[[["",0]],["graphemes",3]],[[["",0]],["graphemeindices",3]],[[["",0]],["sentences",3]],[[["",0]],["sentenceindices",3]],[[["",0]],["words",3]],[[["",0]],["wordindices",3]],[[["",0]],["wordswithbreaks",3]],[[["",0]],["wordswithbreakindices",3]],[[["",0]],["chars",3]],[[["",0]],["charindices",3]],[[["",0]],["utf8chunks",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["bstr",3]],["ordering",4]],[[["",0],["bstring",3]],["ordering",4]],[[],["vec",3,[["u8",0]]]],[[["",0],["asref",8]],["bool",0]],[[["",0],["asref",8]],["bool",0]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["asref",8]]],[[["asref",8]]],[[],["bstring",3]],[[["",0]]],[[["",0]],["vec",3]],[[["",0]]],[[["",0]],["vec",3]],[[["",0]],["str",0]],[[["",0]],["str",0]],[[],["result",4,[["bstring",3]]]],[[["",0]],["drainbytes",3]],[[["",0]],["drainbytes",3]],[[["",0],["asref",8]],["bool",0]],[[["",0],["asref",8]],["bool",0]],[[["",0]],["bool",0]],[[["",0],["str",0]],["bool",0]],[[["",0],["bstr",3]],["bool",0]],[[["",0],["string",3]],["bool",0]],[[["",0]],["bool",0]],[[["",0],["vec",3]],["bool",0]],[[["",0],["str",0]],["bool",0]],[[["",0],["bstring",3]],["bool",0]],[[["",0],["str",0]],["bool",0]],[[["",0],["bstring",3]],["bool",0]],[[["",0],["string",3]],["bool",0]],[[["",0],["str",0]],["bool",0]],[[["",0],["bstr",3]],["bool",0]],[[["",0],["bstr",3]],["bool",0]],[[["",0],["vec",3]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0],["fromutf8error",3]],["bool",0]],[[["",0],["utf8error",3]],["bool",0]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["fields",3]],[[["",0]],["fields",3]],[[["",0],["fnmut",8]],["fieldswith",3,[["fnmut",8]]]],[[["",0],["fnmut",8]],["fieldswith",3,[["fnmut",8]]]],[[["",0],["asref",8]],["option",4,[["usize",0]]]],[[["",0],["asref",8]],["option",4,[["usize",0]]]],[[["",0],["asref",8]],["option",4,[["usize",0]]]],[[["",0],["u8",0]],["option",4,[["usize",0]]]],[[["",0],["u8",0]],["option",4,[["usize",0]]]],[[["",0],["asref",8]],["option",4,[["usize",0]]]],[[["",0],["asref",8]],["option",4,[["usize",0]]]],[[["",0],["char",0]],["option",4,[["usize",0]]]],[[["",0],["char",0]],["option",4,[["usize",0]]]],[[["",0],["",0]],["find",3]],[[["",0],["",0]],["find",3]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0],["asref",8]],["option",4,[["usize",0]]]],[[["",0],["asref",8]],["option",4,[["usize",0]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["bstring",3]],[[["bstr",3]],["bstring",3]],[[]],[[["vec",3,[["u8",0]]]],["bstring",3]],[[["str",0]],["bstring",3]],[[["string",3]],["bstring",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]],["bstring",3]],[[["intoiterator",8]],["bstring",3]],[[["intoiterator",8]],["bstring",3]],[[["intoiterator",8]],["bstring",3]],[[["intoiterator",8]],["bstring",3]],[[["intoiterator",8]],["bstring",3]],[[["osstr",3]],["option",4]],[[["osstr",3]],["option",4]],[[["osstr",3]],["cow",4]],[[["osstr",3]],["cow",4]],[[["osstring",3]],["result",4,[["vec",3,[["u8",0]]],["osstring",3]]]],[[["osstring",3]],["result",4,[["vec",3,[["u8",0]]],["osstring",3]]]],[[["path",3]],["option",4]],[[["path",3]],["option",4]],[[["pathbuf",3]],["result",4,[["vec",3,[["u8",0]]],["pathbuf",3]]]],[[["pathbuf",3]],["result",4,[["vec",3,[["u8",0]]],["pathbuf",3]]]],[[["path",3]],["cow",4]],[[["path",3]],["cow",4]],[[["asref",8]],["vec",3,[["u8",0]]]],[[["asref",8]],["vec",3,[["u8",0]]]],[[["",0]],["graphemeindices",3]],[[["",0]],["graphemeindices",3]],[[["",0]],["graphemes",3]],[[["",0]],["graphemes",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]],["bool",0]],[[["",0],["rangeinclusive",3,[["usize",0]]]],["bstr",3]],[[["",0],["rangeto",3,[["usize",0]]]],["bstr",3]],[[["",0],["rangetoinclusive",3,[["usize",0]]]],["bstr",3]],[[["",0],["rangefrom",3,[["usize",0]]]],["bstr",3]],[[["",0],["range",3,[["usize",0]]]],["bstr",3]],[[["",0],["rangefull",3]],["bstr",3]],[[["",0],["usize",0]],["u8",0]],[[["",0],["rangefrom",3,[["usize",0]]]],["bstr",3]],[[["",0],["rangetoinclusive",3,[["usize",0]]]],["bstr",3]],[[["",0],["range",3,[["usize",0]]]],["bstr",3]],[[["",0],["rangefull",3]],["bstr",3]],[[["",0],["rangeinclusive",3,[["usize",0]]]],["bstr",3]],[[["",0],["usize",0]],["u8",0]],[[["",0],["rangeto",3,[["usize",0]]]],["bstr",3]],[[["",0],["usize",0],["char",0]]],[[["",0],["usize",0],["char",0]]],[[["",0],["usize",0],["asref",8]]],[[["",0],["usize",0],["asref",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4,[["osstring",3],["vec",3,[["u8",0]]]]]],[[],["result",4,[["osstring",3],["vec",3,[["u8",0]]]]]],[[],["osstring",3]],[[],["osstring",3]],[[],["finder",3]],[[],["finderreverse",3]],[[],["result",4,[["pathbuf",3],["vec",3,[["u8",0]]]]]],[[],["result",4,[["pathbuf",3],["vec",3,[["u8",0]]]]]],[[],["pathbuf",3]],[[],["pathbuf",3]],[[],["result",4,[["string",3],["fromutf8error",3]]]],[[],["result",4,[["string",3],["fromutf8error",3]]]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["vec",3,[["u8",0]]]],[[["",0]]],null,[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[],["vec",3,[["u8",0]]]],[[["",0]],["option",4,[["u8",0]]]],[[["",0]],["option",4,[["u8",0]]]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["lines",3]],[[["",0]],["lines",3]],[[["",0]],["lineswithterminator",3]],[[["",0]],["lineswithterminator",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["fromutf8error",3]],["bool",0]],[[["",0],["utf8error",3]],["bool",0]],[[["",0]]],[[["",0]]],[[["",0]],["finder",3]],[[["",0]],["finderreverse",3]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["u8",0]]]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4,[["u8",0]]]],[[["",0]],["option",4,[["str",0]]]],[[["",0]],["option",4]],[[["",0]],["option",4,[["str",0]]]],[[["",0]],["option",4]],[[["",0]],["option",4,[["str",0]]]],[[["",0]],["option",4]],[[["",0]],["option",4,[["str",0]]]],[[["",0]],["option",4]],[[["",0]],["option",4,[["char",0]]]],[[["",0]],["option",4]],[[["",0]],["option",4,[["utf8chunk",3]]]],[[["",0]],["option",4,[["u8",0]]]],[[["",0]],["option",4,[["u8",0]]]],[[["",0]],["option",4,[["str",0]]]],[[["",0]],["option",4]],[[["",0]],["option",4,[["char",0]]]],[[["",0]],["option",4]],[[["",0]],["option",4,[["ordering",4]]]],[[["",0],["bstring",3]],["option",4,[["ordering",4]]]],[[["",0],["bstr",3]],["option",4,[["ordering",4]]]],[[["",0]],["option",4,[["ordering",4]]]],[[["",0],["string",3]],["option",4,[["ordering",4]]]],[[["",0],["vec",3]],["option",4,[["ordering",4]]]],[[["",0],["str",0]],["option",4,[["ordering",4]]]],[[["",0],["str",0]],["option",4,[["ordering",4]]]],[[["",0],["vec",3]],["option",4,[["ordering",4]]]],[[["",0],["bstring",3]],["option",4,[["ordering",4]]]],[[["",0],["bstr",3]],["option",4,[["ordering",4]]]],[[["",0],["bstr",3]],["option",4,[["ordering",4]]]],[[["",0],["str",0]],["option",4,[["ordering",4]]]],[[["",0],["str",0]],["option",4,[["ordering",4]]]],[[["",0],["string",3]],["option",4,[["ordering",4]]]],[[["",0]],["option",4,[["ordering",4]]]],[[["",0]],["option",4,[["ordering",4]]]],[[["",0]],["option",4,[["u8",0]]]],[[["",0]],["option",4,[["u8",0]]]],[[["",0]],["option",4,[["char",0]]]],[[["",0]],["option",4,[["char",0]]]],[[["",0],["u8",0]]],[[["",0],["u8",0]]],[[["",0],["char",0]]],[[["",0],["char",0]]],[[["",0],["asref",8]]],[[["",0],["asref",8]]],[[["",0],["usize",0]],["char",0]],[[["",0],["usize",0]],["char",0]],[[["",0],["usize",0]],["vec",3,[["u8",0]]]],[[["",0],["usize",0]],["vec",3,[["u8",0]]]],[[["",0],["asref",8],["asref",8]],["vec",3,[["u8",0]]]],[[["",0],["asref",8],["asref",8]],["vec",3,[["u8",0]]]],[[["",0],["asref",8],["asref",8],["vec",3]]],[[["",0],["asref",8],["asref",8],["vec",3]]],[[["",0]]],[[["",0]]],[[["",0],["asref",8],["asref",8],["usize",0]],["vec",3,[["u8",0]]]],[[["",0],["asref",8],["asref",8],["usize",0]],["vec",3,[["u8",0]]]],[[["",0],["asref",8],["asref",8],["usize",0],["vec",3]]],[[["",0],["asref",8],["asref",8],["usize",0],["vec",3]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["asref",8]],["option",4,[["usize",0]]]],[[["",0],["asref",8]],["option",4,[["usize",0]]]],[[["",0],["asref",8]],["option",4,[["usize",0]]]],[[["",0],["u8",0]],["option",4,[["usize",0]]]],[[["",0],["u8",0]],["option",4,[["usize",0]]]],[[["",0],["asref",8]],["option",4,[["usize",0]]]],[[["",0],["asref",8]],["option",4,[["usize",0]]]],[[["",0],["char",0]],["option",4,[["usize",0]]]],[[["",0],["char",0]],["option",4,[["usize",0]]]],[[["",0],["",0]],["findreverse",3]],[[["",0],["",0]],["findreverse",3]],[[["",0],["asref",8]],["option",4,[["usize",0]]]],[[["",0],["asref",8]],["option",4,[["usize",0]]]],[[["",0],["",0]],["splitreverse",3]],[[["",0],["",0]],["splitreverse",3]],[[["",0],["usize",0],["",0]],["splitnreverse",3]],[[["",0],["usize",0],["",0]],["splitnreverse",3]],[[["",0]],["sentenceindices",3]],[[["",0]],["sentenceindices",3]],[[["",0]],["sentences",3]],[[["",0]],["sentences",3]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]]],[[["",0]]],[[["",0],["",0]],["split",3]],[[["",0],["",0]],["split",3]],[[["",0],["usize",0],["",0]],["splitn",3]],[[["",0],["usize",0],["",0]],["splitn",3]],[[["",0],["asref",8]],["bool",0]],[[["",0],["asref",8]],["bool",0]],[[["",0]],["vec",3,[["u8",0]]]],[[["",0]],["vec",3,[["u8",0]]]],[[["",0]],["vec",3,[["u8",0]]]],[[["",0]],["vec",3,[["u8",0]]]],[[["",0]],["vec",3,[["u8",0]]]],[[["",0]],["vec",3,[["u8",0]]]],[[["",0],["vec",3]]],[[["",0],["vec",3]]],[[["",0]],["result",4,[["osstr",3],["utf8error",3]]]],[[["",0]],["result",4,[["osstr",3],["utf8error",3]]]],[[["",0]],["cow",4,[["osstr",3]]]],[[["",0]],["cow",4,[["osstr",3]]]],[[["",0]],["bstring",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["result",4,[["path",3],["utf8error",3]]]],[[["",0]],["result",4,[["path",3],["utf8error",3]]]],[[["",0]],["cow",4,[["path",3]]]],[[["",0]],["cow",4,[["path",3]]]],[[["",0]],["result",4,[["str",0],["utf8error",3]]]],[[["",0]],["result",4,[["str",0],["utf8error",3]]]],[[["",0]],["cow",4,[["str",0]]]],[[["",0]],["cow",4,[["str",0]]]],[[["",0],["string",3]]],[[["",0],["string",3]]],[[["",0]],["str",0]],[[["",0]],["str",0]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["vec",3,[["u8",0]]]],[[["",0]],["vec",3,[["u8",0]]]],[[["",0],["vec",3]]],[[["",0],["vec",3]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["fnmut",8]]],[[["",0],["fnmut",8]]],[[["",0]]],[[["",0]]],[[["",0],["fnmut",8]]],[[["",0],["fnmut",8]]],[[["",0],["fnmut",8]]],[[["",0],["fnmut",8]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["utf8chunks",3]],[[["",0]],["utf8chunks",3]],[[["",0]],["utf8error",3]],[[["",0]],["str",0]],[[["",0]],["usize",0]],[[["",0]],["wordindices",3]],[[["",0]],["wordindices",3]],[[["",0]],["words",3]],[[["",0]],["words",3]],[[["",0]],["wordswithbreakindices",3]],[[["",0]],["wordswithbreakindices",3]],[[["",0]],["wordswithbreaks",3]],[[["",0]],["wordswithbreaks",3]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["bytelines",3]],[[["u8",0]],["byterecords",3]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[],["result",6]],[[],["result",6]],[[["u8",0]],["result",6]],[[["u8",0]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["option",4,[["result",6,[["vec",3,[["u8",0]]]]]]]],[[["",0]],["option",4,[["result",6,[["vec",3,[["u8",0]]]]]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[8,"ByteSlice"],[3,"FromUtf8Error"],[3,"Graphemes"],[3,"GraphemeIndices"],[3,"Sentences"],[3,"SentenceIndices"],[3,"Words"],[3,"WordIndices"],[3,"WordsWithBreaks"],[3,"WordsWithBreakIndices"],[3,"Chars"],[3,"CharIndices"],[3,"BStr"],[3,"BString"],[3,"Bytes"],[3,"Lines"],[3,"LinesWithTerminator"],[3,"Utf8Chunk"],[3,"Finder"],[3,"FinderReverse"],[3,"Find"],[3,"FindReverse"],[3,"Fields"],[3,"FieldsWith"],[3,"Split"],[3,"SplitReverse"],[3,"SplitN"],[3,"SplitNReverse"],[3,"DrainBytes"],[3,"Utf8Chunks"],[3,"Utf8Error"],[8,"ByteVec"],[3,"ByteLines"],[3,"ByteRecords"],[8,"BufReadExt"]]},\
"cast":{"doc":"Ergonomic, checked cast functions for primitive types","t":[4,8,13,13,16,13,13,11,11,10,11,11,5,5,11,11,11,5,5,5,5,5,11,5,11,11,11,5,5,5,5,5,5],"n":["Error","From","Infinite","NaN","Output","Overflow","Underflow","borrow","borrow_mut","cast","clone","eq","f32","f64","fmt","fmt","from","i128","i16","i32","i64","i8","into","isize","try_from","try_into","type_id","u128","u16","u32","u64","u8","usize"],"q":["cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Cast errors","The “cast from” operation","Infinite value casted to a type that can only represent …","NaN value casted to a type that can’t represent a NaN …","The result of the cast operation: either <code>Self</code> or …","Source value is greater than the maximum value that the …","Source value is smaller than the minimum value that the …","","","Checked cast from <code>Src</code> to <code>Self</code>","","","Checked cast function","Checked cast function","","","Returns the argument unchanged.","Checked cast function","Checked cast function","Checked cast function","Checked cast function","Checked cast function","Calls <code>U::from(self)</code>.","Checked cast function","","","","Checked cast function","Checked cast function","Checked cast function","Checked cast function","Checked cast function","Checked cast function"],"i":[0,0,1,1,2,1,1,1,1,2,1,1,0,0,1,1,1,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[["",0]],["error",4]],[[["",0],["error",4]],["bool",0]],[[]],[[]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[4,"Error"],[8,"From"]]},\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":[14],"n":["cfg_if"],"q":["cfg_if"],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[null],"p":[]},\
"clap":{"doc":"<code>clap</code> is a simple-to-use, efficient, and full-featured …","t":[13,13,13,13,13,13,13,3,4,3,3,3,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,13,13,6,4,13,3,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,13,13,14,11,11,11,11,11,11,11,14,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,11,11,11,11,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AllArgsOverrideSelf","AllowExternalSubcommands","AllowInvalidUtf8","AllowLeadingHyphen","AllowLeadingHyphen","AllowMissingPositional","AllowNegativeNumbers","App","AppSettings","Arg","ArgGroup","ArgMatches","ArgRequiredElseHelp","ArgSettings","ArgsNegateSubcommands","ArgumentConflict","ArgumentNotFound","Bash","CaseInsensitive","ColorAlways","ColorAuto","ColorNever","ColoredHelp","DeriveDisplayOrder","DisableHelpFlags","DisableHelpSubcommand","DisableVersion","DontCollapseArgsInUsage","DontDelimitTrailingValues","Elvish","EmptyValue","EmptyValues","Error","ErrorKind","Fish","Format","Global","GlobalVersion","HelpDisplayed","Hidden","Hidden","HiddenLongHelp","HiddenShortHelp","HideDefaultValue","HideEnvValues","HidePossibleValues","HidePossibleValuesInHelp","InferSubcommands","InvalidSubcommand","InvalidUtf8","InvalidValue","Io","Last","MissingArgumentOrSubcommand","MissingRequiredArgument","MissingSubcommand","Multiple","NextLineHelp","NextLineHelp","NoBinaryName","OsValues","PowerShell","PropagateGlobalValuesDown","RequireDelimiter","RequireEquals","Required","Result","Shell","StrictUtf8","SubCommand","SubcommandRequired","SubcommandRequiredElseHelp","SubcommandsNegateReqs","TakesValue","TooFewValues","TooManyValues","TrailingVarArg","UnexpectedMultipleUsage","UnifiedHelpMessage","UnknownArgument","UnrecognizedSubcommand","UseValueDelimiter","ValueValidation","Values","VersionDisplayed","VersionlessSubcommands","WaitOnError","WrongNumberOfValues","Zsh","_clap_count_exprs","about","after_help","alias","alias","aliases","aliases","allow_hyphen_values","app_from_crate","arg","arg","arg_enum","arg_from_usage","args","args","args_from_usage","author","before_help","bin_name","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","case_insensitive","clap_app","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","conflicts_with","conflicts_with","conflicts_with_all","conflicts_with_all","crate_authors","crate_description","crate_name","crate_version","default","default","default","default","default","default_value","default_value_if","default_value_if_os","default_value_ifs","default_value_ifs_os","default_value_os","description","display_order","display_order","empty_values","env","env_os","eq","eq","eq","eq","exit","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","from_str","from_str","from_usage","gen_completions","gen_completions_to","get_bin_name","get_matches","get_matches_from","get_matches_from_safe","get_matches_from_safe_borrow","get_matches_safe","get_name","global","global_setting","global_settings","group","group","groups","groups","help","help","help_message","help_short","hidden","hidden_long_help","hidden_short_help","hide_default_value","hide_env_values","hide_possible_values","index","index_of","indices_of","info","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","is_present","is_set","kind","last","long","long_about","long_help","long_version","max_term_width","max_values","message","min_values","multiple","multiple","name","new","next","next","next_back","next_back","next_line_help","number_of_values","occurrences_of","overrides_with","overrides_with_all","possible_value","possible_values","print_help","print_long_help","raw","require_delimiter","require_equals","required","required","required_if","required_ifs","required_unless","required_unless_all","required_unless_one","requires","requires","requires_all","requires_all","requires_if","requires_ifs","set","set_term_width","setting","settings","short","size_hint","size_hint","subcommand","subcommand","subcommand_matches","subcommand_name","subcommands","takes_value","template","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unset","unset_setting","unset_settings","usage","usage","use_delimiter","use_stderr","validator","validator_os","value_delimiter","value_name","value_names","value_of","value_of_lossy","value_of_os","value_t","value_t_or_exit","value_terminator","values_of","values_of_lossy","values_of_os","values_t","values_t_or_exit","variants","version","version_message","version_short","visible_alias","visible_alias","visible_aliases","visible_aliases","with_defaults","with_description","with_name","with_name","with_name","write_help","write_long_help","write_long_version","write_version"],"q":["clapd":["Essentially sets [<code>Arg::overrides_with(&quot;itself&quot;)</code>] for all …","Specifies that an unexpected positional argument, which …","Specifies that any invalid UTF-8 code points should <em>not</em> be …","Specifies that leading hyphens are allowed in argument …","Allows vals that start with a ‘-’","Allows one to implement two styles of CLIs where …","Allows negative numbers to pass as values. This is similar …","Used to create a representation of a command line program …","Application level settings, which affect how <code>App</code> operates","The abstract representation of a command line argument. …","<code>ArgGroup</code>s are a family of related arguments and way for …","Used to get information about the arguments that were …","Specifies that the help text should be displayed (and then …","Various settings that apply to arguments and may be set, …","Specifies that use of a valid argument negates subcommands …","Occurs when the user provides two values which conflict …","Occurs when using the <code>value_t!</code> and <code>values_t!</code> macros to …","Generates a .bash completion file for the Bourne Again …","Makes <code>Arg::possible_values</code> case insensitive","Enables colored output regardless of whether or not the …","Enables colored output only when the output is going to a …","Disables colored output no matter if the output is going …","Uses colorized help messages.","Displays the arguments and <code>SubCommand</code>s in the help message …","Disables <code>-h</code> and <code>--help</code> <code>App</code> without affecting any of the …","Disables the <code>help</code> subcommand","Disables <code>-V</code> and <code>--version</code> <code>App</code> without affecting any of the …","Disables the automatic collapsing of positional args into …","Disables the automatic delimiting of values when <code>--</code> or …","Generates a completion file for Elvish","Occurs when the user provides an empty value for an option …","The argument allows empty values such as <code>--option &quot;&quot;</code>","Command Line Argument Parser Error","Command line argument parser kind of error","Generates a .fish completion file for the Friendly …","Represents a Format error (which is a part of <code>Display</code>). …","The argument should be propagated down through all child …","Specifies to use the version of the current command for …","Not a true “error” as it means <code>--help</code> or similar was …","Specifies that this <code>SubCommand</code> should be hidden from help …","The argument should <strong>not</strong> be shown in help text","The argument should <strong>not</strong> be shown in long help text","The argument should <strong>not</strong> be shown in short help text","Hides the default value from the help string","Hides ENV values in the help message","Hides the possible values from the help string","Tells <code>clap</code> <em>not</em> to print possible values when displaying …","Tries to match unknown args to partial <code>subcommands</code> or …","Occurs when the user provides an unrecognized <code>SubCommand</code> …","Occurs when the user provides a value containing invalid …","Occurs when an <code>Arg</code> has a set of possible values, and the …","Represents an [I/O error]. Can occur when writing to <code>stderr</code>…","Specifies that the arg is the last positional argument and …","Occurs when either an argument or <code>SubCommand</code> is required, …","Occurs when the user does not provide one or more required …","Occurs when a subcommand is required (as defined by …","The argument may be used multiple times such as …","Places the help string for all arguments on the line after …","Prints the help text on the line after the argument","Specifies that the parser should not assume the first …","An iterator for getting multiple values out of an argument …","Generates a completion file for PowerShell","<strong>DEPRECATED</strong>: This setting is no longer required in order to …","Requires the use of a value delimiter for all multiple …","Require options use <code>--option=val</code> syntax","The argument must be used","Short hand for <code>Result</code> type","Describes which shell to produce a completions file for","Specifies that any invalid UTF-8 code points should be …","The abstract representation of a command line subcommand.","Allows specifying that if no <code>SubCommand</code> is present at …","Specifies that the help text should be displayed (before …","Allows <code>SubCommand</code>s to override all requirements of the …","The argument accepts a value, such as <code>--option &lt;value&gt;</code>","Occurs when the user provides fewer values for an argument …","Occurs when a user provides more values for an argument …","Specifies that the final positional argument is a “VarArg…","Occurs when the user provides multiple values to an …","Groups flags and options together, presenting a more …","Occurs when a user provides a flag, option, argument or …","Occurs when the user provides an unrecognized <code>SubCommand</code> …","Determines if the argument allows values to be grouped via …","Occurs when the user provides a value for an argument with …","An iterator for getting multiple values out of an argument …","Not a true “error” as it means <code>--version</code> or similar …","Disables <code>-V</code> and <code>--version</code> for all <code>SubCommand</code>s (Defaults to …","Will display a message “Press [ENTER]/[RETURN] to …","Occurs when the user provides a different number of values …","Generates a completion file for the Z SHell (ZSH)","Counts the number of comma-delimited expressions passed to …","Sets a string describing what the program does. This will …","Adds additional help information to be displayed in …","Allows adding a <code>SubCommand</code> alias, which function as “…","Allows adding a <code>Arg</code> alias, which function as “hidden” …","Allows adding <code>SubCommand</code> aliases, which function as “…","Allows adding <code>Arg</code> aliases, which function as “hidden” …","Allows values which start with a leading hyphen (<code>-</code>)","Allows you to build the <code>App</code> instance from your Cargo.toml …","Adds an argument to the list of valid possibilities.","Adds an argument to this group by name","Convenience macro to generate more complete enums with …","A convenience method for adding a single argument from a …","Adds multiple arguments to the list of valid possibilities","Adds multiple arguments to this group by name","Adds multiple arguments at once from a usage string, one …","Sets a string of author(s) that will be displayed to the …","Adds additional help information to be displayed in …","Overrides the system-determined binary name. This should …","","","","","","","","","","","","","","","","","","","","","","","","","When used with <code>Arg::possible_values</code> it allows the argument …","Build <code>App</code>, <code>Arg</code>s, <code>SubCommand</code>s and <code>Group</code>s with Usage-string …","","","","","","","","","","","","","","","","","","","","","","","Sets a conflicting argument by name. I.e. when using this …","Sets the exclusion rules of this group. Exclusion (aka …","The same as <code>Arg::conflicts_with</code> but allows specifying …","Sets the exclusion rules of this group. Exclusion rules …","Allows you to pull the authors for the app from your …","Allows you to pull the description from your Cargo.toml at …","Allows you to pull the name from your Cargo.toml at …","Allows you to pull the version from your Cargo.toml at …","","","","","","Specifies the value of the argument when <em>not</em> specified at …","Specifies the value of the argument if <code>arg</code> has been used …","Provides a conditional default value in the exact same …","Specifies multiple values and conditions in the same …","Provides multiple conditional default values in the exact …","Provides a default value in the exact same manner as …","","Allows custom ordering of <code>SubCommand</code>s within the help …","Allows custom ordering of args within the help message. …","Allows an argument to accept explicitly empty values. An …","Specifies that if the value is not passed in as an …","Specifies that if the value is not passed in as an …","","","","","Prints the error message and exits. If <code>Error::use_stderr</code> …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Creates a new instance of <code>Arg</code> from a usage string. Allows …","Generate a completions file for a specified shell at …","Generate a completions file for a specified shell at …","Get the name of the binary","Starts the parsing process, upon a failed parse an error …","Starts the parsing process. Like <code>App::get_matches</code> this …","Starts the parsing process. A combination of …","Starts the parsing process without consuming the <code>App</code> …","Starts the parsing process. This method will return a …","Get the name of the app","Specifies that an argument can be matched to all child …","Enables a single setting that is propagated down through …","Enables multiple settings which are propagated <em>down</em> …","Adds an <code>ArgGroup</code> to the application. <code>ArgGroup</code>s are a …","Specifies the name of the <code>ArgGroup</code> the argument belongs to.","Adds multiple <code>ArgGroup</code>s to the <code>App</code> at once.","Specifies the names of multiple <code>ArgGroup</code>’s the argument …","Sets a custom help message and overrides the …","Sets the short help text of the argument that will be …","Sets the help text for the auto-generated <code>help</code> argument.","Sets the <code>short</code> for the auto-generated <code>help</code> argument.","Hides an argument from help message output.","Hides an argument from long help message output.","Hides an argument from short help message output.","Specifies if the default value of an argument should be …","@TODO @p2 @docs @release: write docs","Specifies if the possible values of an argument should be …","Specifies the index of a positional argument <strong>starting at</strong> 1.","Gets the starting index of the argument in respect to all …","Gets all indices of the argument in respect to all other …","Any additional information passed along, such as the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> if an argument was present at runtime, …","Checks if one of the <code>ArgSettings</code> settings is set for the …","The type of error","Specifies that this arg is the last, or final, positional …","Sets the long version of the argument without the …","Sets a string describing what the program does. This will …","Sets the long help text of the argument that will be …","Sets a string of the version number to be displayed when …","Sets the max terminal width at which to wrap help …","Specifies the <em>maximum</em> number of values are for this …","Formatted error message","Specifies the <em>minimum</em> number of values for this argument. …","Specifies that the argument may appear more than once. For …","Allows more than one of the ‘Arg’s in this group to be …","Sets the program’s name. This will be displayed when …","Creates a new instance of an application requiring a name. …","","","","","When set to <code>true</code> the help string will be displayed on the …","Specifies how many values are required to satisfy this …","Returns the number of times an argument was used at …","Sets a overridable argument by name. I.e. this argument …","Sets multiple mutually overridable arguments by name. I.e. …","Specifies a possible value for this argument, one at a …","Specifies a list of possible values for this argument. At …","Prints the full help message to <code>io::stdout()</code> using a …","Prints the full help message to <code>io::stdout()</code> using a …","Indicates that all parameters passed after this should not …","Specifies that <em>multiple values</em> may only be set using the …","Requires that options use the <code>--option=val</code> syntax (i.e. an …","Sets whether or not the argument is required by default. …","Sets the group as required or not. A required group will …","Allows specifying that an argument is required …","Allows specifying that an argument is required based on …","Sets an arg that override this arg’s required setting. …","Sets args that override this arg’s required setting. …","Sets args that override this arg’s required setting. …","Sets an argument by name that is required when this one is …","Sets the requirement rules of this group. This is not to …","Sets multiple arguments by names that are required when …","Sets the requirement rules of this group. This is not to …","Allows a conditional requirement. The requirement will …","Allows multiple conditional requirements. The requirement …","Sets one of the <code>ArgSettings</code> settings for the argument.","Sets the terminal width at which to wrap help messages. …","Enables a single command, or <code>SubCommand</code>, level settings.","Enables multiple command, or <code>SubCommand</code>, level settings","Sets the short version of the argument without the …","","","Adds a <code>SubCommand</code> to the list of valid possibilities. …","This brings together <code>ArgMatches::subcommand_matches</code> and …","Because <code>Subcommand</code>s are essentially “sub-<code>App</code>s” they …","Because <code>Subcommand</code>s are essentially “sub-<code>App</code>s” they …","Adds multiple subcommands to the list of valid …","Specifies that the argument takes a value at run time.","Sets the help template to be used, overriding the default …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unsets one of the <code>ArgSettings</code> settings for the argument.","Disables a single command, or <code>SubCommand</code>, level setting.","Disables multiple command, or <code>SubCommand</code>, level settings.","Sets a custom usage string to override the auto-generated …","Returns a string slice of the usage statement for the <code>App</code> …","Specifies whether or not an argument should allow grouping …","Should the message be written to <code>stdout</code> or not","Allows one to perform a custom validation on the argument …","Works identically to Validator but is intended to be used …","Specifies the separator to use when values are clumped …","Specifies the name for value of option or positional …","Specify multiple names for values of option arguments. …","Gets the value of a specific option or positional argument …","Gets the lossy value of a specific argument. If the …","Gets the OS version of a string value of a specific …","Convenience macro getting a typed value <code>T</code> where <code>T</code> …","Convenience macro getting a typed value <code>T</code> where <code>T</code> …","Specifies a value that <em>stops</em> parsing multiple values of a …","Gets a <code>Values</code> struct which implements <code>Iterator</code> for values …","Gets the lossy values of a specific argument. If the …","Gets a <code>OsValues</code> struct which is implements <code>Iterator</code> for …","Convenience macro getting a typed value <code>Vec&lt;T&gt;</code> where <code>T</code> …","Convenience macro getting a typed value <code>Vec&lt;T&gt;</code> where <code>T</code> …","A list of possible variants in <code>&amp;&#39;static str</code> form","Sets a string of the version number to be displayed when …","Sets the help text for the auto-generated <code>version</code> argument.","Sets the <code>short</code> for the auto-generated <code>version</code> argument.","Allows adding a <code>SubCommand</code> alias that functions exactly …","Allows adding a <code>Arg</code> alias that functions exactly like …","Allows adding multiple <code>SubCommand</code> aliases that functions …","Allows adding multiple <code>Arg</code> aliases that functions exactly …","Creates a new instance of an application requiring a name, …","Create an error with a custom description.","Creates a new instance of <code>Arg</code> using a unique string name. …","Creates a new instance of <code>ArgGroup</code> using a unique string …","Creates a new instance of a subcommand requiring a name. …","Writes the full help message to the user to a <code>io::Write</code> …","Writes the full help message to the user to a <code>io::Write</code> …","Writes the version message to the user to a <code>io::Write</code> …","Writes the version message to the user to a <code>io::Write</code> …"],"i":[1,1,1,1,2,1,1,0,0,0,0,0,1,0,1,3,3,4,2,1,1,1,1,1,1,1,1,1,1,4,3,2,0,0,4,3,2,1,3,1,2,2,2,2,2,2,1,1,3,3,3,3,2,3,3,3,2,1,2,1,0,4,1,2,2,2,0,0,1,0,1,1,1,2,3,3,1,3,1,3,3,2,3,0,3,1,1,3,4,0,5,5,5,6,5,6,6,0,5,7,0,5,5,7,5,5,5,5,5,1,6,8,9,10,7,2,11,4,3,12,5,1,6,8,9,10,7,2,11,4,3,12,6,0,5,1,6,8,9,10,7,2,11,4,3,5,1,6,8,9,10,7,2,11,4,3,6,7,6,7,0,0,0,0,6,8,9,10,7,6,6,6,6,6,6,12,5,6,6,6,6,1,6,2,3,12,5,1,8,9,10,7,2,11,4,4,3,12,12,5,1,6,6,8,9,10,7,7,2,11,4,3,12,12,12,1,2,4,6,5,5,5,5,5,5,5,5,5,6,5,5,5,6,5,6,5,6,5,5,6,6,6,6,6,6,6,8,8,12,5,1,6,8,9,10,7,2,11,4,3,12,9,10,8,6,12,6,6,5,6,5,5,6,12,6,6,7,5,5,9,10,9,10,6,6,8,6,6,6,6,5,5,6,6,6,6,7,6,6,6,6,6,6,7,6,7,6,6,6,5,5,5,6,9,10,5,8,8,8,5,6,5,5,1,6,8,9,10,7,2,11,4,3,5,4,12,5,1,6,8,9,10,7,2,11,4,3,12,5,1,6,8,9,10,7,2,11,4,3,12,5,1,6,8,9,10,7,2,11,4,3,12,6,5,5,5,8,6,12,6,6,6,6,6,8,8,8,0,0,6,8,8,8,0,0,4,5,5,5,5,6,5,6,5,12,6,7,11,5,5,5,5],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["into",8,[["str",0]]]]],[[["into",8,[["str",0]]]]],[[["into",8,[["str",0]]]]],[[["into",8,[["str",0]]]]],[[]],[[]],[[["bool",0]]],null,[[["into",8,[["arg",3]]]]],[[["str",0]]],null,[[["str",0]]],[[]],[[]],[[["str",0]]],[[["into",8,[["str",0]]]]],[[["into",8,[["str",0]]]]],[[["into",8,[["string",3]]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["bool",0]]],null,[[["",0]]],[[["",0]],["appsettings",4]],[[["",0]],["arg",3]],[[["",0]],["argmatches",3]],[[["",0]],["values",3]],[[["",0]],["osvalues",3]],[[["",0]]],[[["",0]],["argsettings",4]],[[["",0]],["subcommand",3]],[[["",0]],["shell",4]],[[["",0]],["errorkind",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["str",0]]],[[["str",0]]],[[]],[[]],null,null,null,null,[[],["arg",3]],[[]],[[]],[[]],[[],["arggroup",3]],[[["str",0]]],[[["str",0],["option",4,[["str",0]]],["str",0]]],[[["str",0],["option",4,[["osstr",3]]],["osstr",3]]],[[]],[[]],[[["osstr",3]]],[[["",0]],["str",0]],[[["usize",0]]],[[["usize",0]]],[[["bool",0]]],[[["str",0]]],[[["osstr",3]]],[[["",0],["appsettings",4]],["bool",0]],[[["",0],["arg",3]],["bool",0]],[[["",0],["argsettings",4]],["bool",0]],[[["",0],["errorkind",4]],["bool",0]],[[["",0]],["never",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["arg",3]]],[[]],[[]],[[]],[[]],[[]],[[["arggroup",3]]],[[]],[[]],[[]],[[]],[[["error",3]]],[[]],[[["error",3]]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]]],[[["",0],["into",8,[["string",3]]],["shell",4],["into",8,[["osstring",3]]]]],[[["",0],["into",8,[["string",3]]],["shell",4],["",0]]],[[["",0]],["option",4,[["str",0]]]],[[],["argmatches",3]],[[],["argmatches",3]],[[],["clapresult",6,[["argmatches",3]]]],[[["",0]],["clapresult",6,[["argmatches",3]]]],[[],["clapresult",6,[["argmatches",3]]]],[[["",0]],["str",0]],[[["bool",0]]],[[["appsettings",4]]],[[]],[[["arggroup",3]]],[[["str",0]]],[[]],[[]],[[["into",8,[["str",0]]]]],[[["str",0]]],[[["into",8,[["str",0]]]]],[[["asref",8,[["str",0]]]]],[[["bool",0]]],[[["bool",0]]],[[["bool",0]]],[[["bool",0]]],[[["bool",0]]],[[["bool",0]]],[[["u64",0]]],[[["",0],["asref",8,[["str",0]]]],["option",4,[["usize",0]]]],[[["",0],["asref",8,[["str",0]]]],["option",4,[["indices",3]]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["asref",8,[["str",0]]]],["bool",0]],[[["",0],["argsettings",4]],["bool",0]],null,[[["bool",0]]],[[["str",0]]],[[["into",8,[["str",0]]]]],[[["str",0]]],[[["into",8,[["str",0]]]]],[[["usize",0]]],[[["u64",0]]],null,[[["u64",0]]],[[["bool",0]]],[[["bool",0]]],[[["into",8,[["string",3]]]]],[[["into",8,[["string",3]]]]],[[["",0]],["option",4,[["str",0]]]],[[["",0]],["option",4,[["osstr",3]]]],[[["",0]],["option",4,[["str",0]]]],[[["",0]],["option",4,[["osstr",3]]]],[[["bool",0]]],[[["u64",0]]],[[["",0],["asref",8,[["str",0]]]],["u64",0]],[[["str",0]]],[[]],[[["str",0]]],[[]],[[["",0]],["clapresult",6]],[[["",0]],["clapresult",6]],[[["bool",0]]],[[["bool",0]]],[[["bool",0]]],[[["bool",0]]],[[["bool",0]]],[[["str",0],["str",0]]],[[]],[[["str",0]]],[[]],[[]],[[["str",0]]],[[["str",0]]],[[]],[[]],[[["str",0],["str",0]]],[[]],[[["argsettings",4]]],[[["usize",0]]],[[["appsettings",4]]],[[]],[[["asref",8,[["str",0]]]]],[[["",0]]],[[["",0]]],[[["app",3]]],[[["",0]]],[[["",0],["asref",8,[["str",0]]]],["option",4,[["argmatches",3]]]],[[["",0]],["option",4,[["str",0]]]],[[]],[[["bool",0]]],[[["into",8,[["str",0]]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["argsettings",4]]],[[["appsettings",4]]],[[]],[[["into",8,[["str",0]]]]],[[["",0]],["str",0]],[[["bool",0]]],[[["",0]],["bool",0]],[[]],[[]],[[["str",0]]],[[["str",0]]],[[]],[[["",0],["asref",8,[["str",0]]]],["option",4,[["str",0]]]],[[["",0],["asref",8,[["str",0]]]],["option",4,[["cow",4,[["str",0]]]]]],[[["",0],["asref",8,[["str",0]]]],["option",4,[["osstr",3]]]],null,null,[[["str",0]]],[[["",0],["asref",8,[["str",0]]]],["option",4,[["values",3]]]],[[["",0],["asref",8,[["str",0]]]],["option",4,[["vec",3,[["string",3]]]]]],[[["",0],["asref",8,[["str",0]]]],["option",4,[["osvalues",3]]]],null,null,[[]],[[["into",8,[["str",0]]]]],[[["into",8,[["str",0]]]]],[[["asref",8,[["str",0]]]]],[[["into",8,[["str",0]]]]],[[["into",8,[["str",0]]]]],[[]],[[]],[[["into",8,[["string",3]]]]],[[["str",0],["errorkind",4]]],[[["str",0]]],[[["str",0]]],[[["str",0]],["app",3]],[[["",0],["",0]],["clapresult",6]],[[["",0],["",0]],["clapresult",6]],[[["",0],["",0]],["clapresult",6]],[[["",0],["",0]],["clapresult",6]]],"p":[[4,"AppSettings"],[4,"ArgSettings"],[4,"ErrorKind"],[4,"Shell"],[3,"App"],[3,"Arg"],[3,"ArgGroup"],[3,"ArgMatches"],[3,"Values"],[3,"OsValues"],[3,"SubCommand"],[3,"Error"]]},\
"criterion":{"doc":"A statistics-driven micro-benchmarking library written in …","t":[13,4,4,4,3,3,3,13,13,3,13,13,13,13,13,13,13,13,13,13,3,13,4,4,13,13,4,0,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,8,10,16,8,16,8,3,10,11,11,11,11,11,11,10,11,11,11,10,11,11,11,11,10,10,10,10,11,10,11,11,11,11,10,11,3,8,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11],"n":["Auto","AxisScale","Baseline","BatchSize","Bencher","BenchmarkGroup","BenchmarkId","Bytes","Compare","Criterion","Elements","Flat","Gnuplot","LargeInput","Linear","Linear","Logarithmic","NumBatches","NumIterations","PerIteration","PlotConfiguration","Plotters","PlottingBackend","SamplingMode","Save","SmallInput","Throughput","async_executor","bench_function","bench_function","bench_with_input","bench_with_input","benchmark_group","black_box","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","can_plot","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","confidence_level","confidence_level","configure_from_args","criterion_group","criterion_main","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","finish","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_parameter","hash","hash","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","iter","iter_batched","iter_batched_ref","iter_custom","iter_with_large_drop","measurement","measurement_time","measurement_time","ne","ne","ne","new","noise_threshold","noise_threshold","nresamples","nresamples","plot_config","plotting_backend","profiler","retain_baseline","sample_size","sample_size","sampling_mode","save_baseline","serialize","significance_level","significance_level","summary_scale","throughput","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","warm_up_time","warm_up_time","with_filter","with_measurement","with_output_color","with_plots","with_profiler","without_plots","0","0","0","0","AsyncExecutor","block_on","Intermediate","Measurement","Value","ValueFormatter","WallTime","add","add","borrow","borrow_mut","deref","deref_mut","drop","end","end","format_throughput","format_value","formatter","formatter","from","init","into","scale_for_machines","scale_throughputs","scale_values","start","start","to_f64","to_f64","try_from","try_into","type_id","zero","zero","ExternalProfiler","Profiler","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","start_profiling","start_profiling","stop_profiling","stop_profiling","try_from","try_into","type_id"],"q":["criterioncriterion::BatchSize","","criterion::Throughput","","criterion::async_executor","","criterion::measurement","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","criterion::profiler","","","","","","","","","","","","","","","",""],"d":["Criterion.rs should choose a sampling method …","Axis scaling type","Baseline describes how the baseline_directory is handled.","Argument to <code>Bencher::iter_batched</code> and …","Timer struct used to iterate a benchmarked function and …","Structure used to group together a set of related …","Simple structure representing an ID for a benchmark. The …","Measure throughput in terms of bytes/second. The value …","Compare ensures a previous saved version of the baseline …","The benchmark manager","Measure throughput in terms of elements/second. The value …","Keep the iteration count the same for all samples. This is …","Plotting backend which uses the external <code>gnuplot</code> command …","<code>LargeInput</code> indicates that the input to the benchmark …","Axes scale linearly","Scale the iteration count in each sample linearly. This is …","Axes scale logarithmically","<code>NumBatches</code> will attempt to divide the iterations up into a …","<code>NumIterations</code> fixes the batch size to a constant number, …","<code>PerIteration</code> indicates that the input to the benchmark …","Contains the configuration options for the plots generated …","Plotting backend which uses the rust ‘Plotters’ …","Enum used to select the plotting backend.","This enum allows the user to control how Criterion.rs …","Save writes the benchmark results to the baseline …","<code>SmallInput</code> indicates that the input to the benchmark …","Enum representing different ways of measuring the …","This module defines a trait that can be used to plug in …","Benchmark the given parameterless function inside this …","Benchmarks a function. For comparing multiple functions, …","Benchmark the given parameterized function inside this …","Benchmarks a function with an input. For comparing …","Return a benchmark group. All benchmarks performed using a …","A function that is opaque to the optimizer, used to …","","","","","","","","","","","","","","","","","","","","","","","Return true if generation of the plots is possible.","","","","","","","","","","","","","","","","","Changes the confidence level for benchmarks in this group. …","Changes the default confidence level for benchmarks run …","Configure this criterion struct based on the command-line …","Macro used to define a function group for the benchmark …","Macro which expands to a benchmark harness.","Creates a benchmark manager with the following default …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the benchmark group and generate the summary …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Construct a new benchmark ID from just a parameter value. …","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Times a <code>routine</code> by executing it many times and timing the …","Times a <code>routine</code> that requires some input by generating a …","Times a <code>routine</code> that requires some input by generating a …","Times a <code>routine</code> by executing it many times and relying on …","Times a <code>routine</code> by collecting its output on each …","This module defines a set of traits that can be used to …","Changes the target measurement time for this benchmark …","Changes the default measurement time for benchmarks run …","","","","Construct a new benchmark ID from a string function name …","Changes the noise threshold for benchmarks in this group. …","Changes the default noise threshold for benchmarks run …","Changes the number of resamples for this benchmark group","Changes the default number of resamples for benchmarks run …","Changes the plot configuration for this benchmark group.","Set the plotting backend. By default, Criterion will use …","This module provides an extension trait which allows …","Names an explicit baseline and disables overwriting the …","Changes the size of the sample for this benchmark","Changes the default size of the sample for benchmarks run …","Set the sampling mode for this benchmark group.","Names an explicit baseline and enables overwriting the …","","Changes the significance level for benchmarks in this …","Changes the default significance level for benchmarks run …","Set the axis scale (linear or logarithmic) for the summary …","Set the input size for this benchmark group. Used for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Changes the warm up time for this benchmark","Changes the default warm up time for benchmarks run with …","Filters the benchmarks. Only benchmarks with names that …","Changes the measurement for the benchmarks run with this …","Override whether the CLI output will be colored or not. …","Enables plotting","Changes the internal profiler for benchmarks run with this …","Disables plotting","","","","","Plugin trait used to allow benchmarking on multiple …","Spawn the given future onto this runtime and block until it…","This type represents an intermediate value for the …","Trait for all types which define something Criterion.rs …","This type is the measured value. An example might be the …","Trait providing functions to format measured values to …","<code>WallTime</code> is the default measurement in Criterion.rs. It …","Combine two values. Criterion.rs sometimes needs to …","","","","","","","Criterion.rs will call this after iterating the benchmark …","","Format the value as a throughput measurement. The value …","Format the value (with appropriate unit) and return it as …","Return a trait-object reference to the value formatter for …","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Scale the values and return a unit string designed for …","Convert the given measured values into throughput numbers …","Scale the given values to some appropriate unit and return …","Criterion.rs will call this before iterating the benchmark.","","Converts the measured value to f64 so that it can be used …","","","","","Return a “zero” value for the Value type which can be …","","Dummy profiler implementation, representing cases where …","Extension trait for external crates to implement which …","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","This function is called when Criterion.rs starts profiling …","","This function is called after Criterion.rs stops profiling …","","","",""],"i":[1,0,0,0,0,0,0,2,3,0,2,1,4,5,6,1,6,5,5,5,0,4,0,0,3,5,0,0,7,8,7,8,8,0,7,9,8,10,5,3,4,2,6,11,1,7,9,8,10,5,3,4,2,6,11,1,8,10,5,3,4,2,6,11,1,10,5,3,4,2,6,11,1,7,8,8,0,0,8,11,7,9,8,10,5,3,4,2,6,11,1,7,9,8,10,5,3,4,2,6,11,1,2,7,7,9,8,10,5,3,4,2,6,11,1,10,5,2,7,5,3,4,2,6,11,1,7,9,8,10,5,3,4,2,6,11,1,10,10,5,7,9,8,10,5,3,4,2,6,11,1,7,9,8,10,5,3,4,2,6,11,1,9,9,9,9,9,0,7,8,10,5,2,10,7,8,7,8,7,8,0,8,7,8,7,8,2,7,8,11,7,10,5,3,4,2,6,11,1,7,9,8,10,5,3,4,2,6,11,1,7,9,8,10,5,3,4,2,6,11,1,7,9,8,10,5,3,4,2,6,11,1,7,8,8,8,8,8,8,8,12,13,14,15,0,16,17,0,17,0,0,17,18,18,18,18,18,18,17,18,19,19,17,18,18,18,18,19,19,19,17,18,17,18,18,18,18,17,18,0,0,20,20,20,20,20,20,20,20,21,20,21,20,20,20,20],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["intobenchmarkid",8]],["",0]],[[["",0],["str",0]],["criterion",3]],[[["",0],["intobenchmarkid",8],["",0]],["",0]],[[["",0],["benchmarkid",3],["",0]],["criterion",3]],[[["",0],["into",8,[["string",3]]]],["benchmarkgroup",3]],[[]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["bool",0]],[[["",0]],["benchmarkid",3]],[[["",0]],["batchsize",4]],[[["",0]],["baseline",4]],[[["",0]],["plottingbackend",4]],[[["",0]],["throughput",4]],[[["",0]],["axisscale",4]],[[["",0]],["plotconfiguration",3]],[[["",0]],["samplingmode",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["f64",0]],["",0]],[[["f64",0]],["criterion",3]],[[],["criterion",3]],null,null,[[],["criterion",3]],[[],["plotconfiguration",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["benchmarkid",3]],["bool",0]],[[["",0],["batchsize",4]],["bool",0]],[[["",0],["throughput",4]],["bool",0]],[[]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["display",8]],["benchmarkid",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]]],[[["",0],["batchsize",4]]],[[["",0],["batchsize",4]]],[[["",0]]],[[["",0]]],null,[[["",0],["duration",3]],["",0]],[[["duration",3]],["criterion",3]],[[["",0],["benchmarkid",3]],["bool",0]],[[["",0],["batchsize",4]],["bool",0]],[[["",0],["throughput",4]],["bool",0]],[[["into",8,[["string",3]]],["display",8]],["benchmarkid",3]],[[["",0],["f64",0]],["",0]],[[["f64",0]],["criterion",3]],[[["",0],["usize",0]],["",0]],[[["usize",0]],["criterion",3]],[[["",0],["plotconfiguration",3]],["",0]],[[["plottingbackend",4]],["criterion",3]],null,[[["string",3]],["criterion",3]],[[["",0],["usize",0]],["",0]],[[["usize",0]],["criterion",3]],[[["",0],["samplingmode",4]],["",0]],[[["string",3]],["criterion",3]],[[["",0]],["result",4]],[[["",0],["f64",0]],["",0]],[[["f64",0]],["criterion",3]],[[["axisscale",4]],["plotconfiguration",3]],[[["",0],["throughput",4]],["",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["duration",3]],["",0]],[[["duration",3]],["criterion",3]],[[["into",8,[["string",3]]]],["criterion",3]],[[["measurement",8]],["criterion",3,[["measurement",8]]]],[[["bool",0]],["criterion",3]],[[],["criterion",3]],[[["profiler",8]],["criterion",3]],[[],["criterion",3]],null,null,null,null,null,[[["",0]]],null,null,null,null,null,[[["",0]]],[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0]]],[[["",0]]],[[["",0],["throughput",4],["f64",0]],["string",3]],[[["",0],["f64",0]],["string",3]],[[["",0]],["valueformatter",8]],[[["",0]],["valueformatter",8]],[[]],[[],["usize",0]],[[]],[[["",0]],["str",0]],[[["",0],["f64",0],["throughput",4]],["str",0]],[[["",0],["f64",0]],["str",0]],[[["",0]]],[[["",0]]],[[["",0]],["f64",0]],[[["",0]],["f64",0]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]]],[[["",0]]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[]],[[],["usize",0]],[[]],[[["",0],["str",0],["path",3]]],[[["",0],["str",0],["path",3]]],[[["",0],["str",0],["path",3]]],[[["",0],["str",0],["path",3]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[4,"SamplingMode"],[4,"Throughput"],[4,"Baseline"],[4,"PlottingBackend"],[4,"BatchSize"],[4,"AxisScale"],[3,"BenchmarkGroup"],[3,"Criterion"],[3,"Bencher"],[3,"BenchmarkId"],[3,"PlotConfiguration"],[13,"NumBatches"],[13,"NumIterations"],[13,"Bytes"],[13,"Elements"],[8,"AsyncExecutor"],[8,"Measurement"],[3,"WallTime"],[8,"ValueFormatter"],[3,"ExternalProfiler"],[8,"Profiler"]]},\
"criterion_plot":{"doc":"Criterion’s plotting library.","tn":["0","0","0","0","0","0","0","1","Auto","Axes","Axis","Black","Blue","BottomX","BottomXLeftY","BottomXRightY","BoxWidth","Circle","Color","Cyan","DarkViolet","Dash","Dot","DotDash","DotDotDash","Error","Exec","Figure","FilledCircle","FilledSquare","FilledTriangle","Font","FontSize","ForestGreen","Gold","Gray","Green","Grid","Key","Label","LeftY","Limits","LineType","LineWidth","Linear","Logarithmic","Magenta","Major","Minor","Opacity","Output","OutputError","ParseError","Plus","PointSize","PointType","Range","Red","Rgb","RightY","Scale","ScaleFactor","Size","SmallDot","Solid","Square","Star","Svg","Terminal","TicLabels","Title","TopX","TopXLeftY","TopXRightY","Triangle","Version","VersionError","White","X","Yellow","axis","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","candlestick","cause","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","configure","configure","curve","description","draw","dump","errorbar","filledcurve","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","grid","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","key","labels","major","minor","new","patch","plot","plot","plot","plot","positions","prelude","proxy","save","set","set","set","set","set","set","set","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","traits","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","version","0","1","2","0","1","0","0","0","Properties","borrow","borrow_mut","clone","clone_into","configure","from","hide","into","set","set","set","set","set","show","to_owned","try_from","try_into","type_id","Candlesticks","Properties","borrow","borrow","borrow_mut","borrow_mut","box_high","box_min","from","from","into","into","set","set","set","set","try_from","try_from","try_into","try_into","type_id","type_id","whisker_high","whisker_min","x","Curve","Dots","Impulses","Lines","LinesPoints","Points","Properties","Steps","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","set","set","set","set","set","set","set","try_from","try_from","try_into","try_into","type_id","type_id","x","x","x","x","x","x","y","y","y","y","y","y","ErrorBar","Properties","XErrorBars","XErrorLines","YErrorBars","YErrorLines","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","set","set","set","set","set","set","try_from","try_from","try_into","try_into","type_id","type_id","x","x","x","x","x_high","x_high","x_low","x_low","y","y","y","y","y_high","y_high","y_low","y_low","FilledCurve","Properties","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","set","set","set","set","try_from","try_from","try_into","try_into","type_id","type_id","x","y1","y2","Properties","borrow","borrow_mut","clone","clone_into","from","hide","into","show","to_owned","try_from","try_into","type_id","Bottom","Boxed","Center","Center","Horizontal","Horizontally","Inside","Justification","Left","Left","No","Order","Outside","Position","Properties","Right","Right","SampleText","Stacked","TextSample","Top","Vertical","Vertically","Yes","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","from","from","from","from","from","from","from","from","hide","into","into","into","into","into","into","into","into","set","set","set","set","set","set","show","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","0","0","1","1","Axes","Axis","BoxWidth","Boxed","Candlesticks","Color","Configure","Dots","Figure","FilledCurve","Font","FontSize","Grid","Horizontal","Impulses","Justification","Key","Label","LineType","LineWidth","Lines","LinesPoints","Opacity","Order","Output","Plot","PointSize","PointType","Points","Position","Range","Scale","ScaleFactor","Set","Size","Stacked","Steps","Terminal","TicLabels","Title","Vertical","XErrorBars","XErrorLines","YErrorBars","YErrorLines","Font","Label","Output","Title","Configure","Data","Plot","Properties","Properties","Set","configure","f64","plot","set"],"q":["criterion_plotcriterion_plot::Color","","","criterion_plot::Range","","criterion_plot::VersionError","","","criterion_plot::axis","","","","","","","","","","","","","","","","","","","criterion_plot::candlestick","","","","","","","","","","","","","","","","","","","","","","","","","criterion_plot::curve","","","","","","","","","","","","","","","","","","","","","","","","","","","","","criterion_plot::curve::Curve","","","","","","","","","","","","criterion_plot::errorbar","","","","","","","","","","","","","","","","","","","","","","","","","","criterion_plot::errorbar::ErrorBar","","","","","","","","","","","","","","","","criterion_plot::filledcurve","","","","","","","","","","","","","","","","","","","","","","","criterion_plot::grid","","","","","","","","","","","","","criterion_plot::key","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","criterion_plot::key::Position","","","","criterion_plot::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","criterion_plot::proxy","","","","criterion_plot::traits","","","","","","","","",""],"d":["","","","","","","","","Autoscale the axis","A pair of axes that define a coordinate system","A coordinate axis","","","X axis on the bottom side of the figure","","","Box width for box-related plots: bars, candlesticks, etc","","Color","","","","","","","The <code>gnuplot</code> command returned an error message","The <code>gnuplot</code> command couldn’t be executed","Plot container","","","","A font name","The size of a font","","","","","Grid line","The key or legend","Plot label","Y axis on the left side of the figure","Set the limits of the axis","Line type","Width of the lines","","","","Major gridlines","Minor gridlines","Fill color opacity","Output file path","The <code>gnuplot</code> command returned invalid utf-8","The <code>gnuplot</code> command returned an unparseable string","","Size of the points","Point type","Axis range","","Custom RGB color","Y axis on the right side of the figure","Axis scale","Axis scale factor","Figure size","Line made of minimally sized dots","","","","","Output terminal","Labels attached to the tics of an axis","Figure title","X axis on the top side of the figure","","","","Structure representing a gnuplot version number.","Possible errors when parsing gnuplot’s version string","","","","Coordinate axis","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","“Candlestick” plots","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Configures the key (legend)","Configures an axis","Simple “curve” like plots","","Spawns a drawing child process","Dumps the script required to produce the figure into <code>sink</code>","Error bar plots","Filled curve plots","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gridline","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Key (or legend)","Labels to attach to the tics","The major version number","The minor version number","Creates an empty figure","The patch level","","","","","Position of the tics on the axis","A collection of the most used traits, structs and enums","Generic constructors for newtypes","Saves the script required to produce the figure to <code>path</code>","Changes the size of the font","Changes the box width of all the box related plots (bars, …","Sets the title","Changes the output terminal","Changes the figure size","Changes the font","Changes the output file","","","","","","","","","","","","","","","","","","","","Traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>gnuplot</code> version","","","","","","","","","Properties of the coordinate axes","","","","","Configures the gridlines","Returns the argument unchanged.","Hides the axis","Calls <code>U::from(self)</code>.","Attaches labels to the tics of an axis","Changes the <em>scale factor</em> of the axis.","Sets the scale of the axis","Changes the range of the axis that will be shown","Attaches a label to the axis","Makes the axis visible","","","","","A candlestick consists of a box and two whiskers that …","Properties common to candlestick plots","","","","","Y coordinate of the top of the box","Y coordinate of the bottom of the box","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Sets the line color","Sets the legend label","Changes the line type","Changes the width of the line","","","","","","","Y coordinate of the end point of the top whisker","Y coordinate of the end point of the bottom whisker","X coordinate of the candlestick","Types of “curve” plots","A minimally sized dot on each data point","A vertical “impulse” on each data point","Line that joins the data points","Line with a point on each data point","A point on each data point","Properties common to simple “curve” like plots","An step <code>_|</code> between each data point","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Changes the point type","Select the axes to plot against","Sets the line color","Sets the legend label","Changes the line type","Changes the width of the line","Changes the size of the points","","","","","","","X coordinate of the data points","X coordinate of the data points","X coordinate of the data points","X coordinate of the data points","X coordinate of the data points","X coordinate of the data points","Y coordinate of the data points","Y coordinate of the data points","Y coordinate of the data points","Y coordinate of the data points","Y coordinate of the data points","Y coordinate of the data points","Asymmetric error bar plots","Properties common to error bar plots","Horizontal error bars","Horizontal error bars, where each point is joined by a line","Vertical error bars","Vertical error bars, where each point is joined by a line","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Changes the size of the points","Changes the point type","Changes the color of the error bars","Sets the legend label","Change the line type","Changes the linewidth","","","","","","","X coordinate of the data points","X coordinate of the data points","X coordinate of the data points","X coordinate of the data points","Y coordinate of the right end of the error bar","Y coordinate of the right end of the error bar","X coordinate of the left end of the error bar","X coordinate of the left end of the error bar","Y coordinate of the data points","Y coordinate of the data points","Y coordinate of the data points","Y coordinate of the data points","Y coordinate of the top of the error bar","Y coordinate of the top of the error bar","Y coordinate of the bottom of the error bar","Y coordinate of the bottom of the error bar","Fills the area between two curves","Properties common to filled curve plots","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Select axes to plot against","Sets the legend label","Changes the opacity of the fill color","Sets the fill color","","","","","","","X coordinate of the data points of both curves","Y coordinate of the data points of the first curve","Y coordinate of the data points of the second curve","Gridline properties","","","","","Returns the argument unchanged.","Hides the gridlines","Calls <code>U::from(self)</code>.","Shows the gridlines","","","","","Bottom border of the figure","Whether the key is surrounded by a box or not","Center of the figure","Center of the figure","Horizontal position of the key","","Inside the area surrounded by the four (BottomX, TopX, …","Text justification of the key","Left border of the figure","","","Order of the elements of the key","Outside of that area","Position of the key","Properties of the key","Right border of the figure","","Sample first, then text","How the entries of the key are stacked","Text first, then sample","Top border of the figure","Vertical position of the key","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Hides the key","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","How to order each entry","Changes how the entries of the key are stacked","","Select if the key will be surrounded with a box or not","Changes the justification of the text of each entry","Selects where to place the key","Shows the key","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generic constructor for <code>Font</code>","Generic constructor for <code>Label</code>","Generic constructor for <code>Output</code>","Generic constructor for <code>Title</code>","Overloaded <code>configure</code> method","Types that can be plotted","Overloaded <code>plot</code> method","The properties of what’s being configured","The properties associated to the plot","Overloaded <code>set</code> method","Configure some set of properties","Convert the type into a double precision float","Plots some <code>data</code> with some <code>configuration</code>","Sets some property"],"i":[1,2,3,4,5,6,7,6,8,0,0,9,9,10,11,11,0,12,0,9,9,13,13,13,13,14,14,0,12,12,12,0,0,9,9,9,9,0,0,0,10,8,0,0,15,15,9,16,16,0,0,14,14,12,0,0,0,9,9,10,0,0,0,13,13,12,12,17,0,0,0,10,11,11,12,0,0,9,12,9,0,18,19,20,21,22,23,24,1,2,25,3,4,5,8,6,11,10,9,16,13,12,15,7,17,14,18,19,20,21,22,23,24,1,2,25,3,4,5,8,6,11,10,9,16,13,12,15,7,17,14,0,14,24,1,2,25,3,4,5,8,6,11,10,9,16,13,12,15,7,17,24,1,2,25,3,4,5,8,6,11,10,9,16,13,12,15,7,17,24,24,0,14,24,24,0,0,14,14,18,19,20,21,22,23,24,1,2,25,3,4,5,8,6,11,10,9,16,13,12,15,7,17,14,0,18,19,20,21,22,23,24,1,2,25,3,4,5,8,6,11,10,9,16,13,12,15,7,17,14,0,21,23,23,24,23,24,24,24,24,21,0,0,24,24,24,24,24,24,24,24,24,1,2,25,3,4,5,8,6,11,10,9,16,13,12,15,7,17,14,0,18,19,20,21,22,23,24,1,2,25,3,4,5,8,6,11,10,9,16,13,12,15,7,17,14,18,19,20,21,22,23,24,1,2,25,3,4,5,8,6,11,10,9,16,13,12,15,7,17,14,18,19,20,21,22,23,24,1,2,25,3,4,5,8,6,11,10,9,16,13,12,15,7,17,14,0,26,26,26,27,27,28,29,30,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,0,32,33,32,33,33,33,32,33,32,33,32,32,32,32,32,33,32,33,32,33,33,33,33,0,34,34,34,34,34,0,34,35,34,35,34,35,34,35,34,35,35,35,35,35,35,35,35,34,35,34,35,34,36,37,38,39,40,41,36,37,38,39,40,41,0,0,42,42,42,42,43,42,43,42,43,42,43,42,43,43,43,43,43,43,43,42,43,42,43,42,44,45,46,47,44,45,44,45,44,45,46,47,46,47,46,47,0,0,48,49,48,49,48,49,48,49,48,48,48,48,48,49,48,49,48,49,49,49,49,0,50,50,50,50,50,50,50,50,50,50,50,50,51,0,52,51,0,53,54,0,52,55,56,0,54,0,0,52,55,57,0,57,51,0,53,56,58,56,52,55,57,54,53,51,58,56,52,55,57,54,53,51,58,56,52,55,57,54,53,51,58,56,52,55,57,54,53,51,58,56,52,55,57,54,53,51,58,58,56,52,55,57,54,53,51,58,58,58,58,58,58,58,58,56,52,55,57,54,53,51,58,56,52,55,57,54,53,51,58,56,52,55,57,54,53,51,58,56,52,55,57,54,53,51,59,60,59,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,62,0,61,63,62,64],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullnull,[[["",0]],["option",4,[["error",8]]]],[[["",0]],["figure",3]],[[["",0]],["boxwidth",3]],[[["",0]],["fontsize",3]],[[["",0]],["key",3]],[[["",0]],["linewidth",3]],[[["",0]],["opacity",3]],[[["",0]],["pointsize",3]],[[["",0]],["range",4]],[[["",0]],["size",3]],[[["",0]],["axes",4]],[[["",0]],["axis",4]],[[["",0]],["color",4]],[[["",0]],["grid",4]],[[["",0]],["linetype",4]],[[["",0]],["pointtype",4]],[[["",0]],["scale",4]],[[["",0]],["scalefactor",3]],[[["",0]],["terminal",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["key",3]],["figure",3]],[[["",0],["axis",4]],["figure",3]],null,[[["",0]],["str",0]],[[["",0]],["result",6,[["child",3]]]],[[["",0],["",0]],["result",6,[["figure",3]]]],null,null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[],["figure",3]],null,[[["",0],["candlesticks",3]],["figure",3]],[[["",0],["curve",4]],["figure",3]],[[["",0],["errorbar",4]],["figure",3]],[[["",0],["filledcurve",3]],["figure",3]],null,null,null,[[["",0],["path",3]],["result",6,[["figure",3]]]],[[["",0],["fontsize",3]],["figure",3]],[[["",0],["boxwidth",3]],["figure",3]],[[["",0],["title",3]],["figure",3]],[[["",0],["terminal",4]],["figure",3]],[[["",0],["size",3]],["figure",3]],[[["",0],["font",3]],["figure",3]],[[["",0],["output",3]],["figure",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["result",4,[["version",3],["versionerror",4]]]],null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["properties",3]],[[["",0],["",0]]],[[["",0],["grid",4]],["properties",3]],[[]],[[["",0]],["properties",3]],[[]],[[["",0],["ticlabels",3]],["properties",3]],[[["",0],["scalefactor",3]],["properties",3]],[[["",0],["scale",4]],["properties",3]],[[["",0],["range",4]],["properties",3]],[[["",0],["label",3]],["properties",3]],[[["",0]],["properties",3]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,[[]],[[]],[[]],[[]],[[["",0],["color",4]],["properties",3]],[[["",0],["label",3]],["properties",3]],[[["",0],["linetype",4]],["properties",3]],[[["",0],["linewidth",3]],["properties",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[]],[[]],[[["",0],["pointtype",4]],["properties",3]],[[["",0],["axes",4]],["properties",3]],[[["",0],["color",4]],["properties",3]],[[["",0],["label",3]],["properties",3]],[[["",0],["linetype",4]],["properties",3]],[[["",0],["linewidth",3]],["properties",3]],[[["",0],["pointsize",3]],["properties",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[]],[[]],[[["",0],["pointsize",3]],["properties",3]],[[["",0],["pointtype",4]],["properties",3]],[[["",0],["color",4]],["properties",3]],[[["",0],["label",3]],["properties",3]],[[["",0],["linetype",4]],["properties",3]],[[["",0],["linewidth",3]],["properties",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[]],[[]],[[["",0],["axes",4]],["properties",3]],[[["",0],["label",3]],["properties",3]],[[["",0],["opacity",3]],["properties",3]],[[["",0],["color",4]],["properties",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["properties",3]],[[["",0],["",0]]],[[]],[[["",0]],["properties",3]],[[]],[[["",0]],["properties",3]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["properties",3]],[[["",0]],["boxed",4]],[[["",0]],["horizontal",4]],[[["",0]],["justification",4]],[[["",0]],["order",4]],[[["",0]],["position",4]],[[["",0]],["stacked",4]],[[["",0]],["vertical",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["properties",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["order",4]],["properties",3]],[[["",0],["stacked",4]],["properties",3]],[[["",0],["title",3]],["properties",3]],[[["",0],["boxed",4]],["properties",3]],[[["",0],["justification",4]],["properties",3]],[[["",0],["position",4]],["properties",3]],[[["",0]],["properties",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["fonttype",3]],[[],["labeltype",3]],[[],["outputtype",3]],[[],["titletype",3]],null,null,null,null,null,null,[[["",0]],["",0]],[[],["f64",0]],[[["",0]],["",0]],[[["",0]],["",0]]],"p":[[3,"BoxWidth"],[3,"FontSize"],[3,"LineWidth"],[3,"Opacity"],[3,"PointSize"],[3,"Size"],[3,"ScaleFactor"],[4,"Range"],[4,"Color"],[4,"Axis"],[4,"Axes"],[4,"PointType"],[4,"LineType"],[4,"VersionError"],[4,"Scale"],[4,"Grid"],[4,"Terminal"],[3,"Font"],[3,"Label"],[3,"Output"],[3,"TicLabels"],[3,"Title"],[3,"Version"],[3,"Figure"],[3,"Key"],[13,"Rgb"],[13,"Limits"],[13,"Exec"],[13,"Error"],[13,"ParseError"],[3,"Properties"],[3,"Properties"],[3,"Candlesticks"],[4,"Curve"],[3,"Properties"],[13,"Dots"],[13,"Impulses"],[13,"Lines"],[13,"LinesPoints"],[13,"Points"],[13,"Steps"],[4,"ErrorBar"],[3,"Properties"],[13,"XErrorBars"],[13,"XErrorLines"],[13,"YErrorBars"],[13,"YErrorLines"],[3,"Properties"],[3,"FilledCurve"],[3,"Properties"],[4,"Vertical"],[4,"Horizontal"],[4,"Stacked"],[4,"Position"],[4,"Justification"],[4,"Boxed"],[4,"Order"],[3,"Properties"],[13,"Inside"],[13,"Outside"],[8,"Configure"],[8,"Plot"],[8,"Data"],[8,"Set"]]},\
"crossbeam_channel":{"doc":"Multi-producer multi-consumer channels for message passing.","t":[12,13,13,13,13,13,13,3,3,3,3,3,4,3,3,3,3,4,3,13,13,3,3,4,3,4,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,12,12,12],"n":["0","Disconnected","Disconnected","Disconnected","Disconnected","Empty","Full","IntoIter","Iter","ReadyTimeoutError","Receiver","RecvError","RecvTimeoutError","Select","SelectTimeoutError","SelectedOperation","SendError","SendTimeoutError","Sender","Timeout","Timeout","TryIter","TryReadyError","TryRecvError","TrySelectError","TrySendError","after","at","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounded","capacity","capacity","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_iter","into_iter","into_iter","into_iter","is_disconnected","is_disconnected","is_disconnected","is_disconnected","is_empty","is_empty","is_empty","is_full","is_full","is_full","is_timeout","is_timeout","iter","len","len","ne","ne","ne","never","new","next","next","next","ready","ready_deadline","ready_timeout","recv","recv","recv","recv_deadline","recv_timeout","remove","same_channel","same_channel","select","select","select_deadline","select_timeout","send","send","send","send_deadline","send_timeout","tick","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_iter","try_ready","try_recv","try_select","try_send","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unbounded","0","0","0","0"],"q":["crossbeam_channelcrossbeam_channel::SendTimeoutError","","crossbeam_channel::TrySendError",""],"d":["","The message could not be sent because the channel is …","The message could not be sent because the channel is …","The message could not be received because the channel is …","The message could not be received because the channel is …","A message could not be received because the channel is …","The message could not be sent because the channel is full.","A blocking iterator over messages in a channel.","A blocking iterator over messages in a channel.","An error returned from the <code>ready_timeout</code> method.","The receiving side of a channel.","An error returned from the <code>recv</code> method.","An error returned from the <code>recv_timeout</code> method.","Selects from a set of channel operations.","An error returned from the <code>select_timeout</code> method.","A selected operation that needs to be completed.","An error returned from the <code>send</code> method.","An error returned from the <code>send_timeout</code> method.","The sending side of a channel.","The message could not be sent because the channel is full …","A message could not be received because the channel is …","A non-blocking iterator over messages in a channel.","An error returned from the <code>try_ready</code> method.","An error returned from the <code>try_recv</code> method.","An error returned from the <code>try_select</code> method.","An error returned from the <code>try_send</code> method.","Creates a receiver that delivers a message after a certain …","Creates a receiver that delivers a message at a certain …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a channel of bounded capacity.","If the channel is bounded, returns its capacity.","If the channel is bounded, returns its capacity.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the index of the selected operation.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Unwraps the message.","Unwraps the message.","Unwraps the message.","","","","","Returns <code>true</code> if the send operation failed because the …","Returns <code>true</code> if the send operation failed because the …","Returns <code>true</code> if the receive operation failed because the …","Returns <code>true</code> if the receive operation failed because the …","Returns <code>true</code> if the channel is empty.","Returns <code>true</code> if the channel is empty.","Returns <code>true</code> if the receive operation failed because the …","Returns <code>true</code> if the channel is full.","Returns <code>true</code> if the channel is full.","Returns <code>true</code> if the send operation failed because the …","Returns <code>true</code> if the send operation timed out.","Returns <code>true</code> if the receive operation timed out.","A blocking iterator over messages in the channel.","Returns the number of messages in the channel.","Returns the number of messages in the channel.","","","","Creates a receiver that never delivers messages.","Creates an empty list of channel operations for selection.","","","","Blocks until one of the operations becomes ready.","Blocks until a given deadline, or until one of the …","Blocks for a limited time until one of the operations …","Blocks the current thread until a message is received or …","Adds a receive operation.","Completes the receive operation.","Waits for a message to be received from the channel, but …","Waits for a message to be received from the channel, but …","Removes a previously added operation.","Returns <code>true</code> if senders belong to the same channel.","Returns <code>true</code> if receivers belong to the same channel.","Blocks until one of the operations becomes ready and …","Selects from a set of channel operations.","Blocks until a given deadline, or until one of the …","Blocks for a limited time until one of the operations …","Blocks the current thread until a message is sent or the …","Adds a send operation.","Completes the send operation.","Waits for a message to be sent into the channel, but only …","Waits for a message to be sent into the channel, but only …","Creates a receiver that delivers messages periodically.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A non-blocking iterator over messages in the channel.","Attempts to find a ready operation without blocking.","Attempts to receive a message from the channel without …","Attempts to select one of the operations without blocking.","Attempts to send a message into the channel without …","","","","","","","","","","","","","","","","","","Creates a channel of unbounded capacity.","","","",""],"i":[1,2,3,4,5,4,2,0,0,0,0,0,0,0,0,0,0,0,0,3,5,0,0,0,0,0,0,0,6,7,8,9,10,11,12,1,2,3,13,4,5,14,15,16,17,6,7,8,9,10,11,12,1,2,3,13,4,5,14,15,16,17,0,6,7,6,7,11,1,2,3,13,4,5,14,15,16,17,6,7,11,1,2,3,13,4,5,14,15,16,17,11,6,7,12,1,2,3,13,4,5,14,15,16,17,6,7,8,9,10,11,12,1,1,2,2,3,3,13,13,4,4,5,5,14,14,15,15,16,17,6,7,8,9,10,11,12,1,2,2,3,3,13,4,4,5,5,14,15,16,17,12,6,7,8,9,10,11,12,1,2,3,13,4,5,14,15,16,17,1,2,3,7,8,9,10,2,3,4,5,6,7,4,6,7,2,3,5,7,6,7,1,2,3,0,11,8,9,10,11,11,11,7,11,12,7,7,11,6,7,11,0,11,11,6,11,12,6,6,0,6,7,11,1,2,3,13,4,5,14,15,16,17,1,2,3,13,4,5,14,15,6,7,8,9,10,11,12,1,2,3,13,4,5,14,15,16,17,6,7,8,9,10,11,12,1,2,3,13,4,5,14,15,16,17,7,11,7,11,6,6,7,8,9,10,11,12,1,2,3,13,4,5,14,15,16,17,0,18,19,20,21],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["duration",3]],["receiver",3,[["instant",3]]]],[[["instant",3]],["receiver",3,[["instantusize",0]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]]],[[["",0]]],[[["",0]],["select",3]],[[["",0]],["senderror",3]],[[["",0]],["trysenderror",4]],[[["",0]],["sendtimeouterror",4]],[[["",0]],["recverror",3]],[[["",0]],["tryrecverror",4]],[[["",0]],["recvtimeouterror",4]],[[["",0]],["tryselecterror",3]],[[["",0]],["selecttimeouterror",3]],[[["",0]],["tryreadyerror",3]],[[["",0]],["readytimeouterror",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["select",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["senderror",3]],["bool",0]],[[["",0],["trysenderror",4]],["bool",0]],[[["",0],["sendtimeouterror",4]],["bool",0]],[[["",0],["recverror",3]],["bool",0]],[[["",0],["tryrecverror",4]],["bool",0]],[[["",0],["recvtimeouterror",4]],["bool",0]],[[["",0],["tryselecterror",3]],["bool",0]],[[["",0],["selecttimeouterror",3]],["bool",0]],[[["",0],["tryreadyerror",3]],["bool",0]],[[["",0],["readytimeouterror",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["senderror",3]],["trysenderror",4]],[[["senderror",3]],["sendtimeouterror",4]],[[]],[[]],[[]],[[["recverror",3]],["tryrecverror",4]],[[["recverror",3]],["recvtimeouterror",4]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["iter",3]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0],["senderror",3]],["bool",0]],[[["",0],["trysenderror",4]],["bool",0]],[[["",0],["sendtimeouterror",4]],["bool",0]],[[],["receiver",3]],[[],["select",3]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["usize",0]],[[["",0],["instant",3]],["result",4,[["usize",0],["readytimeouterror",3]]]],[[["",0],["duration",3]],["result",4,[["usize",0],["readytimeouterror",3]]]],[[["",0]],["result",4,[["recverror",3]]]],[[["",0],["receiver",3]],["usize",0]],[[["receiver",3]],["result",4,[["recverror",3]]]],[[["",0],["instant",3]],["result",4,[["recvtimeouterror",4]]]],[[["",0],["duration",3]],["result",4,[["recvtimeouterror",4]]]],[[["",0],["usize",0]]],[[["",0],["sender",3]],["bool",0]],[[["",0],["receiver",3]],["bool",0]],[[["",0]],["selectedoperation",3]],null,[[["",0],["instant",3]],["result",4,[["selectedoperation",3],["selecttimeouterror",3]]]],[[["",0],["duration",3]],["result",4,[["selectedoperation",3],["selecttimeouterror",3]]]],[[["",0]],["result",4,[["senderror",3]]]],[[["",0],["sender",3]],["usize",0]],[[["sender",3]],["result",4,[["senderror",3]]]],[[["",0],["instant",3]],["result",4,[["sendtimeouterror",4]]]],[[["",0],["duration",3]],["result",4,[["sendtimeouterror",4]]]],[[["duration",3]],["receiver",3,[["instant",3]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["tryiter",3]],[[["",0]],["result",4,[["usize",0],["tryreadyerror",3]]]],[[["",0]],["result",4,[["tryrecverror",4]]]],[[["",0]],["result",4,[["selectedoperation",3],["tryselecterror",3]]]],[[["",0]],["result",4,[["trysenderror",4]]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],null,null,null,null],"p":[[3,"SendError"],[4,"TrySendError"],[4,"SendTimeoutError"],[4,"TryRecvError"],[4,"RecvTimeoutError"],[3,"Sender"],[3,"Receiver"],[3,"Iter"],[3,"TryIter"],[3,"IntoIter"],[3,"Select"],[3,"SelectedOperation"],[3,"RecvError"],[3,"TrySelectError"],[3,"SelectTimeoutError"],[3,"TryReadyError"],[3,"ReadyTimeoutError"],[13,"Timeout"],[13,"Disconnected"],[13,"Full"],[13,"Disconnected"]]},\
"crossbeam_deque":{"doc":"Concurrent work-stealing deques.","t":[13,3,13,4,3,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["Empty","Injector","Retry","Steal","Stealer","Success","Worker","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","eq","fmt","fmt","fmt","fmt","from","from","from","from","from_iter","init","init","init","init","into","into","into","into","is_empty","is_empty","is_empty","is_empty","is_retry","is_success","len","len","len","ne","new","new_fifo","new_lifo","or_else","pop","push","push","steal","steal","steal_batch","steal_batch","steal_batch_and_pop","steal_batch_and_pop","stealer","success","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0"],"q":["crossbeam_deque","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","crossbeam_deque::Steal"],"d":["The queue was empty at the time of stealing.","An injector queue.","The steal operation needs to be retried.","Possible outcomes of a steal operation.","A stealer handle of a worker queue.","At least one task was successfully stolen.","A worker queue.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Consumes items until a <code>Success</code> is found and returns it.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the queue is empty.","Returns <code>true</code> if the queue is empty.","Returns <code>true</code> if the queue is empty.","Returns <code>true</code> if the queue was empty at the time of …","Returns <code>true</code> if the steal operation needs to be retried.","Returns <code>true</code> if at least one task was stolen.","Returns the number of tasks in the deque.","Returns the number of tasks in the deque.","Returns the number of tasks in the queue.","","Creates a new injector queue.","Creates a FIFO worker queue.","Creates a LIFO worker queue.","If no task was stolen, attempts another steal operation.","Pops a task from the queue.","Pushes a task into the queue.","Pushes a task into the queue.","Steals a task from the queue.","Steals a task from the queue.","Steals a batch of tasks and pushes them into another …","Steals a batch of tasks and pushes them into a worker.","Steals a batch of tasks, pushes them into another worker, …","Steals a batch of tasks, pushes them into a worker, and …","Creates a stealer for this queue.","Returns the result of the operation, if successful.","","","","","","","","","","","","","","",""],"i":[1,0,1,0,0,1,0,2,3,4,1,2,3,4,1,3,1,3,1,4,2,3,4,1,2,3,4,1,2,3,4,4,1,1,2,3,4,1,2,3,4,1,1,2,3,4,1,2,3,4,1,2,3,4,1,1,1,2,3,4,1,4,2,2,1,2,2,4,3,4,3,4,3,4,2,1,3,1,2,3,4,1,2,3,4,1,2,3,4,1,5],"f":[null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["stealer",3]],[[["",0]],["steal",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["steal",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["steal",4]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0],["steal",4]],["bool",0]],[[],["injector",3]],[[],["worker",3]],[[],["worker",3]],[[],["steal",4]],[[["",0]],["option",4]],[[["",0]]],[[["",0]]],[[["",0]],["steal",4]],[[["",0]],["steal",4]],[[["",0],["worker",3]],["steal",4]],[[["",0],["worker",3]],["steal",4]],[[["",0],["worker",3]],["steal",4]],[[["",0],["worker",3]],["steal",4]],[[["",0]],["stealer",3]],[[],["option",4]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null],"p":[[4,"Steal"],[3,"Worker"],[3,"Stealer"],[3,"Injector"],[13,"Success"]]},\
"crossbeam_epoch":{"doc":"Epoch-based memory reclamation.","t":[18,3,3,6,8,3,3,16,3,3,8,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,5,11,11,11,10,11,11,10,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,5,11,11,11,11,11,11,12,11,11,11,5,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11],"n":["ALIGN","Atomic","Collector","CompareAndSetError","CompareAndSetOrdering","CompareExchangeError","Guard","Init","LocalHandle","Owned","Pointable","Pointer","Shared","as_mut","as_raw","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","collector","collector","compare_and_set","compare_and_set_weak","compare_exchange","compare_exchange_weak","current","default","default","default","default_collector","defer","defer_destroy","defer_unchecked","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","eq","failure","fetch_and","fetch_or","fetch_update","fetch_xor","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_raw","from_usize","from_usize","from_usize","init","init","init","into","into","into","into","into","into","into","into_box","into_owned","into_owned","into_shared","into_usize","into_usize","into_usize","is_null","is_pinned","is_pinned","load","load_consume","new","new","new","new","null","null","partial_cmp","pin","pin","register","repin","repin_after","store","success","swap","tag","tag","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into_owned","try_into_owned","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unprotected","with_tag","with_tag"],"q":["crossbeam_epochd":["The alignment of pointer.","An atomic pointer that can be safely shared between …","An epoch-based garbage collector.","The error returned on failed compare-and-set operation.","Memory orderings for compare-and-set operations.","The error returned on failed compare-and-swap operation.","A guard that keeps the current thread pinned.","The type for initializers.","A handle to a garbage collector.","An owned heap-allocated object.","Types that are pointed to by a single word.","A trait for either <code>Owned</code> or <code>Shared</code> pointers.","A pointer to an object protected by the epoch GC.","","Converts the pointer to a raw pointer (without the tag).","","Converts the pointer to a reference.","","","","","","","","","","","","","","","","","Returns a copy of the atomic value.","","","Creates another reference to the same garbage collector.","","","","","","Returns the <code>Collector</code> associated with this handle.","Returns the <code>Collector</code> associated with this guard.","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","The value in the atomic pointer at the time of the failed …","","","","Returns the default global collector.","Stores a function so that it can be executed at some point …","Stores a destructor for an object so that it can be …","Stores a function so that it can be executed at some point …","Dereferences the given pointer.","","Dereferences the pointer.","Mutably dereferences the given pointer.","","Dereferences the pointer.","Drops the object pointed to by the given pointer.","","","","","Checks if both handles point to the same collector.","The ordering of the operation when it fails.","Bitwise “and” with the current tag.","Bitwise “or” with the current tag.","Fetches the pointer, and then applies a function to it …","Bitwise “xor” with the current tag.","Clears up the thread-local cache of deferred functions by …","","","","","","","","","","Returns the argument unchanged.","Returns a new atomic pointer pointing to <code>owned</code>.","","Returns a new atomic pointer pointing to <code>raw</code>.","Returns the argument unchanged.","Returns a new atomic pointer pointing to <code>ptr</code>.","","","Returns a new owned pointer pointing to <code>b</code>.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns a new pointer pointing to <code>raw</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a new owned pointer pointing to <code>raw</code>.","Returns a new pointer pointing to the tagged pointer <code>data</code>.","Returns a new pointer pointing to the tagged pointer <code>data</code>.","","Initializes a with the given initializer.","Allocates <code>value</code> on the heap and returns a new atomic …","Allocates <code>value</code> on the heap and returns a new owned …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts the owned pointer into a <code>Box</code>.","Takes ownership of the pointee.","Takes ownership of the pointee.","Converts the owned pointer into a <code>Shared</code>.","Returns the machine representation of the pointer.","","","Returns <code>true</code> if the pointer is null.","Returns <code>true</code> if the current thread is pinned.","Returns <code>true</code> if the handle is pinned.","Loads a <code>Shared</code> from the atomic pointer.","Loads a <code>Shared</code> from the atomic pointer using a “consume…","Allocates <code>value</code> on the heap and returns a new atomic …","Allocates <code>value</code> on the heap and returns a new owned …","Creates a new collector.","The new value, which the operation failed to store.","Returns a new null atomic pointer.","Returns a new null pointer.","","Pins the current thread.","Pins the handle.","Registers a new handle for the collector.","Unpins and then immediately re-pins the thread.","Temporarily unpins the thread, executes the given function …","Stores a <code>Shared</code> or <code>Owned</code> pointer into the atomic pointer.","The ordering of the operation when it succeeds.","Stores a <code>Shared</code> or <code>Owned</code> pointer into the atomic pointer, …","Returns the tag stored within the pointer.","Returns the tag stored within the pointer.","","","","","","","","","","","","","","","","","","","Takes ownership of the pointee if it is non-null.","Takes ownership of the pointee if it is not null.","","","","","","","","Returns a reference to a dummy guard that allows …","Returns the same pointer, but tagged with <code>tag</code>. <code>tag</code> is …","Returns the same pointer, but tagged with <code>tag</code>. <code>tag</code> is …"],"i":[1,0,0,0,0,0,0,1,0,0,0,0,0,2,3,2,3,4,5,2,2,3,6,7,8,4,5,2,2,3,6,7,8,5,2,3,6,5,2,3,6,3,7,8,5,5,5,5,4,5,3,6,0,8,8,8,1,2,3,1,2,3,1,2,7,8,3,6,9,5,5,5,5,8,4,5,5,2,3,3,6,7,8,4,5,5,5,5,5,5,5,2,2,2,2,3,3,6,7,8,2,10,2,3,1,5,2,4,5,2,3,6,7,8,2,5,3,2,10,2,3,3,0,7,5,5,5,2,6,4,5,3,3,0,7,6,8,8,5,9,5,2,3,5,2,3,6,4,5,2,3,6,7,8,4,5,2,3,6,7,8,5,3,4,5,2,3,6,7,8,0,2,3],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]]],[[["",0]],["",0]],[[["",0]],["option",4]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]],["ordering",4]],[[["",0]],["collector",3]],[[["",0]],["option",4,[["collector",3]]]],[[["",0],["shared",3],["guard",3]],["result",4,[["shared",3],["compareandseterror",6]]]],[[["",0],["shared",3],["guard",3]],["result",4,[["shared",3],["compareandseterror",6]]]],[[["",0],["shared",3],["ordering",4],["ordering",4],["guard",3]],["result",4,[["shared",3],["compareexchangeerror",3]]]],[[["",0],["shared",3],["ordering",4],["ordering",4],["guard",3]],["result",4,[["shared",3],["compareexchangeerror",3]]]],null,[[]],[[]],[[]],[[],["collector",3]],[[["",0]]],[[["",0],["shared",3]]],[[["",0]]],[[["usize",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["",0]],["bool",0]],[[["",0],["collector",3]],["bool",0]],[[["",0]],["ordering",4]],[[["",0],["usize",0],["ordering",4],["guard",3]],["shared",3]],[[["",0],["usize",0],["ordering",4],["guard",3]],["shared",3]],[[["",0],["ordering",4],["ordering",4],["guard",3]],["result",4,[["shared",3],["shared",3]]]],[[["",0],["usize",0],["ordering",4],["guard",3]],["shared",3]],[[["",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["owned",3]]],[[["never",0]]],[[]],[[]],[[["shared",3]]],[[]],[[["box",3]]],[[["box",3]]],[[]],[[]],[[["never",0]]],[[]],[[]],[[]],[[]],[[]],[[],["owned",3]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[],["usize",0]],[[],["atomic",3]],[[],["owned",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["box",3]],[[],["owned",3]],[[],["owned",3]],[[["guard",3]],["shared",3]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[["",0]],["bool",0]],[[],["bool",0]],[[["",0]],["bool",0]],[[["",0],["ordering",4],["guard",3]],["shared",3]],[[["",0],["guard",3]],["shared",3]],[[],["atomic",3]],[[],["owned",3]],[[]],null,[[],["atomic",3]],[[],["shared",3]],[[["",0],["",0]],["option",4,[["ordering",4]]]],[[],["guard",3]],[[["",0]],["guard",3]],[[["",0]],["localhandle",3]],[[["",0]]],[[["",0]]],[[["",0],["pointer",8],["ordering",4]]],[[["",0]],["ordering",4]],[[["",0],["pointer",8],["ordering",4],["guard",3]],["shared",3]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["option",4,[["owned",3]]]],[[],["option",4,[["owned",3]]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["guard",3]],[[["usize",0]],["owned",3]],[[["",0],["usize",0]],["shared",3]]],"p":[[8,"Pointable"],[3,"Owned"],[3,"Shared"],[3,"CompareExchangeError"],[3,"Atomic"],[3,"Collector"],[3,"LocalHandle"],[3,"Guard"],[8,"CompareAndSetOrdering"],[8,"Pointer"]]},\
"crossbeam_utils":{"doc":"Miscellaneous tools for concurrent programming.","t":[3,3,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,3,8,16,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Backoff","CachePadded","atomic","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","default","deref","deref_mut","eq","fmt","fmt","from","from","from","from","hash","into","into","into_inner","is_completed","ne","new","new","reset","snooze","spin","sync","thread","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","AtomicCell","AtomicConsume","Val","as_ptr","borrow","borrow_mut","compare_and_swap","compare_exchange","default","drop","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_update","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fmt","from","from","from","into","into_inner","is_lock_free","load","load_consume","new","store","swap","take","try_from","try_into","type_id","Parker","ShardedLock","ShardedLockReadGuard","ShardedLockWriteGuard","Unparker","WaitGroup","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","default","deref","deref","deref_mut","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_raw","from_raw","get_mut","into","into","into","into","into","into","into_inner","into_raw","into_raw","is_poisoned","new","new","new","park","park_deadline","park_timeout","read","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_read","try_write","type_id","type_id","type_id","type_id","type_id","type_id","unpark","unparker","wait","write","Scope","ScopedJoinHandle","ScopedThreadBuilder","as_pthread_t","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","builder","fmt","fmt","fmt","from","from","from","into","into","into","into_pthread_t","join","name","scope","spawn","spawn","stack_size","thread","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["crossbeam_utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","crossbeam_utils::atomic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","crossbeam_utils::sync","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","crossbeam_utils::thread","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Performs exponential backoff in spin loops.","Pads and aligns a value to the length of a cache line.","Atomic types.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the inner value.","Returns <code>true</code> if exponential backoff has completed and …","","Creates a new <code>Backoff</code>.","Pads and aligns a value to the length of a cache line.","Resets the <code>Backoff</code>.","Backs off in a blocking loop.","Backs off in a lock-free loop.","Thread synchronization primitives.","Threads that can borrow variables from the stack.","","","","","","","","A thread-safe mutable memory location.","Trait which allows reading from primitive atomic types …","Type returned by <code>load_consume</code>.","Returns a raw pointer to the underlying data in this …","","","If the current value equals <code>current</code>, stores <code>new</code> into the …","If the current value equals <code>current</code>, stores <code>new</code> into the …","","","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies logical “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies logical “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies logical “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Fetches the value, and applies a function to it that …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies logical “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Consumes the atomic and returns the contained value.","Returns <code>true</code> if operations on values of this type are …","Loads a value from the atomic cell.","Loads a value from the atomic using a “consume” memory …","Creates a new atomic cell initialized with <code>val</code>.","Stores <code>val</code> into the atomic cell.","Stores <code>val</code> into the atomic cell and returns the previous …","Takes the value of the atomic cell, leaving …","","","","A thread parking primitive.","A sharded reader-writer lock.","A guard used to release the shared read access of a …","A guard used to release the exclusive write access of a …","Unparks a thread parked by the associated <code>Parker</code>.","Enables threads to synchronize the beginning or end of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a raw pointer into a <code>Parker</code>.","Converts a raw pointer into an <code>Unparker</code>.","Returns a mutable reference to the underlying data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this lock, returning the underlying data.","Converts a <code>Parker</code> into a raw pointer.","Converts an <code>Unparker</code> into a raw pointer.","Returns <code>true</code> if the lock is poisoned.","Creates a new <code>Parker</code>.","Creates a new sharded reader-writer lock.","Creates a new wait group and returns the single reference …","Blocks the current thread until the token is made …","Blocks the current thread until the token is made …","Blocks the current thread until the token is made …","Locks with shared read access, blocking the current thread …","","","","","","","","","","","","","","","","","Attempts to acquire this lock with shared read access.","Attempts to acquire this lock with exclusive write access.","","","","","","","Atomically makes the token available if it is not already.","Returns a reference to an associated <code>Unparker</code>.","Drops this reference and waits until all other references …","Locks with exclusive write access, blocking the current …","A scope for spawning threads.","A handle that can be used to join its scoped thread.","Configures the properties of a new thread.","","","","","","","","Creates a builder that can configure a thread before …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Waits for the thread to finish and returns its result.","Sets the name for the new thread.","Creates a new scope for spawning threads.","Spawns a scoped thread.","Spawns a scoped thread with this configuration.","Sets the size of the stack for the new thread.","Returns a handle to the underlying thread.","","","","","","","","",""],"i":[0,0,0,1,2,1,2,2,2,1,2,2,2,2,1,2,1,2,2,2,2,1,2,2,1,2,1,2,1,1,1,0,0,2,1,2,1,2,1,2,0,0,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,0,0,0,0,0,0,5,6,7,8,9,10,5,6,7,8,9,10,6,10,6,10,5,7,10,8,9,9,9,10,5,6,7,8,8,9,9,10,5,6,7,7,7,8,9,10,5,6,7,5,6,7,8,9,10,7,5,6,7,5,7,10,5,5,5,7,6,10,8,9,5,6,7,8,9,10,5,6,7,8,9,10,7,7,5,6,7,8,9,10,6,5,10,7,0,0,0,11,12,11,13,12,11,13,12,12,11,13,12,11,13,12,11,13,11,11,13,0,12,13,13,11,12,11,13,12,11,13,12,11,13],"f":[null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["cachepadded",3]],[[["",0],["",0]]],[[],["backoff",3]],[[],["cachepadded",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["cachepadded",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["never",0]]],[[["",0],["",0]]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0],["cachepadded",3]],["bool",0]],[[]],[[],["cachepadded",3]],[[["",0]]],[[["",0]]],[[["",0]]],null,null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]],["result",4]],[[],["atomiccell",3]],[[["",0]]],[[["",0],["i16",0]],["i16",0]],[[["",0],["usize",0]],["usize",0]],[[["",0],["i32",0]],["i32",0]],[[["",0],["u32",0]],["u32",0]],[[["",0],["u128",0]],["u128",0]],[[["",0],["i64",0]],["i64",0]],[[["",0],["u64",0]],["u64",0]],[[["",0],["u16",0]],["u16",0]],[[["",0],["i8",0]],["i8",0]],[[["",0],["isize",0]],["isize",0]],[[["",0],["u8",0]],["u8",0]],[[["",0],["i128",0]],["i128",0]],[[["",0],["u16",0]],["u16",0]],[[["",0],["i128",0]],["i128",0]],[[["",0],["u128",0]],["u128",0]],[[["",0],["i32",0]],["i32",0]],[[["",0],["isize",0]],["isize",0]],[[["",0],["bool",0]],["bool",0]],[[["",0],["u32",0]],["u32",0]],[[["",0],["u64",0]],["u64",0]],[[["",0],["usize",0]],["usize",0]],[[["",0],["i8",0]],["i8",0]],[[["",0],["i16",0]],["i16",0]],[[["",0],["u8",0]],["u8",0]],[[["",0],["i64",0]],["i64",0]],[[["",0],["i128",0]],["i128",0]],[[["",0],["i16",0]],["i16",0]],[[["",0],["u64",0]],["u64",0]],[[["",0],["u32",0]],["u32",0]],[[["",0],["i64",0]],["i64",0]],[[["",0],["u8",0]],["u8",0]],[[["",0],["i32",0]],["i32",0]],[[["",0],["isize",0]],["isize",0]],[[["",0],["u16",0]],["u16",0]],[[["",0],["usize",0]],["usize",0]],[[["",0],["i8",0]],["i8",0]],[[["",0],["u128",0]],["u128",0]],[[["",0],["i8",0]],["i8",0]],[[["",0],["u32",0]],["u32",0]],[[["",0],["i32",0]],["i32",0]],[[["",0],["u8",0]],["u8",0]],[[["",0],["usize",0]],["usize",0]],[[["",0],["u128",0]],["u128",0]],[[["",0],["isize",0]],["isize",0]],[[["",0],["i128",0]],["i128",0]],[[["",0],["u16",0]],["u16",0]],[[["",0],["i64",0]],["i64",0]],[[["",0],["u64",0]],["u64",0]],[[["",0],["i16",0]],["i16",0]],[[["",0],["u32",0]],["u32",0]],[[["",0],["isize",0]],["isize",0]],[[["",0],["i64",0]],["i64",0]],[[["",0],["i16",0]],["i16",0]],[[["",0],["u16",0]],["u16",0]],[[["",0],["i8",0]],["i8",0]],[[["",0],["i128",0]],["i128",0]],[[["",0],["u64",0]],["u64",0]],[[["",0],["bool",0]],["bool",0]],[[["",0],["u8",0]],["u8",0]],[[["",0],["u128",0]],["u128",0]],[[["",0],["usize",0]],["usize",0]],[[["",0],["i32",0]],["i32",0]],[[["",0],["i64",0]],["i64",0]],[[["",0],["u128",0]],["u128",0]],[[["",0],["bool",0]],["bool",0]],[[["",0],["usize",0]],["usize",0]],[[["",0],["i32",0]],["i32",0]],[[["",0],["i128",0]],["i128",0]],[[["",0],["u64",0]],["u64",0]],[[["",0],["u16",0]],["u16",0]],[[["",0],["i16",0]],["i16",0]],[[["",0],["u8",0]],["u8",0]],[[["",0],["u32",0]],["u32",0]],[[["",0],["i8",0]],["i8",0]],[[["",0],["isize",0]],["isize",0]],[[["",0],["i32",0]],["i32",0]],[[["",0],["u32",0]],["u32",0]],[[["",0],["i8",0]],["i8",0]],[[["",0],["u128",0]],["u128",0]],[[["",0],["u8",0]],["u8",0]],[[["",0],["isize",0]],["isize",0]],[[["",0],["i64",0]],["i64",0]],[[["",0],["i128",0]],["i128",0]],[[["",0],["i16",0]],["i16",0]],[[["",0],["usize",0]],["usize",0]],[[["",0],["u64",0]],["u64",0]],[[["",0],["u16",0]],["u16",0]],[[["",0]],["result",4]],[[["",0],["i64",0]],["i64",0]],[[["",0],["u8",0]],["u8",0]],[[["",0],["i32",0]],["i32",0]],[[["",0],["u32",0]],["u32",0]],[[["",0],["u16",0]],["u16",0]],[[["",0],["usize",0]],["usize",0]],[[["",0],["i8",0]],["i8",0]],[[["",0],["bool",0]],["bool",0]],[[["",0],["isize",0]],["isize",0]],[[["",0],["i128",0]],["i128",0]],[[["",0],["u128",0]],["u128",0]],[[["",0],["i16",0]],["i16",0]],[[["",0],["u64",0]],["u64",0]],[[["",0],["formatter",3]],["result",6]],[[],["atomiccell",3]],[[]],[[["never",0]]],[[]],[[]],[[],["bool",0]],[[["",0]]],[[["",0]]],[[],["atomiccell",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["unparker",3]],[[["",0]],["waitgroup",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[],["shardedlock",3]],[[]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["never",0]]],[[]],[[]],[[]],[[]],[[]],[[],["parker",3]],[[],["unparker",3]],[[["",0]],["lockresult",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["lockresult",6]],[[["parker",3]]],[[["unparker",3]]],[[["",0]],["bool",0]],[[],["parker",3]],[[],["shardedlock",3]],[[]],[[["",0]]],[[["",0],["instant",3]]],[[["",0],["duration",3]]],[[["",0]],["lockresult",6,[["shardedlockreadguard",3]]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["trylockresult",6,[["shardedlockreadguard",3]]]],[[["",0]],["trylockresult",6,[["shardedlockwriteguard",3]]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]]],[[["",0]],["unparker",3]],[[]],[[["",0]],["lockresult",6,[["shardedlockwriteguard",3]]]],null,null,null,[[["",0]],["rawpthread",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["scopedthreadbuilder",3]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rawpthread",6]],[[],["result",6]],[[["string",3]],["scopedthreadbuilder",3]],[[],["result",6]],[[["",0]],["scopedjoinhandle",3]],[[],["result",6,[["scopedjoinhandle",3]]]],[[["usize",0]],["scopedthreadbuilder",3]],[[["",0]],["thread",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[3,"Backoff"],[3,"CachePadded"],[8,"AtomicConsume"],[3,"AtomicCell"],[3,"Parker"],[3,"Unparker"],[3,"ShardedLock"],[3,"ShardedLockReadGuard"],[3,"ShardedLockWriteGuard"],[3,"WaitGroup"],[3,"ScopedJoinHandle"],[3,"Scope"],[3,"ScopedThreadBuilder"]]},\
"csv":{"doc":"The <code>csv</code> crate provides a fast and flexible CSV reader and …","t":[13,13,13,3,3,3,3,13,13,3,4,3,3,3,4,13,3,13,3,13,13,13,13,13,13,13,13,13,13,3,4,3,3,6,13,13,3,3,3,3,4,4,13,13,13,13,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],"n":["All","Always","Any","ByteRecord","ByteRecordIter","ByteRecordsIntoIter","ByteRecordsIter","CRLF","Deserialize","DeserializeError","DeserializeErrorKind","DeserializeRecordsIntoIter","DeserializeRecordsIter","Error","ErrorKind","Fields","FromUtf8Error","Headers","IntoInnerError","InvalidUtf8","Io","Message","Necessary","Never","NonNumeric","None","ParseBool","ParseFloat","ParseInt","Position","QuoteStyle","Reader","ReaderBuilder","Result","Seek","Serialize","StringRecord","StringRecordIter","StringRecordsIntoIter","StringRecordsIter","Terminator","Trim","UnequalLengths","UnexpectedEndOfRow","Unsupported","Utf8","Utf8Error","Writer","WriterBuilder","as_byte_record","as_slice","as_slice","ascii","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer_capacity","buffer_capacity","byte","byte_headers","byte_records","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comment","cookbook","count","count","custom","custom","default","default","default","default","default","default","default","delimiter","delimiter","description","deserialize","deserialize","deserialize","double_quote","double_quote","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","error","escape","escape","extend","extend","field","field","flexible","flexible","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_byte_record","from_byte_record_lossy","from_iter","from_iter","from_path","from_path","from_path","from_path","from_reader","from_reader","from_writer","from_writer","get","get","get_mut","get_ref","has_headers","has_headers","has_headers","headers","index","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_byte_record","into_byte_record","into_byte_records","into_deserialize","into_inner","into_inner","into_inner","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_kind","into_reader","into_reader","into_reader","into_records","invalid_option","is_done","is_empty","is_empty","is_io_error","iter","iter","kind","kind","len","len","line","ne","ne","ne","ne","ne","new","new","new","new","new","next","next","next","next","next","next","next","next","next_back","next_back","position","position","position","position","position","push_field","push_field","quote","quote","quote_style","quoting","range","range","read_byte_record","read_record","reader","reader","reader","reader","reader","reader","reader_mut","reader_mut","reader_mut","reader_mut","reader_mut","reader_mut","record","records","seek","seek_raw","serialize","set_byte","set_byte_headers","set_headers","set_line","set_position","set_position","set_record","size_hint","size_hint","source","source","source","terminator","terminator","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","trim","trim","trim","truncate","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tutorial","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","utf8_error","valid_up_to","with_capacity","with_capacity","write_byte_record","write_field","write_record","0","0","0","0","0","0","0","0","err","err","expected_len","len","pos","pos","pos","0"],"q":["csvcsv::DeserializeErrorKind","","","","","","csv::ErrorKind","","","","","","","","","csv::Terminator"],"d":["Trim whitespace from fields and headers.","This puts quotes around every field. Always.","Parses the byte given as a record terminator.","A single CSV record stored as raw bytes.","A double-ended iterator over the fields in a byte record.","An owned iterator over records as raw bytes.","A borrowed iterator over records as raw bytes.","Parses <code>\\\\r</code>, <code>\\\\n</code> or <code>\\\\r\\\\n</code> as a single record terminator.","An error of this kind occurs only when performing automatic","An Serde deserialization error.","The type of a Serde deserialization error.","An owned iterator over deserialized records.","A borrowed iterator over deserialized records.","An error that can occur when processing CSV data.","The specific type of an error.","Trim whitespace from fields, but not headers.","A UTF-8 validation error during record conversion.","Trim whitespace from headers.","<code>IntoInnerError</code> occurs when consuming a <code>Writer</code> fails.","This error occurs when UTF-8 validation on a field fails. …","An I/O error that occurred while reading CSV data.","A generic Serde deserialization error.","This puts quotes around fields only when necessary.","This <em>never</em> writes quotes, even if it would produce invalid …","This puts quotes around all fields that are non-numeric. …","Preserves fields and headers. This is the default.","This error occurs when a boolean value fails to parse.","This error occurs when a float value fails to parse.","This error occurs when an integer value fails to parse.","A position in CSV data.","The quoting style to use when writing CSV data.","A already configured CSV reader.","Builds a CSV reader with various configuration knobs.","A type alias for <code>Result&lt;T, csv::Error&gt;</code>.","This error occurs when either the <code>byte_headers</code> or <code>headers</code> …","An error of this kind occurs only when using the Serde …","A single CSV record stored as valid UTF-8 bytes.","An iterator over the fields in a string record.","An owned iterator over records as strings.","A borrowed iterator over records as strings.","A record terminator.","The whitespace preservation behaviour when reading CSV …","This error occurs when two records with an unequal number …","This error occurs when a Rust type expects to decode …","A generic Serde unsupported error.","A UTF-8 decoding error that occured while reading CSV data …","A UTF-8 validation error.","A already configured CSV writer.","Builds a CSV writer with various configuration knobs.","Return a reference to this record’s raw <code>ByteRecord</code>.","Return the entire row as a single byte slice. The slice …","Return the entire row as a single string slice. The slice …","A convenience method for specifying a configuration to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set the capacity (in bytes) of the buffer used in the CSV …","Set the capacity (in bytes) of the internal buffer used in …","The byte offset, starting at <code>0</code>, of this position.","Returns a reference to the first row read by this parser …","Returns a borrowed iterator over all records as raw bytes.","Clear this record so that it has zero fields.","Clear this record so that it has zero fields.","","","","","","","","","","","","","","","","","","","","","","","","","The comment character to use when parsing CSV.","A cookbook of examples for CSV reading and writing.","","","","","","","","","","","","The field delimiter to use when parsing CSV.","The field delimiter to use when writing CSV.","","Deserialize this record.","Returns a borrowed iterator over deserialized records.","Deserialize this record.","Enable double quote escapes.","Enable double quote escapes.","","","","","","","","","","","","","","Returns the error which caused the call to <code>into_inner</code> to …","The escape character to use when parsing CSV.","The escape character to use when writing CSV.","","","Return the field index (starting at 0) of this error, if …","The field index of a byte record in which UTF-8 validation …","Whether the number of fields in records is allowed to …","Whether the number of fields in records is allowed to …","Flush the contents of the internal buffer to the …","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a new <code>StringRecord</code> from a <code>ByteRecord</code>.","Lossily create a new <code>StringRecord</code> from a <code>ByteRecord</code>.","","","Build a CSV parser from this configuration that reads data …","Create a new CSV parser with a default configuration for …","Build a CSV writer from this configuration that writes …","Build a CSV writer with a default configuration that …","Build a CSV parser from this configuration that reads data …","Create a new CSV parser with a default configuration for …","Build a CSV writer from this configuration that writes …","Build a CSV writer with a default configuration that …","Return the field at index <code>i</code>.","Return the field at index <code>i</code>.","Returns a mutable reference to the underlying reader.","Returns a reference to the underlying reader.","Whether to treat the first row as a special header row.","Returns true if and only if this reader has been …","Whether to write a header row before writing any other row.","Returns a reference to the first row read by this parser.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Access the underlying <code>ByteRecord</code> that failed UTF-8 …","Convert this <code>StringRecord</code> into a <code>ByteRecord</code>.","Returns an owned iterator over all records as raw bytes.","Returns an owned iterator over deserialized records.","Returns the underlying writer which generated the error.","Unwraps this CSV reader, returning the underlying reader.","Flush the contents of the internal buffer and return the …","","","","","","","","","Unwrap this error into its underlying type.","Drop this iterator and return the underlying CSV reader.","Drop this iterator and return the underlying CSV reader.","Drop this iterator and return the underlying CSV reader.","Returns an owned iterator over all records as strings.","A custom Serde deserializer for possibly invalid <code>Option&lt;T&gt;</code> …","Returns true if and only if this reader has been exhausted.","Returns true if and only if this record is empty.","Returns true if and only if this record is empty.","Returns true if this is an I/O error.","Returns an iterator over all fields in this record.","Returns an iterator over all fields in this record.","Return the underlying error kind.","Return the specific type of this error.","Returns the number of fields in this record.","Returns the number of fields in this record.","The line number, starting at <code>1</code>, of this position.","","","","","","Create a new empty <code>ByteRecord</code>.","Returns a new position initialized to the start value.","Create a new builder for configuring CSV parsing.","Create a new empty <code>StringRecord</code>.","Create a new builder for configuring CSV writing.","","","","","","","","","","","Return the position of this record, if available.","Return the position for this error, if one exists.","Return the position for this error, if one exists.","Return the current position of this CSV reader.","Return the position of this record, if available.","Add a new field to this record.","Add a new field to this record.","The quote character to use when parsing CSV.","The quote character to use when writing CSV.","The quoting style to use when writing CSV.","Enable or disable quoting.","Return the start and end position of a field in this …","Return the start and end position of a field in this …","Read a single row into the given byte record. Returns …","Read a single row into the given record. Returns false …","Return a reference to the underlying CSV reader.","Return a reference to the underlying CSV reader.","Return a reference to the underlying CSV reader.","Return a reference to the underlying CSV reader.","Return a reference to the underlying CSV reader.","Return a reference to the underlying CSV reader.","Return a mutable reference to the underlying CSV reader.","Return a mutable reference to the underlying CSV reader.","Return a mutable reference to the underlying CSV reader.","Return a mutable reference to the underlying CSV reader.","Return a mutable reference to the underlying CSV reader.","Return a mutable reference to the underlying CSV reader.","The record index, starting with the first record at <code>0</code>.","Returns a borrowed iterator over all records as strings.","Seeks the underlying reader to the position given.","This is like <code>seek</code>, but provides direct control over how …","Serialize a single record using Serde.","Set the byte offset of this position.","Set the headers of this CSV parser manually as raw bytes.","Set the headers of this CSV parser manually.","Set the line number of this position.","Set the position of this record.","Set the position of this record.","Set the record index of this position.","","","","","","The record terminator to use when parsing CSV.","The record terminator to use when writing CSV.","","","","","","","","","","","","","","","","","","","Trim the fields of this record so that leading and …","Whether fields are trimmed of leading and trailing …","Trim the fields of this record so that leading and …","Truncate this record to <code>n</code> fields.","Truncate this record to <code>n</code> fields.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A tutorial for handling CSV data in Rust.","","","","","","","","","","","","","","","","","","","","","","","","","","Access the underlying UTF-8 validation error.","The index into the given field up to which valid UTF-8 was …","Create a new empty <code>ByteRecord</code> with the given capacity …","Create a new empty <code>StringRecord</code> with the given capacity.","Write a single <code>ByteRecord</code>.","Write a single field.","Write a single record.","","","","","","","","","The corresponding UTF-8 error.","The deserialization error.","The expected number of fields in a record. This is the …","The number of fields in the bad record.","The position of the record in which this error occurred, if","The position of the first record with an unequal number of …","The position of this error, if available.",""],"i":[1,2,3,0,0,0,0,3,4,0,0,0,0,0,0,1,0,1,0,5,4,5,2,2,2,1,5,5,5,0,0,0,0,0,4,4,0,0,0,0,0,0,4,5,5,4,0,0,0,6,7,6,8,9,10,11,12,13,14,15,7,16,17,18,5,19,4,20,21,8,22,6,23,24,25,2,3,1,9,10,11,12,13,14,15,7,16,17,18,5,19,4,20,21,8,22,6,23,24,25,2,3,1,8,24,16,22,22,7,6,7,16,17,18,5,20,21,6,23,2,3,1,7,16,17,18,5,20,21,6,23,2,3,1,8,0,17,23,18,19,7,8,6,24,2,3,1,8,24,18,7,22,6,8,24,25,7,7,7,16,18,5,20,21,6,6,6,1,9,8,24,7,6,18,21,8,24,25,9,9,7,16,18,18,5,5,19,19,4,20,20,21,21,8,22,6,24,25,2,3,1,9,10,11,12,13,14,15,7,7,7,7,16,17,18,5,19,19,4,20,21,8,22,6,6,6,23,24,25,2,3,1,6,6,7,6,8,22,24,25,8,22,24,25,7,6,22,22,8,22,24,22,7,6,9,10,11,12,13,14,15,7,16,17,18,5,19,4,20,21,8,22,6,23,24,25,2,3,1,20,6,22,22,9,22,25,10,11,12,13,14,15,17,23,19,10,12,14,22,0,22,7,6,19,7,6,18,19,7,6,16,16,18,5,20,21,7,16,8,6,24,10,11,12,13,14,15,17,23,17,23,7,19,4,22,6,7,6,8,24,24,8,7,6,22,22,10,11,12,13,14,15,10,11,12,13,14,15,16,22,22,22,25,16,22,22,16,7,6,16,17,23,9,19,20,8,24,7,16,17,18,5,20,21,6,23,2,3,1,9,18,5,19,20,21,7,8,6,7,6,9,10,11,12,13,14,15,7,16,17,18,5,19,4,20,21,8,22,6,23,24,25,2,3,1,9,10,11,12,13,14,15,7,16,17,18,5,19,4,20,21,8,22,6,23,24,25,2,3,1,0,9,10,11,12,13,14,15,7,16,17,18,5,19,4,20,21,8,22,6,23,24,25,2,3,1,20,21,7,6,25,25,25,26,27,28,29,30,31,32,33,34,35,36,36,34,36,35,37],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["byterecord",3]],[[["",0]]],[[["",0]],["str",0]],[[["",0]],["readerbuilderusize",0]],["readerbuilder",3]],[[["",0],["usize",0]],["writerbuilder",3]],[[["",0]],["u64",0]],[[["",0]],["result",6,[["byterecord",3]]]],[[["",0]],["byterecordsiter",3]],[[["",0]]],[[["",0]]],[[["",0]],["byterecord",3]],[[["",0]],["position",3]],[[["",0]],["byterecorditer",3]],[[["",0]],["deserializeerror",3]],[[["",0]],["deserializeerrorkind",4]],[[["",0]],["fromutf8error",3]],[[["",0]],["utf8error",3]],[[["",0]],["stringrecord",3]],[[["",0]],["stringrecorditer",3]],[[["",0]],["quotestyle",4]],[[["",0]],["terminator",4]],[[["",0]],["trim",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["option",4,[["u8",0]]]],["readerbuilder",3]],null,[[],["usize",0]],[[],["usize",0]],[[["display",8]],["deserializeerror",3]],[[["display",8]],["error",3]],[[],["byterecord",3]],[[],["readerbuilder",3]],[[],["stringrecord",3]],[[],["writerbuilder",3]],[[],["quotestyle",4]],[[],["terminator",4]],[[],["trim",4]],[[["",0],["u8",0]],["readerbuilder",3]],[[["",0],["u8",0]],["writerbuilder",3]],[[["",0]],["str",0]],[[["",0],["option",4,[["byterecord",3]]]],["result",6,[["deserialize",8]]]],[[["",0]],["deserializerecordsiter",3]],[[["",0],["option",4,[["stringrecord",3]]]],["result",6,[["deserialize",8]]]],[[["",0],["bool",0]],["readerbuilder",3]],[[["",0],["bool",0]],["writerbuilder",3]],[[["",0]]],[[["",0]],["bool",0]],[[["",0],["byterecord",3]],["bool",0]],[[["",0],["vec",3]],["bool",0]],[[["",0],["position",3]],["bool",0]],[[["",0],["deserializeerror",3]],["bool",0]],[[["",0],["deserializeerrorkind",4]],["bool",0]],[[["",0],["fromutf8error",3]],["bool",0]],[[["",0],["utf8error",3]],["bool",0]],[[["",0],["vec",3]],["bool",0]],[[["",0],["stringrecord",3]],["bool",0]],[[["",0]],["bool",0]],[[["",0],["trim",4]],["bool",0]],[[["",0]],["error",3]],[[["",0],["option",4,[["u8",0]]]],["readerbuilder",3]],[[["",0],["u8",0]],["writerbuilder",3]],[[["",0],["intoiterator",8]]],[[["",0],["intoiterator",8]]],[[["",0]],["option",4,[["u64",0]]]],[[["",0]],["usize",0]],[[["",0],["bool",0]],["readerbuilder",3]],[[["",0],["bool",0]],["writerbuilder",3]],[[["",0]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec",3]],["byterecord",3]],[[]],[[],["byterecord",3]],[[["stringrecord",3]],["byterecord",3]],[[]],[[]],[[]],[[]],[[]],[[["error",3]],["error",3]],[[]],[[]],[[]],[[]],[[]],[[],["stringrecord",3]],[[]],[[["vec",3]],["stringrecord",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["byterecord",3]],["result",4,[["stringrecord",3],["fromutf8error",3]]]],[[["byterecord",3]],["stringrecord",3]],[[["intoiterator",8]],["byterecord",3]],[[["intoiterator",8]],["stringrecord",3]],[[["",0],["asref",8,[["path",3]]]],["result",6,[["reader",3,[["file",3]]]]]],[[["asref",8,[["path",3]]]],["result",6,[["reader",3,[["file",3]]]]]],[[["",0],["asref",8,[["path",3]]]],["result",6,[["writer",3,[["file",3]]]]]],[[["asref",8,[["path",3]]]],["result",6,[["writer",3,[["file",3]]]]]],[[["",0],["read",8]],["reader",3,[["read",8]]]],[[],["reader",3]],[[["",0],["write",8]],["writer",3,[["write",8]]]],[[],["writer",3]],[[["",0],["usize",0]],["option",4]],[[["",0],["usize",0]],["option",4,[["str",0]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["bool",0]],["readerbuilder",3]],[[["",0]],["bool",0]],[[["",0],["bool",0]],["writerbuilder",3]],[[["",0]],["result",6,[["stringrecord",3]]]],[[["",0],["usize",0]]],[[["",0],["usize",0]],["str",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["byterecord",3]],[[],["byterecord",3]],[[],["byterecordsintoiter",3]],[[],["deserializerecordsintoiter",3]],[[]],[[]],[[],["result",4,[["intoinnererror",3,[["writer",3]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["errorkind",4]],[[],["reader",3]],[[],["reader",3]],[[],["reader",3]],[[],["stringrecordsintoiter",3]],[[],["result",4,[["option",4]]]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["byterecorditer",3]],[[["",0]],["stringrecorditer",3]],[[["",0]],["deserializeerrorkind",4]],[[["",0]],["errorkind",4]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["u64",0]],[[["",0],["position",3]],["bool",0]],[[["",0],["deserializeerror",3]],["bool",0]],[[["",0],["deserializeerrorkind",4]],["bool",0]],[[["",0],["fromutf8error",3]],["bool",0]],[[["",0],["utf8error",3]],["bool",0]],[[],["byterecord",3]],[[],["position",3]],[[],["readerbuilder",3]],[[],["stringrecord",3]],[[],["writerbuilder",3]],[[["",0]],["option",4,[["result",6]]]],[[["",0]],["option",4,[["result",6]]]],[[["",0]],["option",4,[["result",6,[["stringrecord",3]]]]]],[[["",0]],["option",4,[["result",6,[["stringrecord",3]]]]]],[[["",0]],["option",4,[["result",6,[["byterecord",3]]]]]],[[["",0]],["option",4,[["result",6,[["byterecord",3]]]]]],[[["",0]],["option",4]],[[["",0]],["option",4,[["str",0]]]],[[["",0]],["option",4]],[[["",0]],["option",4,[["str",0]]]],[[["",0]],["option",4,[["position",3]]]],[[["",0]],["option",4,[["position",3]]]],[[["",0]],["option",4,[["position",3]]]],[[["",0]],["position",3]],[[["",0]],["option",4,[["position",3]]]],[[["",0]]],[[["",0],["str",0]]],[[["",0],["u8",0]],["readerbuilder",3]],[[["",0],["u8",0]],["writerbuilder",3]],[[["",0],["quotestyle",4]],["writerbuilder",3]],[[["",0],["bool",0]],["readerbuilder",3]],[[["",0],["usize",0]],["option",4,[["range",3,[["usize",0]]]]]],[[["",0],["usize",0]],["option",4,[["range",3,[["usize",0]]]]]],[[["",0],["byterecord",3]],["result",6,[["bool",0]]]],[[["",0],["stringrecord",3]],["result",6,[["bool",0]]]],[[["",0]],["reader",3]],[[["",0]],["reader",3]],[[["",0]],["reader",3]],[[["",0]],["reader",3]],[[["",0]],["reader",3]],[[["",0]],["reader",3]],[[["",0]],["reader",3]],[[["",0]],["reader",3]],[[["",0]],["reader",3]],[[["",0]],["reader",3]],[[["",0]],["reader",3]],[[["",0]],["reader",3]],[[["",0]],["u64",0]],[[["",0]],["stringrecordsiter",3]],[[["",0],["position",3]],["result",6]],[[["",0],["seekfrom",4],["position",3]],["result",6]],[[["",0],["serialize",8]],["result",6]],[[["",0],["u64",0]],["position",3]],[[["",0],["byterecord",3]]],[[["",0],["stringrecord",3]]],[[["",0],["u64",0]],["position",3]],[[["",0],["option",4,[["position",3]]]]],[[["",0],["option",4,[["position",3]]]]],[[["",0],["u64",0]],["position",3]],[[["",0]]],[[["",0]]],[[["",0]],["option",4,[["stderror",8]]]],[[["",0]],["option",4,[["stderror",8]]]],[[["",0]],["option",4,[["stderror",8]]]],[[["",0],["terminator",4]],["readerbuilder",3]],[[["",0],["terminator",4]],["writerbuilder",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]]],[[["",0],["trim",4]],["readerbuilder",3]],[[["",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["utf8error",3]],[[["",0]],["usize",0]],[[["usize",0],["usize",0]],["byterecord",3]],[[["usize",0],["usize",0]],["stringrecord",3]],[[["",0],["byterecord",3]],["result",6]],[[["",0],["asref",8]],["result",6]],[[["",0]],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[[4,"Trim"],[4,"QuoteStyle"],[4,"Terminator"],[4,"ErrorKind"],[4,"DeserializeErrorKind"],[3,"StringRecord"],[3,"ByteRecord"],[3,"ReaderBuilder"],[3,"IntoInnerError"],[3,"DeserializeRecordsIntoIter"],[3,"DeserializeRecordsIter"],[3,"StringRecordsIntoIter"],[3,"StringRecordsIter"],[3,"ByteRecordsIntoIter"],[3,"ByteRecordsIter"],[3,"Position"],[3,"ByteRecordIter"],[3,"DeserializeError"],[3,"Error"],[3,"FromUtf8Error"],[3,"Utf8Error"],[3,"Reader"],[3,"StringRecordIter"],[3,"WriterBuilder"],[3,"Writer"],[13,"Message"],[13,"Unsupported"],[13,"InvalidUtf8"],[13,"ParseBool"],[13,"ParseInt"],[13,"ParseFloat"],[13,"Io"],[13,"Serialize"],[13,"Utf8"],[13,"Deserialize"],[13,"UnequalLengths"],[13,"Any"]]},\
"csv_core":{"doc":"<code>csv-core</code> provides a fast CSV reader and writer for use in …","t":[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,4,4,4,4,3,3,13,13,4,4,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12],"n":["Always","Any","CRLF","End","End","End","End","Field","Field","InputEmpty","InputEmpty","InputEmpty","InputEmpty","InputEmpty","Necessary","Never","NonNumeric","OutputEndsFull","OutputFull","OutputFull","OutputFull","QuoteStyle","ReadFieldNoCopyResult","ReadFieldResult","ReadRecordNoCopyResult","ReadRecordResult","Reader","ReaderBuilder","Record","Record","Terminator","WriteResult","Writer","WriterBuilder","ascii","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comment","default","default","default","default","default","default","delimiter","delimiter","delimiter","double_quote","double_quote","eq","eq","eq","eq","eq","escape","escape","field","finish","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","get_delimiter","get_double_quote","get_escape","get_quote","get_quote_style","get_terminator","into","into","into","into","into","into","into","into","into","into","into","is_non_numeric","is_special_byte","line","ne","ne","new","new","new","new","quote","quote","quote","quote_style","quoting","read_field","read_record","reset","set_line","should_quote","terminator","terminator","terminator","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","record_end","record_end","0"],"q":["csv_core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","csv_core::ReadFieldNoCopyResult","csv_core::ReadFieldResult","csv_core::Terminator"],"d":["This puts quotes around every field. Always.","Parses the byte given as a record terminator.","Parses <code>\\\\r</code>, <code>\\\\n</code> or <code>\\\\r\\\\n</code> as a single record terminator.","All CSV data has been read.","All CSV data has been read.","All CSV data has been read.","All CSV data has been read.","The end of a field was found.","The end of a field was found.","The caller provided input was exhausted before the end of …","The caller provided input was exhausted before the end of …","The caller provided input was exhausted before the end of …","The caller provided input was exhausted before the end of …","This result occurs when all of the bytes from the given …","This puts quotes around fields only when necessary.","This <em>never</em> writes quotes, even if it would produce invalid …","This puts quotes around all fields that are non-numeric. …","The caller provided output buffer of field end poisitions …","The caller provided output buffer was filled before an …","The caller provided output buffer was filled before an …","This result occurs when the output buffer was too small to …","The quoting style to use when writing CSV data.","The result of parsing at most one field from CSV data …","The result of parsing at most one field from CSV data.","The result of parsing at most one record from CSV data …","The result of parsing at most one record from CSV data.","A pull based CSV reader.","Builds a CSV reader with various configuration knobs.","The end of a record was found.","The end of a record was found.","A record terminator.","The result of writing CSV data.","A writer for CSV data.","A builder for configuring a CSV writer.","A convenience method for specifying a configuration to …","","","","","","","","","","","","","","","","","","","","","","","Build a CSV parser from this configuration.","Builder a CSV writer from this configuration.","","","","","","","","","","","","","","","","","","","The comment character to use when parsing CSV.","","","","","","","Write the configured field delimiter to <code>output</code>.","The field delimiter to use when parsing CSV.","The field delimiter to use when writing CSV.","Enable double quote escapes.","The quoting escape mechanism to use when writing CSV.","","","","","","The escape character to use when parsing CSV.","The escape character to use when writing CSV.","Write a single CSV field from <code>input</code> to <code>output</code> while …","Finish writing CSV data to <code>output</code>.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return the delimiter used for this writer.","Return whether this writer doubles quotes or not. When the …","Return the escape character used for this writer.","Return the quote character used for this writer.","Return the quoting style used for this writer.","Return the terminator used for this writer.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if and only if the given input is non-numeric.","Returns true if and only if the given byte corresponds to …","Return the current line number as measured by the number …","","","Creates a new CSV writer with the default configuration.","Create a new CSV reader with a default parser …","Create a new builder.","Create a new builder for configuring a CSV writer.","Escape quotes <code>input</code> and writes the result to <code>output</code>.","The quote character to use when parsing CSV.","The quote character to use when writing CSV.","The quoting style to use when writing CSV.","Enable or disable quoting.","Parse a single CSV field in <code>input</code> and copy field data to …","Parse a single CSV record in <code>input</code> and copy each field …","Reset the parser such that it behaves as if it had never …","Set the line number.","Returns true if and only if we should put the given field …","Write the configured record terminator to <code>output</code>.","The record terminator to use when parsing CSV.","The record terminator to use when writing CSV.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Whether this was the last field in a record or not.","Whether this was the last field in a record or not.",""],"i":[1,2,2,3,4,5,6,3,4,3,4,5,6,7,1,1,1,5,3,5,7,0,0,0,0,0,0,0,5,6,0,0,0,0,8,9,10,8,3,4,5,6,11,7,2,1,9,10,8,3,4,5,6,11,7,2,1,8,11,9,10,3,4,5,6,7,2,1,9,10,3,4,5,6,7,2,1,8,9,10,8,11,2,1,9,8,11,8,11,3,4,5,6,7,8,11,9,9,9,10,8,3,4,5,6,11,7,2,1,9,10,8,3,4,5,6,11,7,2,1,9,9,9,9,9,9,9,10,8,3,4,5,6,11,7,2,1,0,9,10,3,4,9,10,8,11,0,8,11,11,8,10,10,10,10,9,9,8,11,9,10,3,4,5,6,7,2,1,9,10,8,3,4,5,6,11,7,2,1,9,10,8,3,4,5,6,11,7,2,1,9,10,8,3,4,5,6,11,7,2,1,12,13,14],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["readerbuilder",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["reader",3]],[[["",0]],["writer",3]],[[["",0]],["writer",3]],[[["",0]],["reader",3]],[[["",0]],["readfieldresult",4]],[[["",0]],["readfieldnocopyresult",4]],[[["",0]],["readrecordresult",4]],[[["",0]],["readrecordnocopyresult",4]],[[["",0]],["writeresult",4]],[[["",0]],["terminator",4]],[[["",0]],["quotestyle",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["option",4,[["u8",0]]]],["readerbuilder",3]],[[],["writer",3]],[[],["reader",3]],[[],["readerbuilder",3]],[[],["writerbuilder",3]],[[],["terminator",4]],[[],["quotestyle",4]],[[["",0]]],[[["",0],["u8",0]],["readerbuilder",3]],[[["",0],["u8",0]],["writerbuilder",3]],[[["",0],["bool",0]],["readerbuilder",3]],[[["",0],["bool",0]],["writerbuilder",3]],[[["",0],["readfieldresult",4]],["bool",0]],[[["",0],["readfieldnocopyresult",4]],["bool",0]],[[["",0],["readrecordresult",4]],["bool",0]],[[["",0],["readrecordnocopyresult",4]],["bool",0]],[[["",0],["writeresult",4]],["bool",0]],[[["",0],["option",4,[["u8",0]]]],["readerbuilder",3]],[[["",0],["u8",0]],["writerbuilder",3]],[[["",0]]],[[["",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["u8",0]],[[["",0]],["bool",0]],[[["",0]],["u8",0]],[[["",0]],["u8",0]],[[["",0]],["quotestyle",4]],[[["",0]],["terminator",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",0]],[[["",0],["u8",0]],["bool",0]],[[["",0]],["u64",0]],[[["",0],["readfieldresult",4]],["bool",0]],[[["",0],["readfieldnocopyresult",4]],["bool",0]],[[],["writer",3]],[[],["reader",3]],[[],["readerbuilder",3]],[[],["writerbuilder",3]],[[["u8",0],["u8",0],["bool",0]]],[[["",0],["u8",0]],["readerbuilder",3]],[[["",0],["u8",0]],["writerbuilder",3]],[[["",0],["quotestyle",4]],["writerbuilder",3]],[[["",0],["bool",0]],["readerbuilder",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["u64",0]]],[[["",0]],["bool",0]],[[["",0]]],[[["",0],["terminator",4]],["readerbuilder",3]],[[["",0],["terminator",4]],["writerbuilder",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null],"p":[[4,"QuoteStyle"],[4,"Terminator"],[4,"ReadFieldResult"],[4,"ReadFieldNoCopyResult"],[4,"ReadRecordResult"],[4,"ReadRecordNoCopyResult"],[4,"WriteResult"],[3,"ReaderBuilder"],[3,"Writer"],[3,"Reader"],[3,"WriterBuilder"],[13,"Field"],[13,"Field"],[13,"Any"]]},\
"either":{"doc":"The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","t":[4,2,13,2,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,11,11,11,12,12],"n":["Either","Left","Left","Right","Right","all","any","as_mut","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_ref","borrow","borrow_mut","clone","clone_from","cmp","collect","count","deref","deref_mut","either","either_into","either_with","eq","expect_left","expect_right","extend","factor_err","factor_first","factor_none","factor_ok","factor_second","find","find_map","flip","fmt","fmt","fold","for_both","for_each","from","from","hash","into","into","into_inner","into_iter","into_iter","is_left","is_right","last","left","left_and_then","left_or","left_or_default","left_or_else","len","map","map_left","map_right","ne","next","next_back","nth","partial_cmp","partition","position","rfind","rfold","right","right_and_then","right_or","right_or_default","right_or_else","size_hint","try_from","try_into","try_left","try_right","type_id","unwrap_left","unwrap_right","0","0"],"q":["either","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","either::Either",""],"d":["The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","","A value of type <code>L</code>.","","A value of type <code>R</code>.","","","","","Convert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.","","","","Convert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.","","","","","","","","","","","Apply one of two functions depending on contents, unifying …","Convert the contained value into <code>T</code>","Like <code>either</code>, but provide some context to whichever of the …","","Returns the left value","Returns the right value","","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","Factors out <code>None</code> from an <code>Either</code> of <code>Option</code>.","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","","","Convert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.","","","","Evaluate the provided expression for both <code>Either::Left</code> and …","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","Extract the value of an either over two equivalent types.","","Convert the inner value to an iterator.","Return true if the value is the <code>Left</code> variant.","Return true if the value is the <code>Right</code> variant.","","Convert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Return left value or given value","Return left or a default","Returns left value or computes it from a closure","","Map <code>f</code> over the contained value and return the result in the","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","","","","","","","","","","Convert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Return right value or given value","Return right or a default","Returns right value or computes it from a closure","","","","Macro for unwrapping the left side of an <code>Either</code>, which …","Dual to <code>try_left!</code>, see its documentation for more …","","Returns the left value","Returns the right value","",""],"i":[0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,2,3],"f":[null,null,null,null,null,[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]],["either",4]],[[["",0]],["str",0]],[[["",0]]],[[["",0]],["",0]],[[["",0]],["either",4]],[[["",0]],["str",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0],["",0]]],[[["",0],["either",4]],["ordering",4]],[[]],[[],["usize",0]],[[["",0]]],[[["",0]]],[[]],[[]],[[]],[[["",0],["either",4]],["bool",0]],[[["str",0]]],[[["str",0]]],[[["",0]]],[[],["result",4,[["either",4]]]],[[]],[[],["option",4,[["either",4]]]],[[],["result",4,[["either",4]]]],[[]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[],["either",4]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],null,[[]],[[]],[[["result",4]]],[[["",0],["",0]]],[[]],[[],["result",4]],[[]],[[]],[[],["either",4]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[],["option",4]],[[],["option",4]],[[],["either",4]],[[]],[[]],[[]],[[["",0]],["usize",0]],[[],["either",4]],[[],["either",4]],[[],["either",4]],[[["",0],["either",4]],["bool",0]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0],["usize",0]],["option",4]],[[["",0],["either",4]],["option",4,[["ordering",4]]]],[[]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4]],[[]],[[],["option",4]],[[],["either",4]],[[]],[[]],[[]],[[["",0]]],[[],["result",4]],[[],["result",4]],null,null,[[["",0]],["typeid",3]],[[]],[[]],null,null],"p":[[4,"Either"],[13,"Left"],[13,"Right"]]},\
"getrandom":{"doc":"Interface to the operating system’s random number …","t":[18,18,3,18,18,18,18,18,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11],"n":["CUSTOM_START","ERRNO_NOT_POSITIVE","Error","FAILED_RDRAND","INTERNAL_START","IOS_SEC_RANDOM","NODE_CRYPTO","NODE_RANDOM_FILL_SYNC","NO_RDRAND","UNSUPPORTED","VXWORKS_RAND_SECURE","WEB_CRYPTO","WEB_GET_RANDOM_VALUES","WINDOWS_RTL_GEN_RANDOM","borrow","borrow_mut","clone","clone_into","code","eq","fmt","fmt","from","from","getrandom","into","ne","raw_os_error","to_owned","to_string","try_from","try_into","type_id"],"q":["getrandom","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Codes at or above this point can be used by users to …","The platform-specific <code>errno</code> returned a non-positive value.","A small and <code>no_std</code> compatible error type","RDRAND instruction failed due to a hardware issue.","Codes below this point represent OS Errors (i.e. positive …","Call to iOS <code>SecRandomCopyBytes</code> failed.","NodeJS does not have support for the <code>crypto</code> module.","NodeJS does not have support for <code>crypto.randomFillSync</code>.","RDRAND instruction unsupported on this target.","This target/platform is not supported by <code>getrandom</code>.","On VxWorks, call to <code>randSecure</code> failed (random number …","The browser does not have support for <code>self.crypto</code>.","The browser does not have support for …","Call to Windows <code>RtlGenRandom</code> failed.","","","","","Extract the bare error code.","","","","","Returns the argument unchanged.","Fill <code>dest</code> with random bytes from the system’s preferred …","Calls <code>U::from(self)</code>.","","Extract the raw OS error code (if this error came from the …","","","","",""],"i":[1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["error",3]],[[["",0],["",0]]],[[],["nonzerou32",3]],[[["",0],["error",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["nonzerou32",3]]],[[]],[[],["result",4,[["error",3]]]],[[]],[[["",0],["error",3]],["bool",0]],[[],["option",4,[["i32",0]]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[3,"Error"]]},\
"half":{"doc":"A crate that provides support for half-precision 16-bit …","tn":["DIGITS","DIGITS","E","E","EPSILON","EPSILON","FRAC_1_PI","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_2","FRAC_PI_3","FRAC_PI_3","FRAC_PI_4","FRAC_PI_4","FRAC_PI_6","FRAC_PI_6","FRAC_PI_8","FRAC_PI_8","INFINITY","INFINITY","LN_10","LN_10","LN_2","LN_2","LOG10_2","LOG10_2","LOG10_E","LOG10_E","LOG2_10","LOG2_10","LOG2_E","LOG2_E","MANTISSA_DIGITS","MANTISSA_DIGITS","MAX","MAX","MAX_10_EXP","MAX_10_EXP","MAX_EXP","MAX_EXP","MAX_SUBNORMAL","MAX_SUBNORMAL","MIN","MIN","MIN_10_EXP","MIN_10_EXP","MIN_EXP","MIN_EXP","MIN_POSITIVE","MIN_POSITIVE","MIN_POSITIVE_SUBNORMAL","MIN_POSITIVE_SUBNORMAL","NAN","NAN","NEG_INFINITY","NEG_INFINITY","NEG_ONE","NEG_ONE","NEG_ZERO","NEG_ZERO","ONE","ONE","PI","PI","RADIX","RADIX","SQRT_2","SQRT_2","ZERO","ZERO","add","add","add","add","add_assign","add_assign","add_assign","add_assign","bf16","borrow","borrow","borrow_mut","borrow_mut","clamp","clamp","classify","classify","clone","clone","copysign","copysign","default","default","div","div","div","div","div_assign","div_assign","div_assign","div_assign","eq","eq","f16","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_be_bytes","from_be_bytes","from_bits","from_bits","from_f32","from_f32","from_f64","from_f64","from_le_bytes","from_le_bytes","from_ne_bytes","from_ne_bytes","from_str","from_str","ge","ge","gt","gt","into","into","is_finite","is_finite","is_infinite","is_infinite","is_nan","is_nan","is_normal","is_normal","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","le","le","lt","lt","max","max","min","min","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","partial_cmp","partial_cmp","prelude","product","product","product","product","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","signum","signum","slice","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","to_be_bytes","to_be_bytes","to_bits","to_bits","to_f32","to_f32","to_f64","to_f64","to_le_bytes","to_le_bytes","to_ne_bytes","to_ne_bytes","try_from","try_from","try_into","try_into","type_id","type_id","HalfBitsSliceExt","HalfFloatSliceExt","bf16","f16","HalfBitsSliceExt","HalfFloatSliceExt","convert_from_f32_slice","convert_from_f64_slice","convert_to_f32_slice","convert_to_f64_slice","reinterpret_cast","reinterpret_cast","reinterpret_cast_mut","reinterpret_cast_mut"],"q":["halfhalf::prelude","","","","half::slice","","","","","","","","",""],"d":["Approximate number of <code>bf16</code> significant digits in base 10","Approximate number of <code>f16</code> significant digits in base 10","<code>bf16</code> Euler’s number (ℯ)","<code>f16</code> Euler’s number (ℯ)","<code>bf16</code> machine epsilon value","<code>f16</code> machine epsilon value","<code>bf16</code> 1/π","<code>f16</code> 1/π","<code>bf16</code> 1/√2","<code>f16</code> 1/√2","<code>bf16</code> 2/π","<code>f16</code> 2/π","<code>bf16</code> 2/√π","<code>f16</code> 2/√π","<code>bf16</code> π/2","<code>f16</code> π/2","<code>bf16</code> π/3","<code>f16</code> π/3","<code>bf16</code> π/4","<code>f16</code> π/4","<code>bf16</code> π/6","<code>f16</code> π/6","<code>bf16</code> π/8","<code>f16</code> π/8","<code>bf16</code> positive Infinity (+∞)","<code>f16</code> positive Infinity (+∞)","<code>bf16</code> 𝗅𝗇 10","<code>f16</code> 𝗅𝗇 10","<code>bf16</code> 𝗅𝗇 2","<code>f16</code> 𝗅𝗇 2","<code>bf16</code> 𝗅𝗈𝗀₁₀2","<code>f16</code> 𝗅𝗈𝗀₁₀2","<code>bf16</code> 𝗅𝗈𝗀₁₀ℯ","<code>f16</code> 𝗅𝗈𝗀₁₀ℯ","<code>bf16</code> 𝗅𝗈𝗀₂10","<code>f16</code> 𝗅𝗈𝗀₂10","<code>bf16</code> 𝗅𝗈𝗀₂ℯ","<code>f16</code> 𝗅𝗈𝗀₂ℯ","Number of <code>bf16</code> significant digits in base 2","Number of <code>f16</code> significant digits in base 2","Largest finite <code>bf16</code> value","Largest finite <code>f16</code> value","Maximum possible <code>bf16</code> power of 10 exponent","Maximum possible <code>f16</code> power of 10 exponent","Maximum possible <code>bf16</code> power of 2 exponent","Maximum possible <code>f16</code> power of 2 exponent","Maximum subnormal <code>bf16</code> value","Maximum subnormal <code>f16</code> value","Smallest finite <code>bf16</code> value","Smallest finite <code>f16</code> value","Minimum possible normal <code>bf16</code> power of 10 exponent","Minimum possible normal <code>f16</code> power of 10 exponent","One greater than the minimum possible normal <code>bf16</code> power of …","One greater than the minimum possible normal <code>f16</code> power of …","Smallest positive normal <code>bf16</code> value","Smallest positive normal <code>f16</code> value","Minimum positive subnormal <code>bf16</code> value","Minimum positive subnormal <code>f16</code> value","<code>bf16</code> Not a Number (NaN)","<code>f16</code> Not a Number (NaN)","<code>bf16</code> negative infinity (-∞).","<code>f16</code> negative infinity (-∞)","<code>bf16</code> -1","<code>f16</code> -1","<code>bf16</code> -0","<code>f16</code> -0","<code>bf16</code> 1","<code>f16</code> 1","<code>bf16</code> Archimedes’ constant (π)","<code>f16</code> Archimedes’ constant (π)","The radix or base of the internal representation of <code>bf16</code>","The radix or base of the internal representation of <code>f16</code>","<code>bf16</code> √2","<code>f16</code> √2","<code>bf16</code> 0","<code>f16</code> 0","","","","","","","","","A 16-bit floating point type implementing the <code>bfloat16</code> …","","","","","Restrict a value to a certain interval unless it is NaN.","Restrict a value to a certain interval unless it is NaN.","Returns the floating point category of the number.","Returns the floating point category of the number.","","","Returns a number composed of the magnitude of <code>self</code> and the …","Returns a number composed of the magnitude of <code>self</code> and the …","","","","","","","","","","","","","A 16-bit floating point type implementing the IEEE …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Creates a floating point value from its representation as …","Creates a floating point value from its representation as …","Constructs a <code>bf16</code> value from the raw bits.","Constructs a 16-bit floating point value from the raw bits.","Constructs a <code>bf16</code> value from a 32-bit floating point value.","Constructs a 16-bit floating point value from a 32-bit …","Constructs a <code>bf16</code> value from a 64-bit floating point value.","Constructs a 16-bit floating point value from a 64-bit …","Creates a floating point value from its representation as …","Creates a floating point value from its representation as …","Creates a floating point value from its representation as …","Creates a floating point value from its representation as …","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if this number is neither infinite nor NaN.","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if this value is ±∞ and <code>false</code> otherwise.","Returns <code>true</code> if this value is ±∞ and <code>false</code>. otherwise.","Returns <code>true</code> if this value is NaN and <code>false</code> otherwise.","Returns <code>true</code> if this value is <code>NaN</code> and <code>false</code> otherwise.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if and only if <code>self</code> has a negative sign, …","Returns <code>true</code> if and only if <code>self</code> has a negative sign, …","Returns <code>true</code> if and only if <code>self</code> has a positive sign, …","Returns <code>true</code> if and only if <code>self</code> has a positive sign, …","","","","","Returns the maximum of the two numbers.","Returns the maximum of the two numbers.","Returns the minimum of the two numbers.","Returns the minimum of the two numbers.","","","","","","","","","","","","","A collection of the most used items and traits in this …","","","","","","","","","","","","","Returns a number that represents the sign of <code>self</code>.","Returns a number that represents the sign of <code>self</code>.","Contains utility functions and traits to convert between …","","","","","","","","","","","","","Returns the memory representation of the underlying bit …","Returns the memory representation of the underlying bit …","Converts a <code>bf16</code> into the underlying bit representation.","Converts a <code>f16</code> into the underlying bit representation.","Converts a <code>bf16</code> value into an <code>f32</code> value.","Converts a <code>f16</code> value into a <code>f32</code> value.","Converts a <code>bf16</code> value into an <code>f64</code> value.","Converts a <code>f16</code> value into a <code>f64</code> value.","Returns the memory representation of the underlying bit …","Returns the memory representation of the underlying bit …","Returns the memory representation of the underlying bit …","Returns the memory representation of the underlying bit …","","","","","","","","","","","Extensions to <code>[u16]</code> slices to support reinterpret …","Extensions to <code>[f16]</code> and <code>[bf16]</code> slices to support …","Converts all of the elements of a <code>[f32]</code> slice into <code>f16</code> or …","Converts all of the elements of a <code>[f64]</code> slice into <code>f16</code> or …","Converts all of the <code>f16</code> or <code>bf16</code> elements of <code>self</code> into <code>f32</code> …","Converts all of the <code>f16</code> or <code>bf16</code> elements of <code>self</code> into <code>f64</code> …","Reinterprets a slice of <code>f16</code> or <code>bf16</code> numbers as a slice of …","Reinterprets a slice of <code>u16</code> bits as a slice of <code>f16</code> or <code>bf16</code> …","Reinterprets a mutable slice of <code>f16</code> or <code>bf16</code> numbers as a …","Reinterprets a mutable slice of <code>u16</code> bits as a mutable …"],"i":[1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,1,2,2,1,1,2,2,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,1,2,2,1,1,2,2,1,2,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,1,1,1,2,2,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,1,2,2,1,1,2,2,1,2,1,2,0,1,1,2,2,1,1,2,2,1,1,2,2,1,2,0,1,1,2,2,1,1,2,2,1,1,2,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,0,0,0,0,0,0,3,3,3,3,3,4,3,4],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["bf16",3]]],[[]],[[]],[[["f16",3]]],[[["",0]]],[[["",0],["bf16",3]]],[[["",0]]],[[["",0],["f16",3]]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["bf16",3],["bf16",3]],["bf16",3]],[[["f16",3],["f16",3]],["f16",3]],[[],["fpcategory",4]],[[],["fpcategory",4]],[[["",0]],["bf16",3]],[[["",0]],["f16",3]],[[["bf16",3]],["bf16",3]],[[["f16",3]],["f16",3]],[[],["bf16",3]],[[],["f16",3]],[[]],[[["bf16",3]]],[[]],[[["f16",3]]],[[["",0]]],[[["",0],["bf16",3]]],[[["",0]]],[[["",0],["f16",3]]],[[["",0],["bf16",3]],["bool",0]],[[["",0],["f16",3]],["bool",0]],null,[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["u8",0]],["bf16",3]],[[["i8",0]],["bf16",3]],[[]],[[["i8",0]],["f16",3]],[[["u8",0]],["f16",3]],[[]],[[],["bf16",3]],[[],["f16",3]],[[["u16",0]],["bf16",3]],[[["u16",0]],["f16",3]],[[["f32",0]],["bf16",3]],[[["f32",0]],["f16",3]],[[["f64",0]],["bf16",3]],[[["f64",0]],["f16",3]],[[],["bf16",3]],[[],["f16",3]],[[],["bf16",3]],[[],["f16",3]],[[["str",0]],["result",4,[["bf16",3],["parsefloaterror",3]]]],[[["str",0]],["result",4,[["f16",3],["parsefloaterror",3]]]],[[["",0],["bf16",3]],["bool",0]],[[["",0],["f16",3]],["bool",0]],[[["",0],["bf16",3]],["bool",0]],[[["",0],["f16",3]],["bool",0]],[[]],[[]],[[],["bool",0]],[[],["bool",0]],[[],["bool",0]],[[],["bool",0]],[[],["bool",0]],[[],["bool",0]],[[],["bool",0]],[[],["bool",0]],[[],["bool",0]],[[],["bool",0]],[[],["bool",0]],[[],["bool",0]],[[["",0],["bf16",3]],["bool",0]],[[["",0],["f16",3]],["bool",0]],[[["",0],["bf16",3]],["bool",0]],[[["",0],["f16",3]],["bool",0]],[[["bf16",3]],["bf16",3]],[[["f16",3]],["f16",3]],[[["bf16",3]],["bf16",3]],[[["f16",3]],["f16",3]],[[["bf16",3]]],[[]],[[["f16",3]]],[[]],[[["",0],["bf16",3]]],[[["",0]]],[[["",0],["f16",3]]],[[["",0]]],[[]],[[]],[[["",0],["bf16",3]],["option",4,[["ordering",4]]]],[[["",0],["f16",3]],["option",4,[["ordering",4]]]],null,[[["iterator",8]]],[[["iterator",8]]],[[["iterator",8]]],[[["iterator",8]]],[[]],[[["bf16",3]]],[[]],[[["f16",3]]],[[["",0],["bf16",3]]],[[["",0]]],[[["",0],["f16",3]]],[[["",0]]],[[],["bf16",3]],[[],["f16",3]],null,[[]],[[["bf16",3]]],[[]],[[["f16",3]]],[[["",0]]],[[["",0],["bf16",3]]],[[["",0]]],[[["",0],["f16",3]]],[[["iterator",8]]],[[["iterator",8]]],[[["iterator",8]]],[[["iterator",8]]],[[]],[[]],[[],["u16",0]],[[],["u16",0]],[[],["f32",0]],[[],["f32",0]],[[],["f64",0]],[[],["f64",0]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]]],"p":[[3,"bf16"],[3,"f16"],[8,"HalfFloatSliceExt"],[8,"HalfBitsSliceExt"]]},\
"itertools":{"doc":"Extra iterator adaptors, functions and macros.","tn":["Both","Continue","Diff","Done","Either","EitherOrBoth","First","FirstMismatch","FoldWhile","Itertools","Last","Left","Left","Longer","Middle","MinMax","MinMaxResult","MultiUnzip","NoElements","OneElement","Only","PeekingNext","Position","Right","Right","Shorter","all","all","all_equal","all_unique","any","any","as_mut","as_mut","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_ref","as_ref","assert_equal","at_most_one","batching","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","both","cartesian_product","chain","chain","chunks","circular_tuple_windows","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","cmp","coalesce","collect","collect_tuple","collect_vec","combinations","combinations_with_replacement","concat","concat","cons_tuples","contains","count","counts","counts_by","dedup","dedup_by","dedup_by_with_count","dedup_with_count","deref","deref_mut","diff_with","dropping","dropping_back","duplicates","duplicates_by","either","either_into","either_with","enumerate","eq","eq","eq","eq","eq","equal","exactly_one","expect_left","expect_right","extend","factor_err","factor_first","factor_none","factor_ok","factor_second","filter_map_ok","filter_ok","find","find_map","find_or_first","find_or_last","find_position","flatten_ok","flip","flip","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold1","fold_ok","fold_options","fold_results","fold_while","for_each","foreach","format","format_with","from","from","from","from","from","from","from","group_by","has_left","has_right","hash","hash","interleave","interleave","interleave_shortest","intersperse","intersperse","intersperse_with","intersperse_with","into","into","into","into","into","into","into","into","into_group_map","into_group_map_by","into_grouping_map","into_grouping_map_by","into_inner","into_inner","into_inner","into_iter","into_iter","into_option","iproduct","is_both","is_done","is_left","is_left","is_right","is_right","iterate","izip","join","join","k_smallest","kmerge","kmerge","kmerge_by","kmerge_by","last","left","left","left_and_then","left_and_then","left_or","left_or_default","left_or_else","len","map","map_any","map_into","map_left","map_left","map_ok","map_results","map_right","map_right","max","merge","merge","merge_by","merge_join_by","merge_join_by","min","minmax","minmax_by","minmax_by_key","multi_cartesian_product","multipeek","multipeek","multiunzip","multiunzip","multiunzip","multizip","ne","ne","ne","ne","ne","next","next_back","next_tuple","nth","or_default","pad_using","partial_cmp","partition","partition","partition_map","partition_result","peek_nth","peeking_next","peeking_take_while","permutations","position","position_max","position_max_by","position_max_by_key","position_min","position_min_by","position_min_by_key","position_minmax","position_minmax_by","position_minmax_by_key","positions","powerset","process_results","product1","put_back","put_back_n","rciter","reduce","repeat_call","repeat_n","rev","rfind","rfold","right","right","right_and_then","right_and_then","right_or","right_or_default","right_or_else","set_from","size_hint","sorted","sorted","sorted_by","sorted_by_cached_key","sorted_by_key","sorted_unstable","sorted_unstable_by","sorted_unstable_by_key","step","structs","sum1","take_while_ref","tee","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","traits","tree_fold1","try_collect","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","tuple_combinations","tuple_windows","tuples","type_id","type_id","type_id","type_id","type_id","type_id","unfold","unique","unique_by","unwrap_left","unwrap_right","update","while_some","with_position","zip","zip_eq","zip_eq","zip_longest","0","0","0","1","1","1","2","0","0","0","0","0","1","0","0","0","0","1","0","0","0","0","Batching","Chunk","Chunks","CircularTupleWindows","Coalesce","Combinations","CombinationsWithReplacement","ConsTuples","Dedup","DedupBy","DedupByWithCount","DedupWithCount","Duplicates","DuplicatesBy","ExactlyOneError","FilterMapOk","FilterOk","FlattenOk","Format","FormatWith","Group","GroupBy","GroupingMap","GroupingMapBy","Groups","Interleave","InterleaveShortest","Intersperse","IntersperseWith","IntoChunks","Iterate","KMerge","KMergeBy","MapInto","MapOk","MapResults","Merge","MergeBy","MergeJoinBy","MultiPeek","MultiProduct","PadUsing","PeekNth","PeekingTakeWhile","Permutations","Positions","Powerset","ProcessResults","Product","PutBack","PutBackN","RcIter","RepeatCall","RepeatN","Step","TakeWhileRef","Tee","TupleBuffer","TupleCombinations","TupleWindows","Tuples","Unfold","Unique","UniqueBy","Update","WhileSome","WithPosition","Zip","ZipEq","ZipLongest","aggregate","all","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","collect","collect","collect","collect","count","count","count","count","count","count","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold_first","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_buffer","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_parts","k","last","last","last","max","max_by","max_by_key","min","min_by","min_by_key","minmax","minmax_by","minmax_by_key","n","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","peek","peek","peek_nth","peeking_next","peeking_next","peeking_next","peeking_next","product","put_back","put_back","rciter","reset_peek","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","state","sum","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_value","HomogeneousTuple"],"q":["itertoolsitertools::Diff","","","","","","","itertools::Either","","itertools::EitherOrBoth","","","","itertools::FoldWhile","","itertools::MinMaxResult","","","itertools::Position","","","","itertools::structsitertools::traits"],"d":["Both values are present.","Continue folding with this value","A type returned by the <code>diff_with</code> function.","Fold is complete and will return this value","The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","Value that either holds a single A or B, or both.","This is the first element.","The index of the first non-matching element along with …","An enum used for controlling the execution of <code>fold_while</code>.","An <code>Iterator</code> blanket implementation that provides extra …","This is the last element.","A value of type <code>L</code>.","Only the left value of type <code>A</code> is present.","The total number of elements that were in <code>I</code> along with the …","This is neither the first nor the last element.","More than one element in the iterator, the first element …","<code>MinMaxResult</code> is an enum returned by <code>minmax</code>.","An iterator that can be unzipped into multiple collections.","Empty iterator","Iterator with one element, so the minimum and maximum are …","This is the only element.","An iterator that allows peeking at an element before …","A value yielded by <code>WithPosition</code>. Indicates the position of …","A value of type <code>R</code>.","Only the right value of type <code>B</code> is present.","The total number of elements that were in <code>J</code> along with the …","Test whether the predicate holds for all elements in the …","","Check whether all elements compare equal.","Check whether all elements are unique (non equal).","Test whether the predicate holds for any elements in the …","","Convert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.","","","","Converts from <code>&amp;mut EitherOrBoth&lt;A, B&gt;</code> to …","Convert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.","","","","Converts from <code>&amp;EitherOrBoth&lt;A, B&gt;</code> to <code>EitherOrBoth&lt;&amp;A, &amp;B&gt;</code>.","Assert that two iterables produce equal sequences, with …","If the iterator yields no elements, Ok(None) will be …","A “meta iterator adaptor”. Its closure receives a …","","","","","","","","","","","","","If Both, return <code>Some</code> tuple containing left and right.","Return an iterator adaptor that iterates over the …","Create an iterator that first iterates <code>i</code> and then <code>j</code>.","Chain zero or more iterators together into one sequence.","Return an <em>iterable</em> that can chunk the iterator.","Return an iterator over all windows, wrapping back to the …","","","","","","","","","","","","Create an iterator that clones each element from &amp;T to T","","Return an iterator adaptor that uses the passed-in closure …","","Collects all items from the iterator into a tuple of a …","<code>.collect_vec()</code> is simply a type specialization of …","Return an iterator adaptor that iterates over the <code>k</code>-length …","Return an iterator that iterates over the <code>k</code>-length …","Combine all an iterator’s elements into one element by …","Combine all an iterator’s elements into one element by …","Create an iterator that maps for example iterators of …","Returns <code>true</code> if the given item is present in this iterator.","","Collect the items in this iterator and return a <code>HashMap</code> …","Collect the items in this iterator and return a <code>HashMap</code> …","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","","","Compares every element yielded by both <code>i</code> and <code>j</code> with the …","Consume the first <code>n</code> elements from the iterator eagerly, …","Consume the last <code>n</code> elements from the iterator eagerly, and …","Return an iterator adaptor that produces elements that …","Return an iterator adaptor that produces elements that …","Apply one of two functions depending on contents, unifying …","Convert the contained value into <code>T</code>","Like <code>either</code>, but provide some context to whichever of the …","Iterate <code>iterable</code> with a running index.","","","","","","Return <code>true</code> if both iterables produce equal sequences …","If the iterator yields exactly one element, that element …","Returns the left value","Returns the right value","","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","Factors out <code>None</code> from an <code>Either</code> of <code>Option</code>.","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","Return an iterator adaptor that filters and transforms …","Return an iterator adaptor that filters every <code>Result::Ok</code> …","","","Find the value of the first element satisfying a predicate …","Find the value of the first element satisfying a predicate …","Find the position and value of the first element …","Return an iterator adaptor that flattens every <code>Result::Ok</code> …","Convert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.","Convert <code>EitherOrBoth&lt;A, B&gt;</code> to <code>EitherOrBoth&lt;B, A&gt;</code>.","","","","","","","Perform a fold operation over the iterable.","","Accumulator of the elements in the iterator.","Fold <code>Result</code> values from an iterator.","Fold <code>Option</code> values from an iterator.","See <code>.fold_ok()</code>.","An iterator method that applies a function, producing a …","","Run the closure <code>f</code> eagerly on each element of the iterator.","Format all iterator elements, separated by <code>sep</code>.","Format all iterator elements, separated by <code>sep</code>.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return an <em>iterable</em> that can group iterator elements. …","If <code>Left</code>, or <code>Both</code>, return true, otherwise, return false.","If <code>Right</code>, or <code>Both</code>, return true, otherwise, return false.","","","Create an iterator that interleaves elements in <code>i</code> and <code>j</code>.","Alternate elements from two iterators until both have run …","Alternate elements from two iterators until at least one …","Iterate <code>iterable</code> with a particular value inserted between …","An iterator adaptor to insert a particular value between …","Iterate <code>iterable</code> with a particular value created by a …","An iterator adaptor to insert a particular value created …","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return a <code>HashMap</code> of keys mapped to <code>Vec</code>s of values. Keys …","Return an <code>Iterator</code> on a <code>HashMap</code>. Keys mapped to <code>Vec</code>s of …","Constructs a <code>GroupingMap</code> to be used later with one of the …","Constructs a <code>GroupingMap</code> to be used later with one of the …","Extract the value of an either over two equivalent types.","Return the inner value.","Return the value in the continue or done.","","Convert the inner value to an iterator.","<code>into_option</code> creates an <code>Option</code> of type <code>(T, T)</code>. The returned …","Create an iterator over the “cartesian product” of …","If Right, return true otherwise, return false. Equivalent …","Return true if <code>self</code> is <code>Done</code>, false if it is <code>Continue</code>.","Return true if the value is the <code>Left</code> variant.","If Left, return true otherwise, return false. Exclusive …","Return true if the value is the <code>Right</code> variant.","If Right, return true otherwise, return false. Exclusive …","Creates a new iterator that infinitely applies function to …","Create an iterator running multiple iterators in lockstep.","Combine all iterator elements into one String, seperated …","Combine all iterator elements into one String, separated …","Sort the k smallest elements into a new iterator, in …","Create an iterator that merges elements of the contained …","Return an iterator adaptor that flattens an iterator of …","Create an iterator that merges elements of the contained …","Return an iterator adaptor that flattens an iterator of …","","Convert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.","If <code>Left</code>, or <code>Both</code>, return <code>Some</code> with the left value, …","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value <code>a</code> in <code>Left(a)</code> or …","Return left value or given value","Return left or a default","Returns left value or computes it from a closure","","Map <code>f</code> over the contained value and return the result in the","Apply the functions <code>f</code> and <code>g</code> on the value <code>a</code> and <code>b</code> …","Convert each item of the iterator using the <code>Into</code> trait.","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value <code>a</code> in <code>Left(a)</code> or …","Return an iterator adaptor that applies the provided …","See <code>.map_ok()</code>.","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Apply the function <code>f</code> on the value <code>b</code> in <code>Right(b)</code> or …","Return the maximum value of the iterable.","Create an iterator that merges elements in <code>i</code> and <code>j</code>.","Return an iterator adaptor that merges the two base …","Return an iterator adaptor that merges the two base …","Return an iterator adaptor that merge-joins items from the …","Create an iterator that merges items from both this and …","Return the minimum value of the iterable.","Return the minimum and maximum elements in the iterator.","Return the minimum and maximum element of an iterator, as …","Return the minimum and maximum element of an iterator, as …","Return an iterator adaptor that iterates over the …","An iterator adaptor that allows the user to peek at …","An iterator adaptor that allows the user to peek at …","Converts an iterator of tuples into a tuple of containers.","Unzip this iterator into multiple collections.","Converts an iterator of tuples into a tuple of containers.","An iterator that generalizes <em>.zip()</em> and allows running …","","","","","","","","Advances the iterator and returns the next items grouped …","","Returns a tuple consisting of the <code>l</code> and <code>r</code> in <code>Both(l, r)</code>, …","Return an iterator adaptor that pads the sequence to a …","","Partition a sequence using predicate <code>pred</code> so that elements …","","Collect all iterator elements into one of two partitions. …","Partition a sequence of <code>Result</code>s into one list of all the <code>Ok</code>…","A drop-in replacement for <code>std::iter::Peekable</code> which adds a …","Pass a reference to the next iterator element to the …","Return an iterator adaptor that borrows from this iterator …","Return an iterator adaptor that iterates over all …","","Return the position of the maximum element in the iterator.","Return the position of the maximum element in the …","Return the position of the maximum element in the …","Return the position of the minimum element in the iterator.","Return the position of the minimum element in the …","Return the position of the minimum element in the …","Return the positions of the minimum and maximum elements in","Return the postions of the minimum and maximum elements of …","Return the postions of the minimum and maximum elements of …","Return an iterator adaptor that yields the indices of all …","Return an iterator that iterates through the powerset of …","“Lift” a function of the values of an iterator so that …","Iterate over the entire iterator and multiply all the …","Create an iterator where you can put back a single item","Create an iterator where you can put back multiple values …","Return an iterator inside a <code>Rc&lt;RefCell&lt;_&gt;&gt;</code> wrapper.","Return either value of left, right, or the product of <code>f</code> …","An iterator source that produces elements indefinitely by …","Create an iterator that produces <code>n</code> repetitions of <code>element</code>.","Iterate <code>iterable</code> in reverse.","","","Convert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.","If <code>Right</code>, or <code>Both</code>, return <code>Some</code> with the right value, …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Apply the function <code>f</code> on the value <code>b</code> in <code>Right(b)</code> or …","Return right value or given value","Return right or a default","Returns right value or computes it from a closure","Assign to each reference in <code>self</code> from the <code>from</code> iterator, …","","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Return an iterator adaptor that steps <code>n</code> elements in the …","The concrete iterator types.","Iterate over the entire iterator and add all the elements.","Return an iterator adaptor that borrows from a <code>Clone</code>-able …","Split into an iterator pair that both yield all elements …","","","","","","","Traits helpful for using certain <code>Itertools</code> methods in …","Accumulate the elements in the iterator in a tree-like …","<code>.try_collect()</code> is more convenient way of writing …","","","","","","","","","","","","","Return an iterator adaptor that iterates over the …","Return an iterator over all contiguous windows producing …","Return an iterator that groups the items in tuples of a …","","","","","","","Creates a new unfold source with the specified closure as …","Return an iterator adaptor that filters out elements that …","Return an iterator adaptor that filters out elements that …","Returns the left value","Returns the right value","Return an iterator adaptor that applies a mutating function","Return an iterator adaptor that filters <code>Option&lt;A&gt;</code> iterator …","Return an iterator adaptor that wraps each element in a …","Iterate <code>i</code> and <code>j</code> in lock step.","Iterate <code>i</code> and <code>j</code> in lock step.","Create an iterator which iterates over both this and the …","Create an iterator which iterates over both this and the …","","","","","","","","","","","","","","","","","","","","","","","A “meta iterator adaptor”. Its closure receives a …","An iterator for the elements in a single chunk.","An iterator that yields the Chunk iterators.","An iterator over all windows,wrapping back to the first …","An iterator adaptor that may join together adjacent …","An iterator to iterate through all the <code>k</code>-length …","An iterator to iterate through all the <code>n</code>-length …","An iterator that maps an iterator of tuples like …","An iterator adaptor that removes repeated duplicates.","An iterator adaptor that removes repeated duplicates, …","An iterator adaptor that removes repeated duplicates, …","An iterator adaptor that removes repeated duplicates, …","An iterator adapter to filter out duplicate elements.","An iterator adapter to filter for duplicate elements.","Iterator returned for the error case of …","An iterator adapter to filter and apply a transformation …","An iterator adapter to filter values within a nested …","An iterator adaptor that flattens <code>Result::Ok</code> values and …","Format all iterator elements lazily, separated by <code>sep</code>.","Format all iterator elements lazily, separated by <code>sep</code>.","An iterator for the elements in a single group.","<code>GroupBy</code> is the storage for the lazy grouping operation.","<code>GroupingMap</code> is an intermediate struct for efficient …","<code>GroupingMapBy</code> is an intermediate struct for efficient …","An iterator that yields the Group iterators.","An iterator adaptor that alternates elements from two …","An iterator adaptor that alternates elements from the two …","An iterator adaptor to insert a particular value between …","An iterator adaptor to insert a particular value created …","<code>ChunkLazy</code> is the storage for a lazy chunking operation.","An iterator that infinitely applies function to value and …","An iterator adaptor that merges an abitrary number of base …","An iterator adaptor that merges an abitrary number of base …","An iterator adapter to apply <code>Into</code> conversion to each …","An iterator adapter to apply a transformation within a …","See <code>MapOk</code>.","An iterator adaptor that merges the two base iterators in …","An iterator adaptor that merges the two base iterators in …","An iterator adaptor that merge-joins items from the two …","See <code>multipeek()</code> for more information.","An iterator adaptor that iterates over the cartesian …","An iterator adaptor that pads a sequence to a minimum …","See <code>peek_nth()</code> for more information.","An iterator adaptor that takes items while a closure …","An iterator adaptor that iterates through all the <code>k</code>…","An iterator adapter to get the positions of each element …","An iterator to iterate through the powerset of the …","An iterator that produces only the <code>T</code> values as long as the …","An iterator adaptor that iterates over the cartesian …","An iterator adaptor that allows putting back a single item …","An iterator adaptor that allows putting multiple items in …","A wrapper for <code>Rc&lt;RefCell&lt;I&gt;&gt;</code>, that implements the <code>Iterator</code> …","See <code>repeat_call</code> for more information.","An iterator that produces <em>n</em> repetitions of an element.","An iterator adaptor that steps a number elements in the …","An iterator adaptor that borrows from a <code>Clone</code>-able iterator","One half of an iterator pair where both return the same …","An iterator over a incomplete tuple.","An iterator to iterate through all combinations in a <code>Clone</code>…","An iterator over all contiguous windows that produces …","An iterator that groups the items in tuples of a specific …","See <code>unfold</code> for more information.","An iterator adapter to filter out duplicate elements.","An iterator adapter to filter out duplicate elements.","An iterator adapter to apply a mutating function to each …","An iterator adaptor that filters <code>Option&lt;A&gt;</code> iterator …","An iterator adaptor that wraps each element in an <code>Position</code>.","See <code>multizip</code> for more information.","An iterator which iterates two other iterators …","An iterator which iterates two other iterators …","This is the generic way to perform any operation on a …roups elements from the <code>GroupingMap</code> source by key and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Groups elements from the <code>GroupingMap</code> source by key and …","","","Groups elements from the <code>GroupingMap</code> source by key and …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return a buffer with the produced items that was not …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Split the <code>PutBack</code> into its parts.","Returns the length of a combination produced by this …","","","","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Returns the (current) length of the pool from which …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Works exactly like <code>.next()</code> with the only difference that …","Works exactly like the <code>peek</code> method in <code>std::iter::Peekable</code>","Returns a reference to the <code>nth</code> value without advancing the …","","","","","Groups elements from the <code>GroupingMap</code> source by key and …","Put back a single value to the front of the iterator.","Puts x in front of the iterator. The values are yielded in …","The boxed iterator.","Reset the peeking “cursor”","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Internal state that will be passed to the closure on the …","Groups elements from the <code>GroupingMap</code> source by key and …put back value <code>value</code> (builder method)","Implemented for homogeneous tuples of size up to 12."],"i":[1,2,0,2,0,0,3,4,0,0,3,5,1,4,3,6,0,0,6,6,3,0,0,5,1,4,0,5,7,7,0,5,5,5,5,5,1,5,5,5,5,1,0,7,7,5,4,1,6,3,2,5,4,1,6,3,2,1,7,0,0,7,7,5,1,6,3,2,5,5,1,6,3,2,0,5,7,5,7,7,7,7,0,7,0,7,5,7,7,7,7,7,7,5,5,0,7,7,7,7,5,5,5,0,5,1,6,3,2,0,7,5,5,5,5,5,5,5,5,7,7,5,5,7,7,7,7,5,1,5,5,1,6,3,2,0,5,7,7,7,7,7,5,7,7,7,5,5,4,1,6,3,2,7,1,1,5,1,0,7,7,0,7,0,7,5,5,4,1,1,6,3,2,7,7,7,7,5,3,2,5,5,6,0,1,2,5,1,5,1,0,0,0,7,7,0,7,0,7,5,5,1,5,1,5,5,5,5,5,1,7,5,1,7,7,5,1,0,0,7,7,0,7,0,7,7,7,7,0,7,0,8,7,0,5,1,6,3,2,5,5,7,5,1,7,5,0,5,7,7,0,9,7,7,5,7,7,7,7,7,7,7,7,7,7,7,0,7,0,0,0,1,0,0,0,5,5,5,1,5,1,5,5,5,7,5,0,7,7,7,7,7,7,7,7,0,7,7,7,5,1,6,3,2,5,0,7,7,5,4,1,6,3,2,5,4,1,6,3,2,7,7,7,5,4,1,6,3,2,0,7,7,5,5,7,7,7,0,0,7,7,10,11,12,10,11,12,10,13,14,15,16,17,15,18,19,20,21,21,22,23,24,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,27,48,49,50,51,52,53,54,55,56,57,58,59,60,26,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,27,48,49,50,51,52,53,54,55,56,57,58,59,60,26,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,28,31,32,39,40,42,43,44,45,46,47,27,48,49,50,51,52,53,54,55,56,57,58,59,60,26,61,62,63,64,66,67,68,69,70,71,73,74,75,77,78,79,80,81,28,31,32,39,42,43,44,45,46,47,27,48,49,50,51,52,53,54,55,56,57,58,59,60,26,61,62,63,64,66,67,68,69,70,71,73,74,75,77,78,79,80,81,30,53,55,26,40,42,45,27,77,78,35,38,28,29,30,31,32,39,40,41,42,43,45,46,47,27,48,49,50,51,52,53,54,55,56,57,58,58,59,60,60,60,60,60,60,60,60,60,26,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,30,27,48,53,55,56,56,56,56,56,56,56,56,56,56,26,61,65,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,27,48,49,50,51,52,53,54,55,56,57,58,59,60,26,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,81,81,81,81,81,81,81,81,81,81,81,81,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,27,48,49,50,51,52,53,54,55,56,57,58,59,60,26,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,74,28,29,30,31,32,34,35,37,38,39,40,41,42,43,44,45,46,47,27,48,49,50,51,52,53,54,55,56,57,58,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,27,31,40,45,27,26,26,26,26,26,26,26,26,26,31,28,29,30,31,32,34,35,37,38,39,40,41,42,43,44,45,46,47,27,48,49,50,51,52,53,54,55,56,56,56,56,56,56,56,56,56,56,57,58,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,81,81,81,81,81,81,81,81,81,81,81,32,54,55,56,56,56,56,56,56,56,56,56,56,63,67,68,77,78,80,81,81,81,81,81,81,81,81,81,81,81,81,40,27,62,64,64,27,62,64,66,26,27,66,67,62,28,29,30,32,39,40,41,42,43,44,45,46,47,27,48,50,51,53,54,55,56,56,56,56,56,56,56,56,56,56,58,61,62,63,64,65,66,67,68,69,71,72,73,77,78,79,80,81,81,81,81,81,81,81,81,81,81,81,81,70,26,28,31,32,39,42,43,44,45,46,47,27,48,49,50,51,52,53,54,55,56,57,58,59,60,26,61,62,63,64,66,67,68,69,70,71,73,74,75,77,78,79,80,81,58,59,60,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,27,48,49,50,51,52,53,54,55,56,57,58,59,60,26,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,27,48,49,50,51,52,53,54,55,56,57,58,59,60,26,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,27,48,49,50,51,52,53,54,55,56,57,58,59,60,26,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,27,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["either",4]],[[["",0]]],[[["",0]],["str",0]],[[["",0]],["",0]],[[["",0]],["eitherorboth",4]],[[["",0]],["either",4]],[[["",0]],["str",0]],[[["",0]]],[[["",0]],["",0]],[[["",0]],["eitherorboth",4]],[[]],[[],["result",4,[["option",4],["exactlyoneerror",3]]]],[[],["batching",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["option",4]],[[],["product",3]],[[],["chain",3]],null,[[["usize",0]],["intochunks",3]],[[],["circulartuplewindows",3]],[[["",0]],["either",4]],[[["",0]],["eitherorboth",4]],[[["",0]],["minmaxresult",4]],[[["",0]],["position",4]],[[["",0]],["foldwhile",4]],[[["",0],["either",4]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["cloned",3]],[[["",0],["either",4]],["ordering",4]],[[],["coalesce",6]],[[]],[[],["option",4]],[[],["vec",3]],[[["usize",0]],["combinations",3]],[[["usize",0]],["combinationswithreplacement",3]],[[]],[[]],[[],["constuples",3]],[[["",0],["",0]],["bool",0]],[[],["usize",0]],[[],["hashmap",3,[["usize",0]]]],[[],["hashmap",3,[["usize",0]]]],[[],["dedup",6]],[[],["dedupby",6]],[[],["dedupbywithcount",6]],[[],["dedupwithcount",6]],[[["",0]]],[[["",0]]],[[],["option",4,[["diff",4]]]],[[["usize",0]]],[[["usize",0]]],[[],["duplicates",6]],[[],["duplicatesby",6]],[[]],[[]],[[]],[[],["enumerate",3]],[[["",0],["either",4]],["bool",0]],[[["",0],["eitherorboth",4]],["bool",0]],[[["",0],["minmaxresult",4]],["bool",0]],[[["",0],["position",4]],["bool",0]],[[["",0],["foldwhile",4]],["bool",0]],[[],["bool",0]],[[],["result",4,[["exactlyoneerror",3]]]],[[["str",0]]],[[["str",0]]],[[["",0]]],[[],["result",4,[["either",4]]]],[[]],[[],["option",4,[["either",4]]]],[[],["result",4,[["either",4]]]],[[]],[[],["filtermapok",3]],[[],["filterok",3]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[],["option",4]],[[],["option",4]],[[["",0]],["option",4]],[[],["flattenok",3]],[[],["either",4]],[[],["eitherorboth",4]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[],["option",4]],[[["",0]],["result",4]],[[["",0]],["option",4]],[[["",0]],["result",4]],[[["",0]],["foldwhile",4]],[[]],[[]],[[["str",0]],["format",3]],[[["str",0]],["formatwith",3]],[[]],[[["result",4]],["either",4]],[[]],[[]],[[]],[[]],[[]],[[],["groupby",3]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["interleave",3]],[[],["interleave",3]],[[],["interleaveshortest",3]],[[],["intersperse",6]],[[],["intersperse",6]],[[],["interspersewith",3]],[[],["interspersewith",3]],[[]],[[],["result",4]],[[]],[[]],[[],["option",4,[["either",4]]]],[[]],[[]],[[]],[[],["hashmap",3,[["vec",3]]]],[[],["hashmap",3,[["vec",3]]]],[[],["groupingmap",3]],[[],["groupingmapby",6]],[[]],[[]],[[]],[[]],[[],["either",4]],[[],["option",4]],null,[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[],["iterate",3]],null,[[["str",0]],["string",3]],[[["",0],["str",0]],["string",3]],[[["usize",0]],["intoiter",3]],[[],["kmerge",6]],[[],["kmerge",6]],[[],["kmergeby",3]],[[],["kmergeby",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["either",4]],[[],["eitherorboth",4]],[[]],[[]],[[]],[[["",0]],["usize",0]],[[],["either",4]],[[],["eitherorboth",4]],[[],["mapinto",6]],[[],["either",4]],[[],["eitherorboth",4]],[[],["mapok",6]],[[],["mapok",6]],[[],["either",4]],[[],["eitherorboth",4]],[[],["option",4]],[[],["merge",6]],[[],["merge",6]],[[],["mergeby",3]],[[],["mergejoinby",3]],[[],["mergejoinby",3]],[[],["option",4]],[[],["minmaxresult",4]],[[],["minmaxresult",4]],[[],["minmaxresult",4]],[[],["multiproduct",3]],[[],["multipeek",3]],[[],["multipeek",3]],[[]],[[]],[[]],[[],["zip",3]],[[["",0],["either",4]],["bool",0]],[[["",0],["eitherorboth",4]],["bool",0]],[[["",0],["minmaxresult",4]],["bool",0]],[[["",0],["position",4]],["bool",0]],[[["",0],["foldwhile",4]],["bool",0]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0],["usize",0]],["option",4]],[[]],[[["usize",0]],["padusing",3]],[[["",0],["either",4]],["option",4,[["ordering",4]]]],[[],["usize",0]],[[]],[[]],[[]],[[],["peeknth",3]],[[["",0]],["option",4]],[[["",0]],["peekingtakewhile",3]],[[["usize",0]],["permutations",3]],[[["",0]],["option",4,[["usize",0]]]],[[],["option",4,[["usize",0]]]],[[],["option",4,[["usize",0]]]],[[],["option",4,[["usize",0]]]],[[],["option",4,[["usize",0]]]],[[],["option",4,[["usize",0]]]],[[],["option",4,[["usize",0]]]],[[],["minmaxresult",4,[["usize",0]]]],[[],["minmaxresult",4,[["usize",0]]]],[[],["minmaxresult",4,[["usize",0]]]],[[],["positions",3]],[[],["powerset",3]],[[],["result",4]],[[],["option",4]],[[],["putback",3]],[[],["putbackn",3]],[[],["rciter",3]],[[]],[[],["repeatcall",3]],[[["usize",0]],["repeatn",3]],[[],["rev",3]],[[["",0]],["option",4]],[[]],[[],["option",4]],[[],["option",4]],[[],["either",4]],[[],["eitherorboth",4]],[[]],[[]],[[]],[[["",0]],["usize",0]],[[["",0]]],[[],["intoiter",3]],[[],["intoiter",3]],[[],["intoiter",3]],[[],["intoiter",3]],[[],["intoiter",3]],[[],["intoiter",3]],[[],["intoiter",3]],[[],["intoiter",3]],[[["usize",0]],["step",3]],null,[[],["option",4]],[[["",0]],["takewhileref",3]],[[]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],null,[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["tuplecombinations",3]],[[],["tuplewindows",3]],[[],["tuples",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["unfold",3]],[[],["unique",3]],[[],["uniqueby",3]],[[]],[[]],[[],["update",3]],[[],["whilesome",3]],[[],["withposition",3]],[[],["zip",3]],[[],["zipeq",3]],[[],["zipeq",3]],[[],["ziplongest",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["hashmap",3]],[[["",0]],["boolmultiproduct",3]],[[["",0]],["interleave",3]],[[["",0]],["interleaveshortest",3]],[[["",0]],["putback",3]],[[["",0]],["product",3]],[[["",0]],["batching",3]],[[["",0]],["step",3]],[[["",0]],["whilesome",3]],[[["",0]],["tuplecombinations",3]],[[["",0]],["filterok",3]],[[["",0]],["positions",3]],[[["",0]],["update",3]],[[["",0]]],[[["",0]],["combinationswithreplacement",3]],[[["",0]],["exactlyoneerror",3]],[[["",0]],["formatwith",3]],[[["",0]],["format",3]],[[["",0]],["groupingmap",3]],[[["",0]],["interspersewith",3]],[[["",0]],["multipeek",3]],[[["",0]],["padusing",3]],[[["",0]],["peeknth",3]],[[["",0]],["putbackn",3]],[[["",0]]],[[["",0]],["repeatn",3]],[[["",0]],["repeatcall",3]],[[["",0]],["unfold",3]],[[["",0]],["iterate",3]],[[["",0]],["tuplebuffer",3]],[[["",0]],["tuples",3]],[[["",0]],["tuplewindows",3]],[[["",0]],["uniqueby",3]],[[["",0]],["unique",3]],[[["",0]],["zipeq",3]],[[["",0]],["ziplongest",3]],[[["",0]],["ziphashmap",3]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[["",0]]],[[["",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["fmtresult",6]],[[["",0],["formatter",3]],["fmtresult",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["hashmap",3]],[[]],[[]],[[],["hashmaptuplebuffer",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["usize",0]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["hashmap",3]],[[],["hashmap",3]],[[],["hashmap",3]],[[],["hashmap",3]],[[],["hashmap",3]],[[],["hashmap",3]],[[],["hashmap",3,[["minmaxresult",4]]]],[[],["hashmap",3,[["minmaxresult",4]]]],[[],["hashmap",3,[["minmaxresult",4]]]],[[["",0]],["usize",0]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0],["usize",0]],["option",4]],[[["",0],["usize",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0],["usize",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[],["hashmap",3]],[[["",0]]],[[["",0]]],nullnull,[[],["hashmap",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],null],"p":[[4,"EitherOrBoth"],[4,"FoldWhile"],[4,"Position"],[4,"Diff"],[4,"Either"],[4,"MinMaxResult"],[8,"Itertools"],[8,"MultiUnzip"],[8,"PeekingNext"],[13,"FirstMismatch"],[13,"Shorter"],[13,"Longer"],[13,"Left"],[13,"Right"],[13,"Both"],[13,"Left"],[13,"Right"],[13,"Continue"],[13,"Done"],[13,"OneElement"],[13,"MinMax"],[13,"First"],[13,"Middle"],[13,"Last"],[13,"Only"],[3,"GroupingMap"],[3,"PutBack"],[3,"MergeBy"],[3,"TakeWhileRef"],[3,"FilterMapOk"],[3,"Combinations"],[3,"FlattenOk"],[3,"GroupBy"],[3,"Groups"],[3,"Group"],[3,"IntoChunks"],[3,"Chunks"],[3,"Chunk"],[3,"KMergeBy"],[3,"MergeJoinBy"],[3,"PeekingTakeWhile"],[3,"Permutations"],[3,"Powerset"],[3,"WithPosition"],[3,"MultiProduct"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"Product"],[3,"Batching"],[3,"Step"],[3,"WhileSome"],[3,"TupleCombinations"],[3,"FilterOk"],[3,"Positions"],[3,"Update"],[3,"ConsTuples"],[3,"CombinationsWithReplacement"],[3,"ExactlyOneError"],[3,"FormatWith"],[3,"Format"],[3,"IntersperseWith"],[3,"MultiPeek"],[3,"PadUsing"],[3,"PeekNth"],[3,"ProcessResults"],[3,"PutBackN"],[3,"RcIter"],[3,"RepeatN"],[3,"RepeatCall"],[3,"Unfold"],[3,"Iterate"],[3,"Tee"],[3,"TupleBuffer"],[3,"Tuples"],[3,"TupleWindows"],[3,"CircularTupleWindows"],[3,"UniqueBy"],[3,"Unique"],[3,"ZipEq"],[3,"ZipLongest"],[3,"Zip"]]},\
"itoa":{"doc":"github crates-io docs-rs","t":[3,8,11,11,11,11,11,11,11,11,11,11,11],"n":["Buffer","Integer","borrow","borrow_mut","clone","default","format","from","into","new","try_from","try_into","type_id"],"q":["itoa","","","","","","","","","","","",""],"d":["A correctly sized stack allocation for the formatted …","An integer that can be written into an <code>itoa::Buffer</code>.","","","","","Print an integer into this buffer and return a reference …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","This is a cheap operation; you don’t need to worry about …","","",""],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1],"f":[null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[],["buffer",3]],[[["",0],["integer",8]],["str",0]],[[]],[[]],[[],["buffer",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[3,"Buffer"]]},\
"lazy_static":{"doc":"A macro for declaring lazily evaluated statics.","t":[8,5,14],"n":["LazyStatic","initialize","lazy_static"],"q":["lazy_static","",""],"d":["Support trait for enabling a few common operation on lazy …","Takes a shared reference to a lazy static and initializes …",""],"i":[0,0,0],"f":[null,[[["",0]]],null],"p":[]},\
"libc":{"doc":"libc - Raw FFI bindings to platforms’ system libraries","t":[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,6,6,5,6,17,17,17,17,17,17,17,17,17,17,17,17,17,5,5,5,5,5,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,4,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,3,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,5,5,5,17,5,17,17,17,4,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,5,13,13,13,13,13,13,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,5,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,5,17,5,5,5,5,5,17,17,17,5,5,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,5,5,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,5,17,17,17,17,17,17,12,3,3,3,3,5,12,12,12,12,12,12,12,6,6,12,12,12,12,12,12,6,6,12,12,5,5,5,5,5,12,12,5,5,5,5,5,12,12,12,12,3,5,12,12,12,12,12,12,12,12,12,12,5,5,12,5,12,12,12,5,12,5,12,5,5,3,5,12,12,12,12,12,5,5,5,3,12,5,5,5,5,5,5,5,5,5,12,12,12,12,5,6,6,12,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,5,5,12,12,12,12,12,12,6,6,6,12,6,12,12,6,6,12,12,6,6,6,6,6,6,6,4,12,5,6,5,5,5,5,5,5,12,5,5,5,5,5,12,12,5,5,5,5,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,12,12,12,12,12,12,12,12,12,3,12,12,12,5,5,12,12,5,6,6,12,12,12,6,12,12,6,12,12,12,12,12,12,12,12,12,5,12,12,12,12,12,12,12,12,12,12,12,12,12,12,6,5,3,5,5,12,5,5,5,12,12,12,12,5,5,12,12,12,12,12,12,12,12,12,12,3,5,5,5,5,12,12,5,5,5,5,5,12,12,12,12,5,5,5,5,5,5,5,5,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,5,12,12,5,5,5,5,5,5,5,5,5,5,12,3,5,5,5,5,12,12,5,5,5,5,5,5,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,5,3,5,5,5,11,5,5,5,5,4,5,5,5,12,5,5,12,12,5,5,5,5,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,5,5,5,5,5,6,3,12,12,12,12,12,5,5,5,5,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,12,6,12,12,12,5,3,5,5,5,12,12,12,12,5,3,12,12,12,12,12,12,12,12,12,12,6,6,6,5,5,5,6,3,5,5,5,5,6,6,12,12,6,3,3,5,12,5,3,3,12,3,5,5,12,12,12,12,12,12,12,3,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,12,12,12,12,12,12,12,12,12,3,3,3,6,3,6,12,12,5,12,12,6,6,6,6,6,12,12,12,12,12,12,12,12,6,12,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,5,12,12,3,3,3,3,3,12,12,12,12,12,3,12,12,12,5,5,5,5,5,5,5,5,5,5,5,5,5,12,12,3,12,12,5,17,17,17,17,17,17,17,17,17,17,17,17,17,6,3,5,5,3,6,5,5,5,12,12,12,12,12,12,12,12,12,12,5,5,5,3,6,6,3,5,5,5,5,5,12,3,6,5,5,5,5,5,3,5,12,12,5,5,5,5,5,12,3,3,5,6,6,3,6,6,5,7,5,3,5,6,6,5,6,6,12,5,12,12,5,5,5,3,5,5,5,5,5,5,5,5,5,5,3,5,3,12,12,12,12,12,6,6,5,5,5,5,5,6,6,5,5,5,5,5,12,5,5,5,5,5,5,5,5,5,5,5,5,12,6,12,12,12,12,12,5,5,5,12,12,12,12,12,12,12,3,3,5,5,5,5,5,12,12,12,5,6,12,12,12,5,6,5,6,5,6,12,12,5,12,12,5,5,3,12,6,12,12,5,5,5,5,5,5,5,12,12,12,12,12,12,12,12,12,12,3,5,5,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,5,12,5,6,5,12,12,6,5,3,5,12,5,5,5,5,5,5,5,5,5,6,5,5,5,5,5,5,5,5,5,5,5,5,6,5,12,5,5,12,12,5,12,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,3,3,3,3,6,6,12,3,6,6,6,6,6,3,6,6,3,6,6,3,5,17,17,17,17,17,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,5,5,5,5,5,5,5,5,5,3,5,5,5,5,5,3,5,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,5,5,5,5,5,5,6,5,5,5,5,5,3,5,5,5,5,5,5,5,3,5,5,5,3,5,5,5,5,5,5,5,5,3,5,5,5,5,5,5,6,5,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,5,6,5,12,12,12,12,5,5,5,5,5,12,12,12,12,12,12,12,12,12,12,12,12,5,5,4,5,5,5,12,12,3,5,5,12,12,5,5,5,5,5,5,5,5,5,5,5,5,5,3,5,5,3,6,12,5,5,5,5,5,5,5,12,12,12,12,5,5,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,6,3,12,12,5,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,6,3,3,3,3,3,12,12,12,12,12,12,12,3,12,6,12,12,12,12,6,6,12,12,12,12,12,5,12,12,12,12,12,5,5,5,3,12,5,12,12,12,12,12,12,12,12,12,5,5,3,3,12,12,5,12,5,12,12,12,12,12,5,12,12,12,12,12,5,6,5,5,5,3,5,5,3,5,19,5,5,5,5,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,12,12,12,12,12,12,12,12,5,12,12,5,5,6,5,5,5,3,5,11,12,12,12,11,12,12,11,12,11,12,11,3,5,5,5,5,5,12,12,12,12,3,5,6,3,5,5,5,5,6,3,5,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,6,12,12,5,12,12,12,12,12,5,3,3,3,3,3,3,3,3,3,5,5,6,12,12,6,5,5,5,12,12,12,12,12,12,5,6,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,5,3,5,12,3,5,12,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,12,12,12,6,12,12,12,12,5,5,5,5,5,5,5,5,5,4,4,6,5,5,12,5,12,12,12,12,12,5,6,5,5,6,6,5,6,5,3,6,6,5,5,6,5,5,5,5,5,5,5,5,5,3,12,6,6,3,6,6,3,6,6,3,6,6,12,3,6,6,3,6,6,6,12,12,3,6,6,5,6,6,3,6,6,6,12,6,5,5,6,3,6,6,3,6,6,6,3,6,6,6,12,3,6,6,12,5,12,12,6,3,5,5,12,3,3,3,3,4,3,12,12,12,12,12,12,12,12,12,12,12,5,5,3,12,12,12,12,12,5,12,5,12,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,3,12,12,12,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,6,5,12,12,12,5,12,12,12,12,12,12,12,3,5,5,5,3,5,3,12,6,12,12,12,12,12,12,3,12,12,12,6,5,6,6,6,7,6,3,6,3,3,6,6,6,6,12,12,12,12,3,3,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,5,5,5,5,6,5,5,3,12,12,5,5,5,12,12,12,12,12,12,12,12,12,3,3,12,12],"n":["ABDAY_1","ABDAY_2","ABDAY_3","ABDAY_4","ABDAY_5","ABDAY_6","ABDAY_7","ABMON_1","ABMON_10","ABMON_11","ABMON_12","ABMON_2","ABMON_3","ABMON_4","ABMON_5","ABMON_6","ABMON_7","ABMON_8","ABMON_9","ACCOUNTING","AF_APPLETALK","AF_CCITT","AF_CHAOS","AF_CNT","AF_COIP","AF_DATAKIT","AF_DECnet","AF_DLI","AF_E164","AF_ECMA","AF_HYLINK","AF_IMPLINK","AF_INET","AF_INET6","AF_IPX","AF_ISDN","AF_ISO","AF_LAT","AF_LINK","AF_LOCAL","AF_NATM","AF_NDRV","AF_NETBIOS","AF_NS","AF_OSI","AF_PPP","AF_PUP","AF_ROUTE","AF_SIP","AF_SNA","AF_SYSTEM","AF_SYS_CONTROL","AF_UNIX","AF_UNSPEC","AIO_ALLDONE","AIO_CANCELED","AIO_LISTIO_MAX","AIO_NOTCANCELED","AI_ADDRCONFIG","AI_ALL","AI_CANONNAME","AI_DEFAULT","AI_MASK","AI_NUMERICHOST","AI_NUMERICSERV","AI_PASSIVE","AI_UNUSABLE","AI_V4MAPPED","AI_V4MAPPED_CFG","ALTWERASE","ALT_DIGITS","AM_STR","ARPOP_REPLY","ARPOP_REQUEST","ATF_COM","ATF_PERM","ATF_PUBL","ATF_USETRAILERS","AT_EACCESS","AT_FDCWD","AT_REMOVEDIR","AT_SYMLINK_FOLLOW","AT_SYMLINK_NOFOLLOW","B0","B110","B115200","B1200","B134","B14400","B150","B1800","B19200","B200","B230400","B2400","B28800","B300","B38400","B4800","B50","B57600","B600","B7200","B75","B76800","B9600","BIOCFLUSH","BIOCGBLEN","BIOCGDLT","BIOCGDLTLIST","BIOCGETIF","BIOCGHDRCMPLT","BIOCGRSIG","BIOCGRTIMEOUT","BIOCGSEESENT","BIOCGSTATS","BIOCIMMEDIATE","BIOCPROMISC","BIOCSBLEN","BIOCSDLT","BIOCSETF","BIOCSETFNR","BIOCSETIF","BIOCSHDRCMPLT","BIOCSRSIG","BIOCSRTIMEOUT","BIOCSSEESENT","BIOCVERSION","BOOT_TIME","BPF_ALIGNMENT","BRKINT","BS0","BS1","BSDLY","BUFSIZ","CCCryptorStatus","CCRNGStatus","CCRandomGenerateBytes","CCStatus","CIGNORE","CLD_CONTINUED","CLD_DUMPED","CLD_EXITED","CLD_KILLED","CLD_STOPPED","CLD_TRAPPED","CLOCAL","CLOCK_MONOTONIC","CLOCK_PROCESS_CPUTIME_ID","CLOCK_REALTIME","CLOCK_THREAD_CPUTIME_ID","CLOCK_UPTIME_RAW","CMSG_DATA","CMSG_FIRSTHDR","CMSG_LEN","CMSG_NXTHDR","CMSG_SPACE","CODESET","CONNECT_DATA_AUTHENTICATED","CONNECT_DATA_IDEMPOTENT","CONNECT_RESUME_ON_READ_WRITE","COPYFILE_ACL","COPYFILE_CHECK","COPYFILE_CLONE","COPYFILE_CLONE_FORCE","COPYFILE_CONTINUE","COPYFILE_COPY_DATA","COPYFILE_COPY_XATTR","COPYFILE_DATA","COPYFILE_DATA_SPARSE","COPYFILE_ERR","COPYFILE_EXCL","COPYFILE_FINISH","COPYFILE_METADATA","COPYFILE_MOVE","COPYFILE_NOFOLLOW","COPYFILE_NOFOLLOW_DST","COPYFILE_NOFOLLOW_SRC","COPYFILE_PACK","COPYFILE_PRESERVE_DST_TRACKED","COPYFILE_PROGRESS","COPYFILE_QUIT","COPYFILE_RECURSE_DIR","COPYFILE_RECURSE_DIR_CLEANUP","COPYFILE_RECURSE_ERROR","COPYFILE_RECURSE_FILE","COPYFILE_RECURSIVE","COPYFILE_RUN_IN_PLACE","COPYFILE_SECURITY","COPYFILE_SKIP","COPYFILE_START","COPYFILE_STAT","COPYFILE_UNLINK","COPYFILE_UNPACK","COPYFILE_VERBOSE","COPYFILE_XATTR","CPU_STATE_IDLE","CPU_STATE_MAX","CPU_STATE_NICE","CPU_STATE_SYSTEM","CPU_STATE_USER","CR0","CR1","CR2","CR3","CRDLY","CREAD","CRNCYSTR","CRTSCTS","CS5","CS6","CS7","CS8","CSIZE","CSTOPB","CTLFLAG_ANYBODY","CTLFLAG_KERN","CTLFLAG_LOCKED","CTLFLAG_MASKED","CTLFLAG_NOAUTO","CTLFLAG_NOLOCK","CTLFLAG_OID2","CTLFLAG_RD","CTLFLAG_RW","CTLFLAG_SECURE","CTLFLAG_WR","CTLTYPE","CTLTYPE_INT","CTLTYPE_NODE","CTLTYPE_OPAQUE","CTLTYPE_QUAD","CTLTYPE_STRING","CTLTYPE_STRUCT","CTL_DEBUG","CTL_DEBUG_MAXID","CTL_DEBUG_NAME","CTL_DEBUG_VALUE","CTL_HW","CTL_KERN","CTL_MACHDEP","CTL_MAXID","CTL_NET","CTL_UNSPEC","CTL_USER","CTL_VFS","CTL_VM","DAY_1","DAY_2","DAY_3","DAY_4","DAY_5","DAY_6","DAY_7","DEAD_PROCESS","DIR","DLT_ARCNET","DLT_ATM_RFC1483","DLT_AX25","DLT_CHAOS","DLT_EN10MB","DLT_EN3MB","DLT_FDDI","DLT_IEEE802","DLT_LOOP","DLT_NULL","DLT_PPP","DLT_PRONET","DLT_RAW","DLT_SLIP","DT_BLK","DT_CHR","DT_DIR","DT_FIFO","DT_LNK","DT_REG","DT_SOCK","DT_UNKNOWN","D_FMT","D_MD_ORDER","D_T_FMT","Dl_info","E2BIG","EACCES","EADDRINUSE","EADDRNOTAVAIL","EAFNOSUPPORT","EAGAIN","EAI_AGAIN","EAI_BADFLAGS","EAI_FAIL","EAI_FAMILY","EAI_MEMORY","EAI_NODATA","EAI_NONAME","EAI_OVERFLOW","EAI_SERVICE","EAI_SOCKTYPE","EAI_SYSTEM","EALREADY","EAUTH","EBADARCH","EBADEXEC","EBADF","EBADMACHO","EBADMSG","EBADRPC","EBUSY","ECANCELED","ECHILD","ECHO","ECHOCTL","ECHOE","ECHOK","ECHOKE","ECHONL","ECHOPRT","ECONNABORTED","ECONNREFUSED","ECONNRESET","EDEADLK","EDESTADDRREQ","EDEVERR","EDOM","EDQUOT","EEXIST","EFAULT","EFBIG","EFTYPE","EHOSTDOWN","EHOSTUNREACH","EIDRM","EILSEQ","EINPROGRESS","EINTR","EINVAL","EIO","EISCONN","EISDIR","ELAST","ELOOP","EMFILE","EMLINK","EMPTY","EMSGSIZE","EMULTIHOP","ENAMETOOLONG","ENEEDAUTH","ENETDOWN","ENETRESET","ENETUNREACH","ENFILE","ENOATTR","ENOBUFS","ENODATA","ENODEV","ENOENT","ENOEXEC","ENOLCK","ENOLINK","ENOMEM","ENOMSG","ENOPOLICY","ENOPROTOOPT","ENOSPC","ENOSR","ENOSTR","ENOSYS","ENOTBLK","ENOTCONN","ENOTDIR","ENOTEMPTY","ENOTRECOVERABLE","ENOTSOCK","ENOTSUP","ENOTTY","ENXIO","EOF","EOPNOTSUPP","EOVERFLOW","EOWNERDEAD","EPERM","EPFNOSUPPORT","EPIPE","EPROCLIM","EPROCUNAVAIL","EPROGMISMATCH","EPROGUNAVAIL","EPROTO","EPROTONOSUPPORT","EPROTOTYPE","EPWROFF","EQFULL","ERA","ERANGE","ERA_D_FMT","ERA_D_T_FMT","ERA_T_FMT","EREMOTE","EROFS","ERPCMISMATCH","ESHLIBVERS","ESHUTDOWN","ESOCKTNOSUPPORT","ESPIPE","ESRCH","ESTALE","ETIME","ETIMEDOUT","ETOOMANYREFS","ETXTBSY","EUSERS","EVFILT_AIO","EVFILT_FS","EVFILT_MACHPORT","EVFILT_PROC","EVFILT_READ","EVFILT_SIGNAL","EVFILT_TIMER","EVFILT_USER","EVFILT_VM","EVFILT_VNODE","EVFILT_WRITE","EV_ADD","EV_CLEAR","EV_DELETE","EV_DISABLE","EV_DISPATCH","EV_ENABLE","EV_EOF","EV_ERROR","EV_FLAG0","EV_FLAG1","EV_ONESHOT","EV_OOBAND","EV_POLL","EV_RECEIPT","EV_SYSFLAGS","EWOULDBLOCK","EXDEV","EXIT_FAILURE","EXIT_SUCCESS","EXTA","EXTB","EXTPROC","FD_CLOEXEC","FD_CLR","FD_ISSET","FD_SET","FD_SETSIZE","FD_ZERO","FF0","FF1","FFDLY","FILE","FILENAME_MAX","FIOASYNC","FIOCLEX","FIODTYPE","FIOGETOWN","FIONBIO","FIONCLEX","FIONREAD","FIOSETOWN","FLUSHO","FOPEN_MAX","F_ALLOCATEALL","F_ALLOCATECONTIG","F_BARRIERFSYNC","F_DUPFD","F_DUPFD_CLOEXEC","F_FREEZE_FS","F_FULLFSYNC","F_GETFD","F_GETFL","F_GETLK","F_GETOWN","F_GETPATH","F_GETPATH_NOFIRMLINK","F_GLOBAL_NOCACHE","F_LOCK","F_LOG2PHYS","F_LOG2PHYS_EXT","F_NOCACHE","F_NODIRECT","F_OK","F_PEOFPOSMODE","F_PREALLOCATE","F_RDADVISE","F_RDAHEAD","F_RDLCK","F_SETFD","F_SETFL","F_SETLK","F_SETLKW","F_SETOWN","F_TEST","F_THAW_FS","F_TLOCK","F_ULOCK","F_UNLCK","F_VOLPOSMODE","F_WRLCK","GETALL","GETNCNT","GETPID","GETVAL","GETZCNT","GLOB_ABORTED","GLOB_APPEND","GLOB_DOOFFS","GLOB_ERR","GLOB_MARK","GLOB_NOCHECK","GLOB_NOESCAPE","GLOB_NOMATCH","GLOB_NOSORT","GLOB_NOSPACE","GRPQUOTA","HOST_CPU_LOAD_INFO","HOST_CPU_LOAD_INFO_COUNT","HOST_EXPIRED_TASK_INFO","HOST_EXTMOD_INFO64","HOST_LOAD_INFO","HOST_VM_INFO","HOST_VM_INFO64","HOST_VM_INFO64_COUNT","HUPCL","HW_AVAILCPU","HW_BUS_FREQ","HW_BYTEORDER","HW_CACHELINE","HW_CPU_FREQ","HW_DISKNAMES","HW_DISKSTATS","HW_EPOCH","HW_FLOATINGPT","HW_L1DCACHESIZE","HW_L1ICACHESIZE","HW_L2CACHESIZE","HW_L2SETTINGS","HW_L3CACHESIZE","HW_L3SETTINGS","HW_MACHINE","HW_MACHINE_ARCH","HW_MAXID","HW_MEMSIZE","HW_MODEL","HW_NCPU","HW_PAGESIZE","HW_PHYSMEM","HW_PRODUCT","HW_TARGET","HW_TB_FREQ","HW_USERMEM","HW_VECTORUNIT","ICANON","ICRNL","IEXTEN","IFF_ALLMULTI","IFF_ALTPHYS","IFF_BROADCAST","IFF_DEBUG","IFF_LINK0","IFF_LINK1","IFF_LINK2","IFF_LOOPBACK","IFF_MULTICAST","IFF_NOARP","IFF_NOTRAILERS","IFF_OACTIVE","IFF_POINTOPOINT","IFF_PROMISC","IFF_RUNNING","IFF_SIMPLEX","IFF_UP","IFNAMSIZ","IF_NAMESIZE","IGNBRK","IGNCR","IGNPAR","IMAXBEL","INADDR_ANY","INADDR_BROADCAST","INADDR_LOOPBACK","INADDR_NONE","INIT_PROCESS","INLCR","INPCK","INT_MAX","INT_MIN","IOV_MAX","IPC_CREAT","IPC_EXCL","IPC_M","IPC_NOWAIT","IPC_PRIVATE","IPC_R","IPC_RMID","IPC_SET","IPC_STAT","IPC_W","IPPROTO_3PC","IPPROTO_ADFS","IPPROTO_AH","IPPROTO_AHIP","IPPROTO_APES","IPPROTO_ARGUS","IPPROTO_AX25","IPPROTO_BHA","IPPROTO_BLT","IPPROTO_BRSATMON","IPPROTO_CFTP","IPPROTO_CHAOS","IPPROTO_CMTP","IPPROTO_CPHB","IPPROTO_CPNX","IPPROTO_DDP","IPPROTO_DGP","IPPROTO_DIVERT","IPPROTO_DONE","IPPROTO_DSTOPTS","IPPROTO_EGP","IPPROTO_EMCON","IPPROTO_ENCAP","IPPROTO_EON","IPPROTO_ESP","IPPROTO_ETHERIP","IPPROTO_FRAGMENT","IPPROTO_GGP","IPPROTO_GMTP","IPPROTO_GRE","IPPROTO_HELLO","IPPROTO_HMP","IPPROTO_HOPOPTS","IPPROTO_ICMP","IPPROTO_ICMPV6","IPPROTO_IDP","IPPROTO_IDPR","IPPROTO_IDRP","IPPROTO_IGMP","IPPROTO_IGP","IPPROTO_IGRP","IPPROTO_IL","IPPROTO_INLSP","IPPROTO_INP","IPPROTO_IP","IPPROTO_IPCOMP","IPPROTO_IPCV","IPPROTO_IPEIP","IPPROTO_IPIP","IPPROTO_IPPC","IPPROTO_IPV6","IPPROTO_IRTP","IPPROTO_KRYPTOLAN","IPPROTO_LARP","IPPROTO_LEAF1","IPPROTO_LEAF2","IPPROTO_MAX","IPPROTO_MEAS","IPPROTO_MHRP","IPPROTO_MICP","IPPROTO_MTP","IPPROTO_MUX","IPPROTO_ND","IPPROTO_NHRP","IPPROTO_NONE","IPPROTO_NSP","IPPROTO_NVPII","IPPROTO_OSPFIGP","IPPROTO_PGM","IPPROTO_PIGP","IPPROTO_PIM","IPPROTO_PRM","IPPROTO_PUP","IPPROTO_PVP","IPPROTO_RAW","IPPROTO_RCCMON","IPPROTO_RDP","IPPROTO_ROUTING","IPPROTO_RSVP","IPPROTO_RVD","IPPROTO_SATEXPAK","IPPROTO_SATMON","IPPROTO_SCCSP","IPPROTO_SCTP","IPPROTO_SDRP","IPPROTO_SEP","IPPROTO_SRPC","IPPROTO_ST","IPPROTO_SVMTP","IPPROTO_SWIPE","IPPROTO_TCF","IPPROTO_TCP","IPPROTO_TP","IPPROTO_TPXX","IPPROTO_TRUNK1","IPPROTO_TRUNK2","IPPROTO_TTP","IPPROTO_UDP","IPPROTO_VINES","IPPROTO_VISA","IPPROTO_VMTP","IPPROTO_WBEXPAK","IPPROTO_WBMON","IPPROTO_WSN","IPPROTO_XNET","IPPROTO_XTP","IPTOS_ECN_CE","IPTOS_ECN_ECT0","IPTOS_ECN_ECT1","IPTOS_ECN_MASK","IPTOS_ECN_NOTECT","IPV6_BOUND_IF","IPV6_CHECKSUM","IPV6_DONTFRAG","IPV6_HOPLIMIT","IPV6_JOIN_GROUP","IPV6_LEAVE_GROUP","IPV6_MULTICAST_HOPS","IPV6_MULTICAST_IF","IPV6_MULTICAST_LOOP","IPV6_PKTINFO","IPV6_RECVPKTINFO","IPV6_RECVTCLASS","IPV6_TCLASS","IPV6_UNICAST_HOPS","IPV6_V6ONLY","IP_ADD_MEMBERSHIP","IP_ADD_SOURCE_MEMBERSHIP","IP_BLOCK_SOURCE","IP_BOUND_IF","IP_DONTFRAG","IP_DROP_MEMBERSHIP","IP_DROP_SOURCE_MEMBERSHIP","IP_HDRINCL","IP_MULTICAST_IF","IP_MULTICAST_LOOP","IP_MULTICAST_TTL","IP_PKTINFO","IP_RECVDSTADDR","IP_RECVIF","IP_RECVTOS","IP_TOS","IP_TTL","IP_UNBLOCK_SOURCE","ISIG","ISTRIP","ITIMER_PROF","ITIMER_REAL","ITIMER_VIRTUAL","IUTF8","IXANY","IXOFF","IXON","KERN_ABORTED","KERN_AFFINITY","KERN_AIOMAX","KERN_AIOPROCMAX","KERN_AIOTHREADS","KERN_ALREADY_IN_SET","KERN_ALREADY_WAITING","KERN_ARGMAX","KERN_BOOTFILE","KERN_BOOTTIME","KERN_CHECKOPENEVT","KERN_CLASSIC","KERN_CLASSICHANDLER","KERN_CLOCKRATE","KERN_CODESIGN_ERROR","KERN_COREDUMP","KERN_COREFILE","KERN_DEFAULT_SET","KERN_DOMAINNAME","KERN_DUMMY","KERN_DUMPDEV","KERN_EXCEPTION_PROTECTED","KERN_EXEC","KERN_FAILURE","KERN_FILE","KERN_HOSTID","KERN_HOSTNAME","KERN_INSUFFICIENT_BUFFER_SIZE","KERN_INVALID_ADDRESS","KERN_INVALID_ARGUMENT","KERN_INVALID_CAPABILITY","KERN_INVALID_HOST","KERN_INVALID_LEDGER","KERN_INVALID_MEMORY_CONTROL","KERN_INVALID_NAME","KERN_INVALID_OBJECT","KERN_INVALID_POLICY","KERN_INVALID_PROCESSOR_SET","KERN_INVALID_RIGHT","KERN_INVALID_SECURITY","KERN_INVALID_TASK","KERN_INVALID_VALUE","KERN_IPC","KERN_JOB_CONTROL","KERN_KDBUFWAIT","KERN_KDCPUMAP","KERN_KDDFLAGS","KERN_KDEBUG","KERN_KDEFLAGS","KERN_KDENABLE","KERN_KDGETBUF","KERN_KDGETENTROPY","KERN_KDGETREG","KERN_KDPIDEX","KERN_KDPIDTR","KERN_KDREADCURTHRMAP","KERN_KDREADTR","KERN_KDREMOVE","KERN_KDSETBUF","KERN_KDSETREG","KERN_KDSETRTCDEC","KERN_KDSETUP","KERN_KDSET_TYPEFILTER","KERN_KDTHRMAP","KERN_KDWRITEMAP","KERN_KDWRITETR","KERN_LOCK_OWNED","KERN_LOCK_OWNED_SELF","KERN_LOCK_SET_DESTROYED","KERN_LOCK_UNSTABLE","KERN_LOGSIGEXIT","KERN_LOW_PRI_DELAY","KERN_LOW_PRI_WINDOW","KERN_MAXFILES","KERN_MAXFILESPERPROC","KERN_MAXID","KERN_MAXPARTITIONS","KERN_MAXPROC","KERN_MAXPROCPERUID","KERN_MAXVNODES","KERN_MEMORY_DATA_MOVED","KERN_MEMORY_ERROR","KERN_MEMORY_FAILURE","KERN_MEMORY_PRESENT","KERN_MEMORY_RESTART_COPY","KERN_NAME_EXISTS","KERN_NETBOOT","KERN_NGROUPS","KERN_NISDOMAINNAME","KERN_NODE_DOWN","KERN_NOT_DEPRESSED","KERN_NOT_IN_SET","KERN_NOT_RECEIVER","KERN_NOT_SUPPORTED","KERN_NOT_WAITING","KERN_NO_ACCESS","KERN_NO_SPACE","KERN_NTP_PLL","KERN_NX_PROTECTION","KERN_OPENEVT_PROC","KERN_OPERATION_TIMED_OUT","KERN_OSRELDATE","KERN_OSRELEASE","KERN_OSREV","KERN_OSTYPE","KERN_OSVERSION","KERN_POLICY_LIMIT","KERN_POLICY_STATIC","KERN_POSIX","KERN_POSIX1","KERN_PROC","KERN_PROCARGS","KERN_PROCARGS2","KERN_PROCDELAYTERM","KERN_PROCNAME","KERN_PROC_ALL","KERN_PROC_LCID","KERN_PROC_PGRP","KERN_PROC_PID","KERN_PROC_RUID","KERN_PROC_SESSION","KERN_PROC_TTY","KERN_PROC_UID","KERN_PROF","KERN_PROTECTION_FAILURE","KERN_PS_STRINGS","KERN_RAGEVNODE","KERN_RAGE_PROC","KERN_RAGE_THREAD","KERN_RESOURCE_SHORTAGE","KERN_RIGHT_EXISTS","KERN_RPC_CONTINUE_ORPHAN","KERN_RPC_SERVER_TERMINATED","KERN_RPC_TERMINATE_ORPHAN","KERN_SAFEBOOT","KERN_SAVED_IDS","KERN_SECURELVL","KERN_SEMAPHORE_DESTROYED","KERN_SHREG_PRIVATIZABLE","KERN_SPECULATIVE_READS","KERN_SUCCESS","KERN_SUGID_COREDUMP","KERN_SYMFILE","KERN_SYSV","KERN_TERMINATED","KERN_TFP","KERN_TFP_POLICY","KERN_TFP_POLICY_DEFAULT","KERN_TFP_POLICY_DENY","KERN_THALTSTACK","KERN_THREADNAME","KERN_TRANSLATE","KERN_TTY","KERN_UNOPENEVT_PROC","KERN_UNRAGE_PROC","KERN_UNRAGE_THREAD","KERN_UPDATEINTERVAL","KERN_UREFS_OVERFLOW","KERN_USRSTACK32","KERN_USRSTACK64","KERN_VERSION","KERN_VNODE","KIPC_MAXSOCKBUF","KIPC_MAX_DATALEN","KIPC_MAX_HDR","KIPC_MAX_LINKHDR","KIPC_MAX_PROTOHDR","KIPC_MBSTAT","KIPC_NMBCLUSTERS","KIPC_SOCKBUF_WASTE","KIPC_SOMAXCONN","KIPC_SOQLIMITCOMPAT","LC_ALL","LC_ALL_MASK","LC_COLLATE","LC_COLLATE_MASK","LC_CTYPE","LC_CTYPE_MASK","LC_MESSAGES","LC_MESSAGES_MASK","LC_MONETARY","LC_MONETARY_MASK","LC_NUMERIC","LC_NUMERIC_MASK","LC_SEGMENT","LC_SEGMENT_64","LC_TIME","LC_TIME_MASK","LIO_NOP","LIO_NOWAIT","LIO_READ","LIO_WAIT","LIO_WRITE","LOCAL_PEERCRED","LOCAL_PEEREPID","LOCAL_PEEREUUID","LOCAL_PEERPID","LOCAL_PEERUUID","LOCK_EX","LOCK_NB","LOCK_SH","LOCK_UN","LOGIN_PROCESS","LOG_ALERT","LOG_AUTH","LOG_AUTHPRIV","LOG_CONS","LOG_CRIT","LOG_CRON","LOG_DAEMON","LOG_DEBUG","LOG_EMERG","LOG_ERR","LOG_FACMASK","LOG_FTP","LOG_INFO","LOG_INSTALL","LOG_KERN","LOG_LAUNCHD","LOG_LOCAL0","LOG_LOCAL1","LOG_LOCAL2","LOG_LOCAL3","LOG_LOCAL4","LOG_LOCAL5","LOG_LOCAL6","LOG_LOCAL7","LOG_LPR","LOG_MAIL","LOG_NDELAY","LOG_NETINFO","LOG_NEWS","LOG_NFACILITIES","LOG_NOTICE","LOG_NOWAIT","LOG_ODELAY","LOG_PERROR","LOG_PID","LOG_PRIMASK","LOG_RAS","LOG_REMOTEAUTH","LOG_SYSLOG","LOG_USER","LOG_UUCP","LOG_WARNING","L_tmpnam","MACH_PORT_NULL","MACH_TASK_BASIC_INFO","MACH_TASK_BASIC_INFO_COUNT","MADV_CAN_REUSE","MADV_DONTNEED","MADV_FREE","MADV_FREE_REUSABLE","MADV_FREE_REUSE","MADV_NORMAL","MADV_RANDOM","MADV_SEQUENTIAL","MADV_WILLNEED","MADV_ZERO_WIRED_PAGES","MAP_ANON","MAP_ANONYMOUS","MAP_COPY","MAP_FAILED","MAP_FILE","MAP_FIXED","MAP_HASSEMAPHORE","MAP_JIT","MAP_NOCACHE","MAP_NOEXTEND","MAP_NORESERVE","MAP_PRIVATE","MAP_RENAME","MAP_SHARED","MAXCOMLEN","MAXFREQ","MAXPATHLEN","MAXPHASE","MAXSEC","MAXTC","MAXTHREADNAMESIZE","MCL_CURRENT","MCL_FUTURE","MDMBUF","MEMORY_OBJECT_NULL","MH_MAGIC","MH_MAGIC_64","MINCORE_INCORE","MINCORE_MODIFIED","MINCORE_MODIFIED_OTHER","MINCORE_REFERENCED","MINCORE_REFERENCED_OTHER","MINSEC","MINSIGSTKSZ","MNT_ASYNC","MNT_AUTOMOUNTED","MNT_CPROTECT","MNT_DEFWRITE","MNT_DONTBROWSE","MNT_DOVOLFS","MNT_EXPORTED","MNT_FORCE","MNT_IGNORE_OWNERSHIP","MNT_JOURNALED","MNT_LOCAL","MNT_MULTILABEL","MNT_NOATIME","MNT_NOBLOCK","MNT_NODEV","MNT_NOEXEC","MNT_NOSUID","MNT_NOUSERXATTR","MNT_NOWAIT","MNT_QUARANTINE","MNT_QUOTA","MNT_RDONLY","MNT_RELOAD","MNT_ROOTFS","MNT_SNAPSHOT","MNT_SYNCHRONOUS","MNT_UNION","MNT_UPDATE","MNT_WAIT","MOD_CLKA","MOD_CLKB","MOD_ESTERROR","MOD_FREQUENCY","MOD_MAXERROR","MOD_MICRO","MOD_NANO","MOD_OFFSET","MOD_PPSMAX","MOD_STATUS","MOD_TAI","MOD_TIMECONST","MON_1","MON_10","MON_11","MON_12","MON_2","MON_3","MON_4","MON_5","MON_6","MON_7","MON_8","MON_9","MSG_CTRUNC","MSG_DONTROUTE","MSG_DONTWAIT","MSG_EOF","MSG_EOR","MSG_FLUSH","MSG_HAVEMORE","MSG_HOLD","MSG_OOB","MSG_PEEK","MSG_RCVMORE","MSG_SEND","MSG_TRUNC","MSG_WAITALL","MS_ASYNC","MS_DEACTIVATE","MS_INVALIDATE","MS_KILLPAGES","MS_SYNC","NANOSECOND","NCCS","NET_RT_DUMP","NET_RT_FLAGS","NET_RT_IFLIST","NET_RT_IFLIST2","NEW_TIME","NI_DGRAM","NI_MAXHOST","NI_MAXSERV","NI_NAMEREQD","NI_NOFQDN","NI_NUMERICHOST","NI_NUMERICSCOPE","NI_NUMERICSERV","NL0","NL1","NLDLY","NOEXPR","NOFLSH","NOKERNINFO","NOSTR","NOTE_ABSOLUTE","NOTE_ATTRIB","NOTE_BACKGROUND","NOTE_CHILD","NOTE_CRITICAL","NOTE_DELETE","NOTE_EXEC","NOTE_EXIT","NOTE_EXITSTATUS","NOTE_EXIT_CSERROR","NOTE_EXIT_DECRYPTFAIL","NOTE_EXIT_DETAIL","NOTE_EXIT_DETAIL_MASK","NOTE_EXIT_MEMORY","NOTE_EXTEND","NOTE_FFAND","NOTE_FFCOPY","NOTE_FFCTRLMASK","NOTE_FFLAGSMASK","NOTE_FFNOP","NOTE_FFOR","NOTE_FORK","NOTE_LEEWAY","NOTE_LINK","NOTE_LOWAT","NOTE_NONE","NOTE_NSECONDS","NOTE_PCTRLMASK","NOTE_PDATAMASK","NOTE_RENAME","NOTE_REVOKE","NOTE_SECONDS","NOTE_SIGNAL","NOTE_TRACK","NOTE_TRACKERR","NOTE_TRIGGER","NOTE_USECONDS","NOTE_VM_ERROR","NOTE_VM_PRESSURE","NOTE_VM_PRESSURE_SUDDEN_TERMINATE","NOTE_VM_PRESSURE_TERMINATE","NOTE_WRITE","NTP_API","OCRNL","OFDEL","OFILL","OLD_TIME","ONLCR","ONLRET","ONOCR","ONOEOT","OPOST","OXTABS","O_ACCMODE","O_APPEND","O_ASYNC","O_CLOEXEC","O_CREAT","O_DIRECTORY","O_DSYNC","O_EXCL","O_EXLOCK","O_FSYNC","O_NDELAY","O_NOCTTY","O_NOFOLLOW","O_NONBLOCK","O_RDONLY","O_RDWR","O_SHLOCK","O_SYMLINK","O_SYNC","O_TRUNC","O_WRONLY","PARENB","PARMRK","PARODD","PATH_MAX","PENDIN","PF_APPLETALK","PF_CCITT","PF_CHAOS","PF_CNT","PF_COIP","PF_DATAKIT","PF_DECnet","PF_DLI","PF_ECMA","PF_HYLINK","PF_IMPLINK","PF_INET","PF_INET6","PF_IPX","PF_ISDN","PF_ISO","PF_KEY","PF_LAT","PF_LINK","PF_LOCAL","PF_NATM","PF_NDRV","PF_NETBIOS","PF_NS","PF_OSI","PF_PIP","PF_PPP","PF_PUP","PF_ROUTE","PF_RTIP","PF_SIP","PF_SNA","PF_SYSTEM","PF_UNIX","PF_UNSPEC","PF_XTP","PIPE_BUF","PM_STR","POLLERR","POLLHUP","POLLIN","POLLNVAL","POLLOUT","POLLPRI","POLLRDBAND","POLLRDNORM","POLLWRBAND","POLLWRNORM","POSIX_MADV_DONTNEED","POSIX_MADV_NORMAL","POSIX_MADV_RANDOM","POSIX_MADV_SEQUENTIAL","POSIX_MADV_WILLNEED","POSIX_SPAWN_CLOEXEC_DEFAULT","POSIX_SPAWN_RESETIDS","POSIX_SPAWN_SETEXEC","POSIX_SPAWN_SETPGROUP","POSIX_SPAWN_SETSIGDEF","POSIX_SPAWN_SETSIGMASK","POSIX_SPAWN_START_SUSPENDED","PRIO_DARWIN_BG","PRIO_DARWIN_NONUI","PRIO_DARWIN_PROCESS","PRIO_DARWIN_THREAD","PRIO_MAX","PRIO_MIN","PRIO_PGRP","PRIO_PROCESS","PRIO_USER","PROCESSOR_BASIC_INFO","PROCESSOR_CPU_LOAD_INFO","PROCESSOR_PM_REGS_INFO","PROCESSOR_SET_BASIC_INFO","PROCESSOR_SET_LOAD_INFO","PROCESSOR_TEMPERATURE","PROC_CSM_ALL","PROC_CSM_NOSMT","PROC_CSM_TECS","PROC_PIDPATHINFO_MAXSIZE","PROC_PIDTASKALLINFO","PROC_PIDTASKINFO","PROC_PIDTBSDINFO","PROC_PIDTHREADINFO","PROC_PIDVNODEPATHINFO","PROT_EXEC","PROT_NONE","PROT_READ","PROT_WRITE","PTHREAD_COND_INITIALIZER","PTHREAD_CREATE_DETACHED","PTHREAD_CREATE_JOINABLE","PTHREAD_INTROSPECTION_THREAD_CREATE","PTHREAD_INTROSPECTION_THREAD_DESTROY","PTHREAD_INTROSPECTION_THREAD_START","PTHREAD_INTROSPECTION_THREAD_TERMINATE","PTHREAD_MUTEX_DEFAULT","PTHREAD_MUTEX_ERRORCHECK","PTHREAD_MUTEX_INITIALIZER","PTHREAD_MUTEX_NORMAL","PTHREAD_MUTEX_RECURSIVE","PTHREAD_PROCESS_PRIVATE","PTHREAD_PROCESS_SHARED","PTHREAD_RWLOCK_INITIALIZER","PTHREAD_STACK_MIN","PT_ATTACH","PT_ATTACHEXC","PT_CONTINUE","PT_DENY_ATTACH","PT_DETACH","PT_FIRSTMACH","PT_FORCEQUOTA","PT_KILL","PT_READ_D","PT_READ_I","PT_READ_U","PT_SIGEXC","PT_STEP","PT_THUPDATE","PT_TRACE_ME","PT_WRITE_D","PT_WRITE_I","PT_WRITE_U","P_ALL","P_PGID","P_PID","QCMD","QOS_CLASS_BACKGROUND","QOS_CLASS_DEFAULT","QOS_CLASS_UNSPECIFIED","QOS_CLASS_USER_INITIATED","QOS_CLASS_USER_INTERACTIVE","QOS_CLASS_UTILITY","Q_GETQUOTA","Q_QUOTAOFF","Q_QUOTAON","Q_SETQUOTA","Q_SYNC","RADIXCHAR","RAND_MAX","REG_ASSERT","REG_ATOI","REG_BACKR","REG_BADBR","REG_BADPAT","REG_BADRPT","REG_BASIC","REG_DUMP","REG_EBRACE","REG_EBRACK","REG_ECOLLATE","REG_ECTYPE","REG_EESCAPE","REG_EMPTY","REG_EPAREN","REG_ERANGE","REG_ESPACE","REG_ESUBREG","REG_EXTENDED","REG_ICASE","REG_INVARG","REG_ITOA","REG_LARGE","REG_NEWLINE","REG_NOMATCH","REG_NOSPEC","REG_NOSUB","REG_NOTBOL","REG_NOTEOL","REG_PEND","REG_STARTEND","REG_TRACE","RENAME_EXCL","RENAME_SWAP","RLIMIT_AS","RLIMIT_CORE","RLIMIT_CPU","RLIMIT_DATA","RLIMIT_FSIZE","RLIMIT_MEMLOCK","RLIMIT_NOFILE","RLIMIT_NPROC","RLIMIT_RSS","RLIMIT_STACK","RLIM_INFINITY","RLIM_NLIMITS","RTAX_AUTHOR","RTAX_BRD","RTAX_DST","RTAX_GATEWAY","RTAX_GENMASK","RTAX_IFA","RTAX_IFP","RTAX_MAX","RTAX_NETMASK","RTA_AUTHOR","RTA_BRD","RTA_DST","RTA_GATEWAY","RTA_GENMASK","RTA_IFA","RTA_IFP","RTA_NETMASK","RTF_BLACKHOLE","RTF_BROADCAST","RTF_CLONING","RTF_CONDEMNED","RTF_DEAD","RTF_DELCLONE","RTF_DONE","RTF_DYNAMIC","RTF_GATEWAY","RTF_GLOBAL","RTF_HOST","RTF_IFREF","RTF_IFSCOPE","RTF_LLINFO","RTF_LOCAL","RTF_MODIFIED","RTF_MULTICAST","RTF_NOIFREF","RTF_PINNED","RTF_PRCLONING","RTF_PROTO1","RTF_PROTO2","RTF_PROTO3","RTF_PROXY","RTF_REJECT","RTF_ROUTER","RTF_STATIC","RTF_UP","RTF_WASCLONED","RTF_XRESOLVE","RTLD_DEFAULT","RTLD_FIRST","RTLD_GLOBAL","RTLD_LAZY","RTLD_LOCAL","RTLD_NEXT","RTLD_NODELETE","RTLD_NOLOAD","RTLD_NOW","RTLD_SELF","RTM_ADD","RTM_CHANGE","RTM_DELADDR","RTM_DELETE","RTM_DELMADDR","RTM_GET","RTM_GET2","RTM_IFINFO","RTM_IFINFO2","RTM_LOCK","RTM_LOSING","RTM_MISS","RTM_NEWADDR","RTM_NEWMADDR","RTM_NEWMADDR2","RTM_OLDADD","RTM_OLDDEL","RTM_REDIRECT","RTM_RESOLVE","RTM_VERSION","RTV_EXPIRE","RTV_HOPCOUNT","RTV_MTU","RTV_RPIPE","RTV_RTT","RTV_RTTVAR","RTV_SPIPE","RTV_SSTHRESH","RUN_LVL","RUSAGE_CHILDREN","RUSAGE_INFO_V0","RUSAGE_INFO_V1","RUSAGE_INFO_V2","RUSAGE_INFO_V3","RUSAGE_INFO_V4","RUSAGE_SELF","R_OK","SAE_ASSOCID_ALL","SAE_ASSOCID_ANY","SAE_CONNID_ALL","SAE_CONNID_ANY","SA_NOCLDSTOP","SA_NOCLDWAIT","SA_NODEFER","SA_ONSTACK","SA_RESETHAND","SA_RESTART","SA_SIGINFO","SCALE_PPM","SCHED_FIFO","SCHED_OTHER","SCHED_RR","SCM_CREDS","SCM_RIGHTS","SCM_TIMESTAMP","SEEK_CUR","SEEK_END","SEEK_SET","SEM_FAILED","SEM_UNDO","SETALL","SETVAL","SF_APPEND","SF_ARCHIVED","SF_IMMUTABLE","SF_SETTABLE","SHMLBA","SHM_R","SHM_RDONLY","SHM_RND","SHM_W","SHUTDOWN_TIME","SHUT_RD","SHUT_RDWR","SHUT_WR","SIGABRT","SIGALRM","SIGBUS","SIGCHLD","SIGCONT","SIGEMT","SIGEV_NONE","SIGEV_SIGNAL","SIGEV_THREAD","SIGFPE","SIGHUP","SIGILL","SIGINFO","SIGINT","SIGIO","SIGIOT","SIGKILL","SIGNATURE","SIGPIPE","SIGPROF","SIGQUIT","SIGSEGV","SIGSTKSZ","SIGSTOP","SIGSYS","SIGTERM","SIGTRAP","SIGTSTP","SIGTTIN","SIGTTOU","SIGURG","SIGUSR1","SIGUSR2","SIGVTALRM","SIGWINCH","SIGXCPU","SIGXFSZ","SIG_BLOCK","SIG_DFL","SIG_ERR","SIG_IGN","SIG_SETMASK","SIG_UNBLOCK","SIOCGIFADDR","SOCK_DGRAM","SOCK_MAXADDRLEN","SOCK_RAW","SOCK_RDM","SOCK_SEQPACKET","SOCK_STREAM","SOL_LOCAL","SOL_SOCKET","SOMAXCONN","SO_ACCEPTCONN","SO_BROADCAST","SO_DEBUG","SO_DONTROUTE","SO_DONTTRUNC","SO_ERROR","SO_KEEPALIVE","SO_LABEL","SO_LINGER","SO_LINGER_SEC","SO_NKE","SO_NOADDRERR","SO_NOSIGPIPE","SO_NOTIFYCONFLICT","SO_NP_EXTENSIONS","SO_NREAD","SO_NWRITE","SO_OOBINLINE","SO_PEERLABEL","SO_RANDOMPORT","SO_RCVBUF","SO_RCVLOWAT","SO_RCVTIMEO","SO_REUSEADDR","SO_REUSEPORT","SO_REUSESHAREUID","SO_SNDBUF","SO_SNDLOWAT","SO_SNDTIMEO","SO_TIMESTAMP","SO_TIMESTAMP_MONOTONIC","SO_TYPE","SO_USELOOPBACK","SO_WANTMORE","SO_WANTOOBFLAG","SS_DISABLE","SS_ONSTACK","STA_CLK","STA_CLOCKERR","STA_DEL","STA_FLL","STA_FREQHOLD","STA_INS","STA_MODE","STA_NANO","STA_PLL","STA_PPSERROR","STA_PPSFREQ","STA_PPSJITTER","STA_PPSSIGNAL","STA_PPSTIME","STA_PPSWANDER","STA_RONLY","STA_UNSYNC","STDERR_FILENO","STDIN_FILENO","STDOUT_FILENO","ST_NOSUID","ST_RDONLY","SUPERPAGE_NONE","SUPERPAGE_SIZE_2MB","SUPERPAGE_SIZE_ANY","SYSDIR_DIRECTORY_ADMIN_APPLICATION","SYSDIR_DIRECTORY_ALL_APPLICATIONS","SYSDIR_DIRECTORY_ALL_LIBRARIES","SYSDIR_DIRECTORY_APPLICATION","SYSDIR_DIRECTORY_APPLICATION_SUPPORT","SYSDIR_DIRECTORY_AUTOSAVED_INFORMATION","SYSDIR_DIRECTORY_CACHES","SYSDIR_DIRECTORY_CORESERVICE","SYSDIR_DIRECTORY_DEMO_APPLICATION","SYSDIR_DIRECTORY_DESKTOP","SYSDIR_DIRECTORY_DEVELOPER","SYSDIR_DIRECTORY_DEVELOPER_APPLICATION","SYSDIR_DIRECTORY_DOCUMENT","SYSDIR_DIRECTORY_DOCUMENTATION","SYSDIR_DIRECTORY_DOWNLOADS","SYSDIR_DIRECTORY_INPUT_METHODS","SYSDIR_DIRECTORY_LIBRARY","SYSDIR_DIRECTORY_MOVIES","SYSDIR_DIRECTORY_MUSIC","SYSDIR_DIRECTORY_PICTURES","SYSDIR_DIRECTORY_PREFERENCE_PANES","SYSDIR_DIRECTORY_PRINTER_DESCRIPTION","SYSDIR_DIRECTORY_SHARED_PUBLIC","SYSDIR_DIRECTORY_USER","SYSDIR_DOMAIN_MASK_ALL","SYSDIR_DOMAIN_MASK_LOCAL","SYSDIR_DOMAIN_MASK_NETWORK","SYSDIR_DOMAIN_MASK_SYSTEM","SYSDIR_DOMAIN_MASK_USER","SYSPROTO_CONTROL","SYSPROTO_EVENT","S_IEXEC","S_IFBLK","S_IFCHR","S_IFDIR","S_IFIFO","S_IFLNK","S_IFMT","S_IFREG","S_IFSOCK","S_IREAD","S_IRGRP","S_IROTH","S_IRUSR","S_IRWXG","S_IRWXO","S_IRWXU","S_ISGID","S_ISUID","S_ISVTX","S_IWGRP","S_IWOTH","S_IWRITE","S_IWUSR","S_IXGRP","S_IXOTH","S_IXUSR","TAB0","TAB1","TAB2","TAB3","TABDLY","TASK_THREAD_TIMES_INFO","TASK_THREAD_TIMES_INFO_COUNT","TCIFLUSH","TCIOFF","TCIOFLUSH","TCION","TCOFLUSH","TCOOFF","TCOON","TCP_FASTOPEN","TCP_KEEPALIVE","TCP_KEEPCNT","TCP_KEEPINTVL","TCP_MAXSEG","TCP_NODELAY","TCP_NOOPT","TCP_NOPUSH","TCSADRAIN","TCSAFLUSH","TCSANOW","THOUSEP","THREAD_AFFINITY_POLICY","THREAD_AFFINITY_POLICY_COUNT","THREAD_AFFINITY_TAG_NULL","THREAD_BACKGROUND_POLICY","THREAD_BACKGROUND_POLICY_COUNT","THREAD_BACKGROUND_POLICY_DARWIN_BG","THREAD_BASIC_INFO","THREAD_BASIC_INFO_COUNT","THREAD_EXTENDED_INFO","THREAD_EXTENDED_INFO_COUNT","THREAD_EXTENDED_POLICY","THREAD_EXTENDED_POLICY_COUNT","THREAD_IDENTIFIER_INFO","THREAD_IDENTIFIER_INFO_COUNT","THREAD_LATENCY_QOS_POLICY","THREAD_LATENCY_QOS_POLICY_COUNT","THREAD_PRECEDENCE_POLICY","THREAD_PRECEDENCE_POLICY_COUNT","THREAD_STANDARD_POLICY","THREAD_STANDARD_POLICY_COUNT","THREAD_THROUGHPUT_QOS_POLICY","THREAD_THROUGHPUT_QOS_POLICY_COUNT","THREAD_TIME_CONSTRAINT_POLICY","THREAD_TIME_CONSTRAINT_POLICY_COUNT","TH_FLAGS_GLOBAL_FORCED_IDLE","TH_FLAGS_IDLE","TH_FLAGS_SWAPPED","TH_STATE_HALTED","TH_STATE_RUNNING","TH_STATE_STOPPED","TH_STATE_UNINTERRUPTIBLE","TH_STATE_WAITING","TIME_DEL","TIME_ERROR","TIME_INS","TIME_OK","TIME_OOP","TIME_WAIT","TIOCCBRK","TIOCCDTR","TIOCCONS","TIOCDCDTIMESTAMP","TIOCDRAIN","TIOCDSIMICROCODE","TIOCEXCL","TIOCEXT","TIOCFLUSH","TIOCGDRAINWAIT","TIOCGETD","TIOCGPGRP","TIOCGWINSZ","TIOCIXOFF","TIOCIXON","TIOCMBIC","TIOCMBIS","TIOCMGDTRWAIT","TIOCMGET","TIOCMODG","TIOCMODS","TIOCMSDTRWAIT","TIOCMSET","TIOCM_CAR","TIOCM_CD","TIOCM_CTS","TIOCM_DSR","TIOCM_DTR","TIOCM_LE","TIOCM_RI","TIOCM_RNG","TIOCM_RTS","TIOCM_SR","TIOCM_ST","TIOCNOTTY","TIOCNXCL","TIOCOUTQ","TIOCPKT","TIOCPKT_DATA","TIOCPKT_DOSTOP","TIOCPKT_FLUSHREAD","TIOCPKT_FLUSHWRITE","TIOCPKT_IOCTL","TIOCPKT_NOSTOP","TIOCPKT_START","TIOCPKT_STOP","TIOCPTYGNAME","TIOCPTYGRANT","TIOCPTYUNLK","TIOCREMOTE","TIOCSBRK","TIOCSCONS","TIOCSCTTY","TIOCSDRAINWAIT","TIOCSDTR","TIOCSETD","TIOCSIG","TIOCSPGRP","TIOCSTART","TIOCSTAT","TIOCSTI","TIOCSTOP","TIOCSWINSZ","TIOCTIMESTAMP","TIOCUCNTL","TMP_MAX","TOSTOP","T_FMT","T_FMT_AMPM","UF_APPEND","UF_COMPRESSED","UF_HIDDEN","UF_IMMUTABLE","UF_NODUMP","UF_OPAQUE","UF_SETTABLE","UF_TRACKED","USER_BC_BASE_MAX","USER_BC_DIM_MAX","USER_BC_SCALE_MAX","USER_BC_STRING_MAX","USER_COLL_WEIGHTS_MAX","USER_CS_PATH","USER_EXPR_NEST_MAX","USER_LINE_MAX","USER_MAXID","USER_POSIX2_CHAR_TERM","USER_POSIX2_C_BIND","USER_POSIX2_C_DEV","USER_POSIX2_FORT_DEV","USER_POSIX2_FORT_RUN","USER_POSIX2_LOCALEDEF","USER_POSIX2_SW_DEV","USER_POSIX2_UPE","USER_POSIX2_VERSION","USER_PROCESS","USER_RE_DUP_MAX","USER_STREAM_MAX","USER_TZNAME_MAX","USRQUOTA","UTIME_NOW","UTIME_OMIT","UTUN_OPT_FLAGS","UTUN_OPT_IFNAME","VDISCARD","VDSUSP","VEOF","VEOL","VEOL2","VERASE","VINTR","VKILL","VLNEXT","VMIN","VM_FLAGS_ALIAS_MASK","VM_FLAGS_ANYWHERE","VM_FLAGS_FIXED","VM_FLAGS_NO_CACHE","VM_FLAGS_OVERWRITE","VM_FLAGS_PURGABLE","VM_FLAGS_RANDOM_ADDR","VM_FLAGS_RESILIENT_CODESIGN","VM_FLAGS_RESILIENT_MEDIA","VM_FLAGS_RETURN_4K_DATA_ADDR","VM_FLAGS_RETURN_DATA_ADDR","VM_FLAGS_SUPERPAGE_MASK","VM_FLAGS_SUPERPAGE_NONE","VM_FLAGS_SUPERPAGE_SHIFT","VM_FLAGS_SUPERPAGE_SIZE_2MB","VM_FLAGS_SUPERPAGE_SIZE_ANY","VM_FLAGS_USER_ALLOCATE","VM_FLAGS_USER_MAP","VM_FLAGS_USER_REMAP","VM_LOADAVG","VM_MACHFACTOR","VM_MAKE_TAG","VM_MAXID","VM_MEMORY_ACCELERATE","VM_MEMORY_ANALYSIS_TOOL","VM_MEMORY_APPKIT","VM_MEMORY_APPLICATION_SPECIFIC_1","VM_MEMORY_APPLICATION_SPECIFIC_16","VM_MEMORY_ASL","VM_MEMORY_ASSETSD","VM_MEMORY_ATS","VM_MEMORY_CARBON","VM_MEMORY_CGIMAGE","VM_MEMORY_COREDATA","VM_MEMORY_COREDATA_OBJECTIDS","VM_MEMORY_COREGRAPHICS","VM_MEMORY_COREGRAPHICS_BACKINGSTORES","VM_MEMORY_COREGRAPHICS_DATA","VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS","VM_MEMORY_COREGRAPHICS_MISC","VM_MEMORY_COREGRAPHICS_SHARED","VM_MEMORY_COREGRAPHICS_XALLOC","VM_MEMORY_COREIMAGE","VM_MEMORY_COREPROFILE","VM_MEMORY_CORESERVICES","VM_MEMORY_COREUI","VM_MEMORY_COREUIFILE","VM_MEMORY_CORPSEINFO","VM_MEMORY_DHMM","VM_MEMORY_DYLD","VM_MEMORY_DYLD_MALLOC","VM_MEMORY_DYLIB","VM_MEMORY_FOUNDATION","VM_MEMORY_GENEALOGY","VM_MEMORY_GLSL","VM_MEMORY_GUARD","VM_MEMORY_IMAGEIO","VM_MEMORY_IOKIT","VM_MEMORY_JAVA","VM_MEMORY_JAVASCRIPT_CORE","VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR","VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE","VM_MEMORY_LAYERKIT","VM_MEMORY_LIBDISPATCH","VM_MEMORY_MACH_MSG","VM_MEMORY_MALLOC","VM_MEMORY_MALLOC_HUGE","VM_MEMORY_MALLOC_LARGE","VM_MEMORY_MALLOC_LARGE_REUSABLE","VM_MEMORY_MALLOC_LARGE_REUSED","VM_MEMORY_MALLOC_NANO","VM_MEMORY_MALLOC_SMALL","VM_MEMORY_MALLOC_TINY","VM_MEMORY_OBJC_DISPATCHERS","VM_MEMORY_OPENCL","VM_MEMORY_OS_ALLOC_ONCE","VM_MEMORY_RAWCAMERA","VM_MEMORY_REALLOC","VM_MEMORY_SBRK","VM_MEMORY_SCENEKIT","VM_MEMORY_SHARED_PMAP","VM_MEMORY_SKYWALK","VM_MEMORY_SQLITE","VM_MEMORY_STACK","VM_MEMORY_SWIFT_METADATA","VM_MEMORY_SWIFT_RUNTIME","VM_MEMORY_TCMALLOC","VM_MEMORY_UNSHARED_PMAP","VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS","VM_METER","VM_PAGE_QUERY_PAGE_COPIED","VM_PAGE_QUERY_PAGE_CS_NX","VM_PAGE_QUERY_PAGE_CS_TAINTED","VM_PAGE_QUERY_PAGE_CS_VALIDATED","VM_PAGE_QUERY_PAGE_DIRTY","VM_PAGE_QUERY_PAGE_EXTERNAL","VM_PAGE_QUERY_PAGE_FICTITIOUS","VM_PAGE_QUERY_PAGE_PAGED_OUT","VM_PAGE_QUERY_PAGE_PRESENT","VM_PAGE_QUERY_PAGE_REF","VM_PAGE_QUERY_PAGE_SPECULATIVE","VM_PROT_EXECUTE","VM_PROT_NONE","VM_PROT_READ","VM_PROT_WRITE","VM_SWAPUSAGE","VQUIT","VREPRINT","VSTART","VSTATUS","VSTOP","VSUSP","VT0","VT1","VTDLY","VTIME","VWERASE","WCONTINUED","WCOREDUMP","WEXITED","WEXITSTATUS","WIFCONTINUED","WIFEXITED","WIFSIGNALED","WIFSTOPPED","WNOHANG","WNOWAIT","WSTOPPED","WSTOPSIG","WTERMSIG","WUNTRACED","W_OK","XATTR_CREATE","XATTR_NODEFAULT","XATTR_NOFOLLOW","XATTR_NOSECURITY","XATTR_REPLACE","XATTR_SHOWCOMPRESSION","XUCRED_VERSION","X_OK","YESEXPR","YESSTR","_IOFBF","_IOLBF","_IONBF","_NSGetEnviron","_NSGetExecutablePath","_PC_CHOWN_RESTRICTED","_PC_LINK_MAX","_PC_MAX_CANON","_PC_MAX_INPUT","_PC_NAME_MAX","_PC_NO_TRUNC","_PC_PATH_MAX","_PC_PIPE_BUF","_PC_VDISABLE","_POSIX_VDISABLE","_PTHREAD_COND_SIG_init","_PTHREAD_MUTEX_SIG_init","_PTHREAD_RWLOCK_SIG_init","_RLIMIT_POSIX_FLAG","_SC_2_CHAR_TERM","_SC_2_C_BIND","_SC_2_C_DEV","_SC_2_FORT_DEV","_SC_2_FORT_RUN","_SC_2_LOCALEDEF","_SC_2_PBS","_SC_2_PBS_ACCOUNTING","_SC_2_PBS_CHECKPOINT","_SC_2_PBS_LOCATE","_SC_2_PBS_MESSAGE","_SC_2_PBS_TRACK","_SC_2_SW_DEV","_SC_2_UPE","_SC_2_VERSION","_SC_ADVISORY_INFO","_SC_AIO_LISTIO_MAX","_SC_AIO_MAX","_SC_AIO_PRIO_DELTA_MAX","_SC_ARG_MAX","_SC_ASYNCHRONOUS_IO","_SC_ATEXIT_MAX","_SC_BARRIERS","_SC_BC_BASE_MAX","_SC_BC_DIM_MAX","_SC_BC_SCALE_MAX","_SC_BC_STRING_MAX","_SC_CHILD_MAX","_SC_CLK_TCK","_SC_CLOCK_SELECTION","_SC_COLL_WEIGHTS_MAX","_SC_CPUTIME","_SC_DELAYTIMER_MAX","_SC_EXPR_NEST_MAX","_SC_FILE_LOCKING","_SC_FSYNC","_SC_GETGR_R_SIZE_MAX","_SC_GETPW_R_SIZE_MAX","_SC_HOST_NAME_MAX","_SC_IOV_MAX","_SC_IPV6","_SC_JOB_CONTROL","_SC_LINE_MAX","_SC_LOGIN_NAME_MAX","_SC_MAPPED_FILES","_SC_MEMLOCK","_SC_MEMLOCK_RANGE","_SC_MEMORY_PROTECTION","_SC_MESSAGE_PASSING","_SC_MONOTONIC_CLOCK","_SC_MQ_OPEN_MAX","_SC_MQ_PRIO_MAX","_SC_NGROUPS_MAX","_SC_NPROCESSORS_CONF","_SC_NPROCESSORS_ONLN","_SC_OPEN_MAX","_SC_PAGESIZE","_SC_PAGE_SIZE","_SC_PASS_MAX","_SC_PHYS_PAGES","_SC_PRIORITIZED_IO","_SC_PRIORITY_SCHEDULING","_SC_RAW_SOCKETS","_SC_READER_WRITER_LOCKS","_SC_REALTIME_SIGNALS","_SC_REGEXP","_SC_RE_DUP_MAX","_SC_RTSIG_MAX","_SC_SAVED_IDS","_SC_SEMAPHORES","_SC_SEM_NSEMS_MAX","_SC_SEM_VALUE_MAX","_SC_SHARED_MEMORY_OBJECTS","_SC_SHELL","_SC_SIGQUEUE_MAX","_SC_SPAWN","_SC_SPIN_LOCKS","_SC_SPORADIC_SERVER","_SC_SS_REPL_MAX","_SC_STREAM_MAX","_SC_SYMLOOP_MAX","_SC_SYNCHRONIZED_IO","_SC_THREADS","_SC_THREAD_ATTR_STACKADDR","_SC_THREAD_ATTR_STACKSIZE","_SC_THREAD_CPUTIME","_SC_THREAD_DESTRUCTOR_ITERATIONS","_SC_THREAD_KEYS_MAX","_SC_THREAD_PRIORITY_SCHEDULING","_SC_THREAD_PRIO_INHERIT","_SC_THREAD_PRIO_PROTECT","_SC_THREAD_PROCESS_SHARED","_SC_THREAD_SAFE_FUNCTIONS","_SC_THREAD_SPORADIC_SERVER","_SC_THREAD_STACK_MIN","_SC_THREAD_THREADS_MAX","_SC_TIMEOUTS","_SC_TIMERS","_SC_TIMER_MAX","_SC_TRACE","_SC_TRACE_EVENT_FILTER","_SC_TRACE_EVENT_NAME_MAX","_SC_TRACE_INHERIT","_SC_TRACE_LOG","_SC_TRACE_NAME_MAX","_SC_TRACE_SYS_MAX","_SC_TRACE_USER_EVENT_MAX","_SC_TTY_NAME_MAX","_SC_TYPED_MEMORY_OBJECTS","_SC_TZNAME_MAX","_SC_V6_ILP32_OFF32","_SC_V6_ILP32_OFFBIG","_SC_V6_LP64_OFF64","_SC_V6_LPBIG_OFFBIG","_SC_VERSION","_SC_XBS5_ILP32_OFF32","_SC_XBS5_ILP32_OFFBIG","_SC_XBS5_LP64_OFF64","_SC_XBS5_LPBIG_OFFBIG","_SC_XOPEN_CRYPT","_SC_XOPEN_ENH_I18N","_SC_XOPEN_LEGACY","_SC_XOPEN_REALTIME","_SC_XOPEN_REALTIME_THREADS","_SC_XOPEN_SHM","_SC_XOPEN_STREAMS","_SC_XOPEN_UNIX","_SC_XOPEN_VERSION","_SC_XOPEN_XCU_VERSION","_UTX_HOSTSIZE","_UTX_IDSIZE","_UTX_LINESIZE","_UTX_USERSIZE","_WSTATUS","_WSTOPPED","__PTHREAD_CONDATTR_SIZE__","__PTHREAD_COND_SIZE__","__PTHREAD_MUTEX_SIZE__","__PTHREAD_RWLOCKATTR_SIZE__","__PTHREAD_RWLOCK_SIZE__","__cpsr","__darwin_arm_exception_state64","__darwin_arm_neon_state64","__darwin_arm_thread_state64","__darwin_mcontext64","__error","__es","__esr","__exception","__far","__fp","__fpcr","__fpsr","__int128","__int128_t","__lr","__ns","__pad","__pc","__sp","__ss","__uint128","__uint128_t","__v","__x","_dyld_get_image_header","_dyld_get_image_name","_dyld_get_image_vmaddr_slide","_dyld_image_count","_exit","_key","_seq","abort","abs","accept","access","acct","actime","active_count","active_count","address","addrinfo","adjtime","affinity_tag","ai_addr","ai_addrlen","ai_canonname","ai_family","ai_flags","ai_next","ai_protocol","ai_socktype","aio_buf","aio_cancel","aio_error","aio_fildes","aio_fsync","aio_lio_opcode","aio_nbytes","aio_offset","aio_read","aio_reqprio","aio_return","aio_sigevent","aio_suspend","aio_write","aiocb","alarm","ar_hln","ar_hrd","ar_op","ar_pln","ar_pro","arc4random","arc4random_buf","arc4random_uniform","arphdr","array","atexit","atof","atoi","backtrace","backtrace_async","backtrace_from_fp","backtrace_image_offsets","backtrace_symbols","backtrace_symbols_fd","bh_caplen","bh_datalen","bh_hdrlen","bh_tstamp","bind","blkcnt_t","blksize_t","blocks_in_use","boolean_t","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bpf_hdr","brk","bsearch","buf","bytes_free","bytes_total","bytes_used","c_cc","c_cflag","c_char","c_double","c_float","c_iflag","c_int","c_ispeed","c_lflag","c_long","c_longlong","c_oflag","c_ospeed","c_schar","c_short","c_uchar","c_uint","c_ulong","c_ulonglong","c_ushort","c_void","calcnt","calloc","cc_t","cfgetispeed","cfgetospeed","cfmakeraw","cfsetispeed","cfsetospeed","cfsetspeed","cgid","chdir","chflags","chmod","chown","chroot","chunks_free","chunks_used","clearerr","clock_getres","clock_gettime","clock_settime","clock_t","clockid_t","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clonefile","clonefileat","close","closedir","closelog","cmd","cmd","cmd","cmdsize","cmdsize","cmdsize","cmsg_len","cmsg_level","cmsg_type","cmsghdr","compressions","compressor_page_count","computation","connect","connectx","constant","constraint","copyfile","copyfile_flags_t","copyfile_state_t","cow_faults","cow_faults","cpu_subtype","cpu_subtype_t","cpu_ticks","cpu_type","cpu_type_t","cpu_usage","cpusubtype","cpusubtype","cputype","cputype","cr_groups","cr_ngroups","cr_uid","cr_version","creat","cuid","currency_symbol","d_ino","d_name","d_namlen","d_reclen","d_seekoff","d_type","data","data","decimal_point","decompressions","default_policy","denom","dev_t","difftime","dirent","dirfd","disconnectx","dispatch_qaddr","dladdr","dlclose","dlerror","dli_fbase","dli_fname","dli_saddr","dli_sname","dlopen","dlsym","dqb_bhardlimit","dqb_bsoftlimit","dqb_btime","dqb_curbytes","dqb_curinodes","dqb_id","dqb_ihardlimit","dqb_isoftlimit","dqb_itime","dqb_spare","dqblk","drand48","dup","dup2","duplocale","e_tdev","e_tpgid","endgrent","endpwent","endservent","endutxent","erand48","errcnt","esterror","esterror","events","exchangedata","execl","execle","execlp","execv","execve","execvp","exit","ext","external_page_count","f_bavail","f_bavail","f_bfree","f_bfree","f_blocks","f_blocks","f_bsize","f_bsize","f_favail","f_ffree","f_ffree","f_files","f_files","f_flag","f_flags","f_frsize","f_fsid","f_fsid","f_fssubtype","f_fstypename","f_iosize","f_mntfromname","f_mntonname","f_namemax","f_owner","f_reserved","f_type","faccessat","faults","faults","fchdir","fchflags","fchmod","fchmodat","fchown","fchownat","fclonefileat","fclose","fcntl","fcopyfile","fd","fd_set","fdopen","fdopendir","feof","ferror","fflags","fflags","fflush","fgetc","fgetpos","fgets","fgetxattr","fileno","fileoff","fileoff","filesize","filesize","filetype","filetype","filter","filter","flags","flags","flags","flags","flags","flags","flags","flistxattr","flock","flock","fmemopen","fmount","fmt","fopen","fork","forkpty","fpathconf","fpos_t","fprintf","fputc","fputs","frac_digits","fread","free","free_count","free_count","freeaddrinfo","freeifaddrs","freelocale","fremovexattr","freopen","freq","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","fsblkcnt_t","fscanf","fseek","fseeko","fsetpos","fsetxattr","fsfilcnt_t","fsid_t","fst_bytesalloc","fst_flags","fst_length","fst_offset","fst_posmode","fstat","fstatat","fstatfs","fstatvfs","fstore_t","fsync","ftell","ftello","ftok","ftruncate","futimens","futimes","fwrite","gai_strerror","getaddrinfo","getchar","getchar_unlocked","getcwd","getdomainname","getdtablesize","getegid","getenv","geteuid","getfsstat","getgid","getgrent","getgrgid","getgrgid_r","getgrnam","getgrnam_r","getgrouplist","getgroups","gethostid","gethostname","gethostuuid","getifaddrs","getitimer","getline","getloadavg","getlogin","getmntinfo","getnameinfo","getopt","getpeereid","getpeername","getpgid","getpgrp","getpid","getppid","getpriority","getprogname","getprotobyname","getprotobynumber","getpwent","getpwnam","getpwnam_r","getpwuid","getpwuid_r","getrlimit","getrusage","getservbyname","getservbyport","getservent","getsid","getsockname","getsockopt","gettimeofday","getuid","getutxent","getutxid","getutxline","getxattr","gid","gid_t","gl_offs","gl_pathc","gl_pathv","glob","glob_t","globfree","gmtime","gmtime_r","gr_gid","gr_mem","gr_name","gr_passwd","grantpt","group","grouping","h_addr_list","h_addrtype","h_aliases","h_length","h_name","hdr_cnt","headers","hits","hits","host_flavor_t","host_info64_t","host_info_t","host_processor_info","host_statistics","host_statistics64","host_t","hostent","hstrerror","iconv","iconv_close","iconv_open","iconv_t","id_t","ident","ident","idtype_t","if_data","if_data64","if_freenameindex","if_index","if_indextoname","if_msghdr","if_msghdr2","if_name","if_nameindex","if_nameindex","if_nametoindex","ifa_addr","ifa_data","ifa_dstaddr","ifa_flags","ifa_name","ifa_netmask","ifa_next","ifaddrs","ifi_addrlen","ifi_addrlen","ifi_baudrate","ifi_baudrate","ifi_collisions","ifi_collisions","ifi_hdrlen","ifi_hdrlen","ifi_hwassist","ifi_ibytes","ifi_ibytes","ifi_ierrors","ifi_ierrors","ifi_imcasts","ifi_imcasts","ifi_ipackets","ifi_ipackets","ifi_iqdrops","ifi_iqdrops","ifi_lastchange","ifi_lastchange","ifi_metric","ifi_metric","ifi_mtu","ifi_mtu","ifi_noproto","ifi_noproto","ifi_obytes","ifi_obytes","ifi_oerrors","ifi_oerrors","ifi_omcasts","ifi_omcasts","ifi_opackets","ifi_opackets","ifi_physical","ifi_physical","ifi_recvquota","ifi_recvquota","ifi_recvtiming","ifi_recvtiming","ifi_reserved1","ifi_reserved2","ifi_type","ifi_type","ifi_typelen","ifi_typelen","ifi_unused1","ifi_unused1","ifi_unused2","ifi_xmitquota","ifi_xmitquota","ifi_xmittiming","ifi_xmittiming","ifm_addrs","ifm_addrs","ifm_data","ifm_data","ifm_flags","ifm_flags","ifm_index","ifm_index","ifm_msglen","ifm_msglen","ifm_snd_drops","ifm_snd_len","ifm_snd_maxlen","ifm_timer","ifm_type","ifm_type","ifm_version","ifm_version","image_offset","importance","imr_address","imr_ifindex","imr_interface","imr_interface","imr_multiaddr","imr_multiaddr","imr_multiaddr","imr_sourceaddr","in6_addr","in6_pktinfo","in_addr","in_addr_t","in_pktinfo","in_port_t","inactive_count","inactive_count","initgroups","initprot","initprot","ino_t","int16_t","int32_t","int64_t","int8_t","int_curr_symbol","int_frac_digits","int_n_cs_precedes","int_n_sep_by_space","int_n_sign_posn","int_p_cs_precedes","int_p_sep_by_space","int_p_sign_posn","integer_t","internal_page_count","intmax_t","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","intptr_t","ioctl","iov_base","iov_len","iovec","ip_mreq","ip_mreq_source","ip_mreqn","ipc_perm","ipi6_addr","ipi6_ifindex","ipi_addr","ipi_ifindex","ipi_spec_dst","ipv6_mreq","ipv6mr_interface","ipv6mr_multiaddr","is_master","isalnum","isalpha","isatty","isblank","iscntrl","isdigit","isgraph","islower","isprint","ispunct","isspace","isupper","isxdigit","it_interval","it_value","itimerval","jitcnt","jitter","jrand48","kCCAlignmentError","kCCBufferTooSmall","kCCCallSequenceError","kCCDecodeError","kCCInvalidKey","kCCKeySizeError","kCCMemoryFailure","kCCOverflow","kCCParamError","kCCRNGFailure","kCCSuccess","kCCUnimplemented","kCCUnspecifiedError","kern_return_t","kevent","kevent","kevent64","kevent64_s","key_t","kill","killpg","kqueue","l2p_contigbytes","l2p_devoffset","l2p_flags","l_len","l_linger","l_onoff","l_pid","l_start","l_type","l_whence","labs","lchown","lcong48","lconv","ledger_array_t","ledger_t","linger","link","linkat","lio_listio","listen","listxattr","load_average","load_command","locale_t","localeconv","localeconv_l","localtime","localtime_r","lockf","log2phys","login_tty","lookups","lookups","lrand48","lseek","lstat","lutimes","mach_absolute_time","mach_factor","mach_header","mach_header_64","mach_host_self","mach_msg_type_number_t","mach_port_t","mach_task_basic_info","mach_task_basic_info_data_t","mach_task_basic_info_t","mach_task_self","mach_task_self_","mach_thread_self","mach_timebase_info","mach_timebase_info","mach_timebase_info_data_t","mach_vm_address_t","mach_vm_map","mach_vm_offset_t","mach_vm_size_t","machine","madvise","magic","magic","malloc","malloc_default_zone","malloc_printf","malloc_statistics_t","malloc_zone_calloc","malloc_zone_check","malloc_zone_free","malloc_zone_from_ptr","malloc_zone_log","malloc_zone_malloc","malloc_zone_print","malloc_zone_print_ptr_info","malloc_zone_realloc","malloc_zone_statistics","malloc_zone_t","malloc_zone_valloc","max_align_t","max_size_in_use","maxerror","maxerror","maxprot","maxprot","mcontext_t","mem_entry_name_port_t","memchr","memcmp","memcpy","memmem","memmove","memory_object_offset_t","memory_object_t","memset","memset_pattern16","memset_pattern4","memset_pattern8","memset_s","microseconds","mincore","mkdir","mkdirat","mkdtemp","mkfifo","mknod","mkstemp","mkstemps","mktime","mlock","mlockall","mmap","mode","mode_t","modes","modtime","mon_decimal_point","mon_grouping","mon_thousands_sep","mount","mprotect","mrand48","msg_control","msg_controllen","msg_flags","msg_iov","msg_iovlen","msg_name","msg_namelen","msghdr","mstats","mstats","msync","munlock","munlockall","munmap","n_cs_precedes","n_sep_by_space","n_sign_posn","nanosleep","natural_t","ncmds","ncmds","negative_sign","newlocale","nfds_t","nice","nl_item","nl_langinfo","nlink_t","no_data","nodename","nrand48","nsects","nsects","ntp_adjtime","ntp_gettime","ntptimeval","numer","off_t","offset","offset","open","open_memstream","open_wmemstream","openat","opendir","openlog","openpty","p_aliases","p_cs_precedes","p_name","p_proto","p_sep_by_space","p_sign_posn","pageins","pageins","pageouts","pageouts","passwd","pathconf","pause","pbi_comm","pbi_flags","pbi_gid","pbi_name","pbi_nfiles","pbi_nice","pbi_pgid","pbi_pid","pbi_pjobc","pbi_ppid","pbi_rgid","pbi_ruid","pbi_start_tvsec","pbi_start_tvusec","pbi_status","pbi_svgid","pbi_svuid","pbi_uid","pbi_xstatus","pbsd","pclose","period","perror","pid_t","pipe","policy","policy","policy_t","poll","pollfd","popen","positive_sign","posix_madvise","posix_memalign","posix_openpt","posix_spawn","posix_spawn_file_actions_addclose","posix_spawn_file_actions_adddup2","posix_spawn_file_actions_addopen","posix_spawn_file_actions_destroy","posix_spawn_file_actions_init","posix_spawn_file_actions_t","posix_spawnattr_destroy","posix_spawnattr_getarchpref_np","posix_spawnattr_getflags","posix_spawnattr_getpgroup","posix_spawnattr_getsigdefault","posix_spawnattr_getsigmask","posix_spawnattr_init","posix_spawnattr_setarchpref_np","posix_spawnattr_setflags","posix_spawnattr_setpgroup","posix_spawnattr_setsigdefault","posix_spawnattr_setsigmask","posix_spawnattr_t","posix_spawnp","ppsfreq","pread","preadv","precision","preemptible","printf","priority","proc_bsdinfo","proc_kmsgbuf","proc_libversion","proc_listallpids","proc_listchildpids","proc_listpgrppids","proc_listpids","proc_name","proc_pid_rusage","proc_pidfdinfo","proc_pidfileportinfo","proc_pidinfo","proc_pidpath","proc_regionfilename","proc_set_csm","proc_set_no_smt","proc_setthread_csm","proc_setthread_no_smt","proc_taskallinfo","proc_taskinfo","proc_threadinfo","proc_vnodepathinfo","processor_basic_info","processor_basic_info_data_t","processor_basic_info_t","processor_count","processor_cpu_load_info","processor_cpu_load_info_data_t","processor_cpu_load_info_t","processor_flavor_t","processor_info_array_t","processor_info_t","processor_set_basic_info","processor_set_basic_info_data_t","processor_set_basic_info_t","processor_set_load_info","processor_set_load_info_data_t","processor_set_load_info_t","protoent","pselect","pseudo_AF_HDRCMPLT","pseudo_AF_KEY","pseudo_AF_PIP","pseudo_AF_RTIP","pseudo_AF_XTP","pth_cpu_usage","pth_cpu_usage","pth_curpri","pth_curpri","pth_flags","pth_flags","pth_maxpriority","pth_maxpriority","pth_name","pth_name","pth_policy","pth_policy","pth_priority","pth_priority","pth_run_state","pth_run_state","pth_sleep_time","pth_sleep_time","pth_system_time","pth_system_time","pth_user_time","pth_user_time","pthread_atfork","pthread_attr_destroy","pthread_attr_get_qos_class_np","pthread_attr_getschedparam","pthread_attr_init","pthread_attr_set_qos_class_np","pthread_attr_setdetachstate","pthread_attr_setschedparam","pthread_attr_setstacksize","pthread_attr_t","pthread_cancel","pthread_cond_broadcast","pthread_cond_destroy","pthread_cond_init","pthread_cond_signal","pthread_cond_t","pthread_cond_timedwait","pthread_cond_wait","pthread_condattr_destroy","pthread_condattr_getpshared","pthread_condattr_init","pthread_condattr_setpshared","pthread_condattr_t","pthread_cpu_number_np","pthread_create","pthread_create_from_mach_thread","pthread_detach","pthread_exit","pthread_from_mach_thread_np","pthread_get_qos_class_np","pthread_get_stackaddr_np","pthread_get_stacksize_np","pthread_getname_np","pthread_getschedparam","pthread_getspecific","pthread_introspection_getspecific_np","pthread_introspection_hook_install","pthread_introspection_hook_t","pthread_introspection_setspecific_np","pthread_jit_write_protect_np","pthread_jit_write_protect_supported_np","pthread_join","pthread_key_create","pthread_key_delete","pthread_key_t","pthread_kill","pthread_mach_thread_np","pthread_mutex_destroy","pthread_mutex_init","pthread_mutex_lock","pthread_mutex_t","pthread_mutex_trylock","pthread_mutex_unlock","pthread_mutexattr_destroy","pthread_mutexattr_getpshared","pthread_mutexattr_init","pthread_mutexattr_setpshared","pthread_mutexattr_settype","pthread_mutexattr_t","pthread_rwlock_destroy","pthread_rwlock_init","pthread_rwlock_rdlock","pthread_rwlock_t","pthread_rwlock_tryrdlock","pthread_rwlock_trywrlock","pthread_rwlock_unlock","pthread_rwlock_wrlock","pthread_rwlockattr_destroy","pthread_rwlockattr_getpshared","pthread_rwlockattr_init","pthread_rwlockattr_setpshared","pthread_rwlockattr_t","pthread_self","pthread_set_qos_class_self_np","pthread_setname_np","pthread_setschedparam","pthread_setspecific","pthread_sigmask","pthread_t","pthread_threadid_np","pti_cow_faults","pti_csw","pti_faults","pti_messages_received","pti_messages_sent","pti_numrunning","pti_pageins","pti_policy","pti_priority","pti_resident_size","pti_syscalls_mach","pti_syscalls_unix","pti_threadnum","pti_threads_system","pti_threads_user","pti_total_system","pti_total_user","pti_virtual_size","ptinfo","ptrace","ptrdiff_t","ptsname","purgeable_count","purgeable_count","purges","purges","putchar","putchar_unlocked","putenv","puts","pututxline","pvi_cdir","pvi_rdir","pw_change","pw_class","pw_dir","pw_expire","pw_gecos","pw_gid","pw_name","pw_passwd","pw_shell","pw_uid","pwrite","pwritev","qos_class_t","qsort","querylocale","quotactl","ra_count","ra_offset","radvisory","raise","rand","reactivations","reactivations","read","readdir","readdir_r","readlink","readlinkat","readv","realloc","realpath","recv","recvfrom","recvmsg","regcomp","regerror","regex_t","regexec","regfree","regmatch_t","regoff_t","release","remove","removexattr","rename","renameat","renameatx_np","renamex_np","res_init","reserved","resident_size","resident_size_max","revents","rewind","rewinddir","rfu_1","ri_billed_energy","ri_billed_system_time","ri_billed_system_time","ri_child_elapsed_abstime","ri_child_elapsed_abstime","ri_child_elapsed_abstime","ri_child_elapsed_abstime","ri_child_interrupt_wkups","ri_child_interrupt_wkups","ri_child_interrupt_wkups","ri_child_interrupt_wkups","ri_child_pageins","ri_child_pageins","ri_child_pageins","ri_child_pageins","ri_child_pkg_idle_wkups","ri_child_pkg_idle_wkups","ri_child_pkg_idle_wkups","ri_child_pkg_idle_wkups","ri_child_system_time","ri_child_system_time","ri_child_system_time","ri_child_system_time","ri_child_user_time","ri_child_user_time","ri_child_user_time","ri_child_user_time","ri_cpu_time_qos_background","ri_cpu_time_qos_background","ri_cpu_time_qos_default","ri_cpu_time_qos_default","ri_cpu_time_qos_legacy","ri_cpu_time_qos_legacy","ri_cpu_time_qos_maintenance","ri_cpu_time_qos_maintenance","ri_cpu_time_qos_user_initiated","ri_cpu_time_qos_user_initiated","ri_cpu_time_qos_user_interactive","ri_cpu_time_qos_user_interactive","ri_cpu_time_qos_utility","ri_cpu_time_qos_utility","ri_cycles","ri_diskio_bytesread","ri_diskio_bytesread","ri_diskio_bytesread","ri_diskio_byteswritten","ri_diskio_byteswritten","ri_diskio_byteswritten","ri_instructions","ri_interrupt_wkups","ri_interrupt_wkups","ri_interrupt_wkups","ri_interrupt_wkups","ri_interrupt_wkups","ri_interval_max_phys_footprint","ri_lifetime_max_phys_footprint","ri_logical_writes","ri_pageins","ri_pageins","ri_pageins","ri_pageins","ri_pageins","ri_phys_footprint","ri_phys_footprint","ri_phys_footprint","ri_phys_footprint","ri_phys_footprint","ri_pkg_idle_wkups","ri_pkg_idle_wkups","ri_pkg_idle_wkups","ri_pkg_idle_wkups","ri_pkg_idle_wkups","ri_proc_exit_abstime","ri_proc_exit_abstime","ri_proc_exit_abstime","ri_proc_exit_abstime","ri_proc_exit_abstime","ri_proc_start_abstime","ri_proc_start_abstime","ri_proc_start_abstime","ri_proc_start_abstime","ri_proc_start_abstime","ri_resident_size","ri_resident_size","ri_resident_size","ri_resident_size","ri_resident_size","ri_runnable_time","ri_serviced_energy","ri_serviced_system_time","ri_serviced_system_time","ri_system_time","ri_system_time","ri_system_time","ri_system_time","ri_system_time","ri_user_time","ri_user_time","ri_user_time","ri_user_time","ri_user_time","ri_uuid","ri_uuid","ri_uuid","ri_uuid","ri_uuid","ri_wired_size","ri_wired_size","ri_wired_size","ri_wired_size","ri_wired_size","rlim_cur","rlim_max","rlim_t","rlimit","rm_eo","rm_so","rmdir","ru_idrss","ru_inblock","ru_isrss","ru_ixrss","ru_majflt","ru_maxrss","ru_minflt","ru_msgrcv","ru_msgsnd","ru_nivcsw","ru_nsignals","ru_nswap","ru_nvcsw","ru_oublock","ru_stime","ru_utime","run_state","running","rusage","rusage_info_t","rusage_info_v0","rusage_info_v1","rusage_info_v2","rusage_info_v3","rusage_info_v4","s6_addr","s_addr","s_aliases","s_name","s_port","s_proto","sa_data","sa_endpoints_t","sa_family","sa_family_t","sa_flags","sa_len","sa_mask","sa_sigaction","sae_associd_t","sae_connid_t","sae_dstaddr","sae_dstaddrlen","sae_srcaddr","sae_srcaddrlen","sae_srcif","sbrk","sc_family","sc_id","sc_len","sc_reserved","sc_unit","scanf","sched_get_priority_max","sched_get_priority_min","sched_param","sched_priority","sched_yield","sdl_alen","sdl_data","sdl_family","sdl_index","sdl_len","sdl_nlen","sdl_slen","sdl_type","seconds","seed48","seekdir","segment_command","segment_command_64","segname","segname","select","sem_base","sem_close","sem_ctime","sem_flg","sem_nsems","sem_num","sem_op","sem_open","sem_otime","sem_pad1","sem_pad2","sem_pad3","sem_perm","sem_post","sem_t","sem_trywait","sem_unlink","sem_wait","sembuf","semctl","semget","semid_ds","semop","semun","send","sendfile","sendmsg","sendto","servent","setbuf","setdomainname","setegid","setenv","seteuid","setgid","setgrent","setgroups","sethostid","sethostname","setitimer","setlocale","setlogmask","setpgid","setpriority","setprogname","setpwent","setregid","setreuid","setrlimit","setservent","setsid","setsockopt","settimeofday","setuid","setutxent","setvbuf","setxattr","sf_hdtr","shift","shm_atime","shm_cpid","shm_ctime","shm_dtime","shm_internal","shm_lpid","shm_nattch","shm_open","shm_perm","shm_segsz","shm_unlink","shmat","shmatt_t","shmctl","shmdt","shmget","shmid_ds","shutdown","si_addr","si_addr","si_code","si_errno","si_pid","si_pid","si_signo","si_status","si_status","si_uid","si_uid","si_value","sigaction","sigaction","sigaddset","sigaltstack","sigdelset","sigemptyset","sigev_notify","sigev_notify_attributes","sigev_signo","sigev_value","sigevent","sigfillset","sighandler_t","siginfo_t","sigismember","signal","sigpending","sigprocmask","sigset_t","sigval","sigwait","sin6_addr","sin6_family","sin6_flowinfo","sin6_len","sin6_port","sin6_scope_id","sin_addr","sin_addr","sin_family","sin_family","sin_len","sin_len","sin_other","sin_port","sin_port","sin_srcaddr","sin_tos","sin_zero","sival_ptr","size","size_allocated","size_in_use","size_t","sizeofcmds","sizeofcmds","sleep","sleep_time","slot_num","snd_family","snd_len","snd_name","snprintf","sockaddr","sockaddr_ctl","sockaddr_dl","sockaddr_in","sockaddr_in6","sockaddr_inarp","sockaddr_ndrv","sockaddr_storage","sockaddr_un","socket","socketpair","socklen_t","speculative_count","speculative_count","speed_t","sprintf","srand","srand48","ss_family","ss_flags","ss_len","ss_size","ss_sp","ss_sysaddr","sscanf","ssize_t","st_atime","st_atime_nsec","st_birthtime","st_birthtime_nsec","st_blksize","st_blocks","st_ctime","st_ctime_nsec","st_dev","st_flags","st_gen","st_gid","st_ino","st_lspare","st_mode","st_mtime","st_mtime_nsec","st_nlink","st_qspare","st_rdev","st_size","st_uid","stabil","stack_t","stat","stat","statfs","statfs","status","statvfs","statvfs","stbcnt","stpcpy","stpncpy","strcasecmp","strcasestr","strcat","strchr","strcmp","strcoll","strcpy","strcspn","strdup","strerror","strerror_r","strlen","strncasecmp","strncat","strncmp","strncpy","strndup","strnlen","strpbrk","strrchr","strsignal","strspn","strstr","strtod","strtof","strtok","strtok_r","strtol","strtonum","strtoul","strxfrm","sun_family","sun_len","sun_path","suseconds_t","suspend_count","suspend_count","swapins","swapouts","symlink","symlinkat","sync","syscall","sysconf","sysctl","sysctlbyname","sysctlnametomib","sysdir_get_next_search_path_enumeration","sysdir_search_path_directory_t","sysdir_search_path_domain_mask_t","sysdir_search_path_enumeration_state","sysdir_start_search_path_enumeration","syslog","sysname","system","system_time","system_time","system_time","tai","task_count","task_create","task_flavor_t","task_for_pid","task_info","task_info_t","task_inspect_t","task_set_info","task_t","task_terminate","task_thread_times_info","task_thread_times_info_data_t","task_thread_times_info_t","task_threads","tcdrain","tcflag_t","tcflow","tcflush","tcgetattr","tcgetpgrp","tcgetsid","tcsendbreak","tcsetattr","tcsetpgrp","telldir","termios","thousands_sep","thread_act_array_t","thread_act_t","thread_affinity_policy","thread_affinity_policy_data_t","thread_affinity_policy_t","thread_background_policy","thread_background_policy_data_t","thread_background_policy_t","thread_basic_info","thread_basic_info_data_t","thread_basic_info_t","thread_count","thread_extended_info","thread_extended_info_data_t","thread_extended_info_t","thread_extended_policy","thread_extended_policy_data_t","thread_extended_policy_t","thread_flavor_t","thread_handle","thread_id","thread_identifier_info","thread_identifier_info_data_t","thread_identifier_info_t","thread_info","thread_info_t","thread_inspect_t","thread_latency_qos_policy","thread_latency_qos_policy_data_t","thread_latency_qos_policy_t","thread_latency_qos_t","thread_latency_qos_tier","thread_policy_flavor_t","thread_policy_get","thread_policy_set","thread_policy_t","thread_precedence_policy","thread_precedence_policy_data_t","thread_precedence_policy_t","thread_standard_policy","thread_standard_policy_data_t","thread_standard_policy_t","thread_t","thread_throughput_qos_policy","thread_throughput_qos_policy_data_t","thread_throughput_qos_policy_t","thread_throughput_qos_t","thread_throughput_qos_tier","thread_time_constraint_policy","thread_time_constraint_policy_data_t","thread_time_constraint_policy_t","throttled_count","time","time","time_state","time_t","time_value_t","timegm","times","timeshare","timespec","timeval","timeval32","timex","timezone","tm","tm_gmtoff","tm_hour","tm_isdst","tm_mday","tm_min","tm_mon","tm_sec","tm_wday","tm_yday","tm_year","tm_zone","tmpfile","tmpnam","tms","tms_cstime","tms_cutime","tms_stime","tms_utime","tolerance","tolower","total_uncompressed_pages_in_compressor","toupper","trailers","trl_cnt","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ttyname","ttyname_r","tv_nsec","tv_sec","tv_sec","tv_sec","tv_usec","tv_usec","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uc_link","uc_mcontext","uc_mcsize","uc_onstack","uc_sigmask","uc_stack","ucontext_t","udata","udata","uid","uid_t","uint16_t","uint32_t","uint64_t","uint8_t","uintmax_t","uintptr_t","umask","uname","ungetc","unlink","unlinkat","unlockpt","unmount","unsetenv","useconds_t","uselocale","user_time","user_time","user_time","usleep","ut_host","ut_id","ut_line","ut_pid","ut_tv","ut_type","ut_user","utimbuf","utime","utimensat","utimes","utmpx","utmpxname","utsname","uuid","uuid_t","val","version","vi_fsid","vi_pad","vi_stat","vi_type","vinfo_stat","vip_path","vip_vi","virtual_size","vm_address_t","vm_deallocate","vm_inherit_t","vm_map_t","vm_offset_t","vm_page_size","vm_prot_t","vm_range_t","vm_size_t","vm_statistics","vm_statistics64","vm_statistics64_data_t","vm_statistics64_t","vm_statistics_data_t","vm_statistics_t","vmaddr","vmaddr","vmsize","vmsize","vnode_info","vnode_info_path","vst_atime","vst_atimensec","vst_birthtime","vst_birthtimensec","vst_blksize","vst_blocks","vst_ctime","vst_ctimensec","vst_dev","vst_flags","vst_gen","vst_gid","vst_ino","vst_mode","vst_mtime","vst_mtimensec","vst_nlink","vst_qspare","vst_rdev","vst_size","vst_uid","wait","wait4","waitid","waitpid","wchar_t","wcslen","wcstombs","winsize","wire_count","wire_count","wmemchr","write","writev","ws_col","ws_row","ws_xpixel","ws_ypixel","xsu_avail","xsu_encrypted","xsu_pagesize","xsu_total","xsu_used","xsw_usage","xucred","zero_fill_count","zero_fill_count"],"q":["libcd":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","data includes security that replaces the TFO-cookie","data is idempotent","resume connect() on read/write","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Third Party Connect","Any distributed FS","IP6 Auth Header","any host internal protocol","any private encr. scheme","Argus","AX.25 Frames","BHA","Bulk Data Transfer","BackRoom SATNET Monitoring","CFTP","Chaos","Control Message Transport","Comp. Prot. HeartBeat","Comp. Prot. Net. Executive","Datagram Delivery","dissimilar gateway prot.","divert pseudo-protocol","last return value of *_input(), meaning “all job for …","IP6 destination option","exterior gateway protocol","EMCON","encapsulation header","ISO cnlp","IP6 Encap Sec. Payload","Ethernet IP encapsulation","IP6 fragmentation header","gateway2 (deprecated)","GMTP","General Routing Encap.","“hello” routing protocol","Host Monitoring","IP6 hop-by-hop options","","","xns idp","InterDomain Policy Routing","InterDomain Routing","group mgmt protocol","NSFNET-IGP","Cisco/GXS IGRP","IL transport protocol","Integ. Net Layer Security","Merit Internodal","","payload compression (IPComp)","Packet Core Utility","IP encapsulated in IP","for compatibility","Pluribus Packet Core","","Reliable Transaction","Kryptolan","Locus Address Resoloution","Leaf-1","Leaf-2","","DCN Measurement Subsystems","Mobile Host Routing","Mobile Int.ing control","Multicast Transport","Multiplexing","Sun net disk proto (temp.)","Next Hop Resolution","IP6 no next header","Network Services","network voice protocol","OSPFIGP","PGM","private interior gateway","Protocol Independent Mcast","Packet Radio Measurement","pup","Packet Video Protocol","raw IP packet","BBN RCC Monitoring","Reliable Data","IP6 routing header","resource reservation","Remote Virtual Disk","SATNET/Backroom EXPAK","Satnet Monitoring","Semaphore Comm. security","SCTP","Source Demand Routing","Sequential Exchange","Strite RPC protocol","Stream protocol II.","Secure VMTP","IP with encryption","TCF","","tp-4 w/ class negotiation","TP++ Transport","Trunk-1","Trunk-2","TTP","","Banyon VINES","VISA Protocol","VMTP","WIDEBAND EXPAK","WIDEBAND Monitoring","Wang Span Network","Cross Net Debuggersae_associd_t)(-1ULL))","","((sae_connid_t)(-1ULL))","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Enable/Disable TCP Fastopen on this socketcode>__int128</code> (a GCC extension that’s part of many ABIs)","C __int128_t (alternate name for __int128)","","","","","","","C <code>unsigned __int128</code> (a GCC extension that’s part of many …","C __uint128_t (alternate name for __uintquivalent to C’s <code>void</code> type when used as a pointereturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Notes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codehe 64-bit libc on Solaris and illumos only has readdir_r. …if":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["c_uint",6]],["c_uint",6]],[[]],[[["c_uint",6]],["c_uint",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["c_int",6]]],[[["c_int",6]],["bool",0]],[[["c_int",6]]],null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["c_int",6],["c_int",6]],["c_int",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["u8",0]],["u32",0]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["c_int",6]],["bool",0]],null,[[["c_int",6]],["c_int",6]],[[["c_int",6]],["bool",0]],[[["c_int",6]],["bool",0]],[[["c_int",6]],["bool",0]],[[["c_int",6]],["bool",0]],null,null,null,[[["c_int",6]],["c_int",6]],[[["c_int",6]],["c_int",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["c_int",6]],["c_int",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullnull,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["dir",4]],[[["",0]],["file",4]],[[["",0]],["fpos_t",4]],[[["",0]],["group",3]],[[["",0]],["utimbuf",3]],[[["",0]],["timeval",3]],[[["",0]],["timespec",3]],[[["",0]],["rlimit",3]],[[["",0]],["rusage",3]],[[["",0]],["ipv6_mreq",3]],[[["",0]],["hostent",3]],[[["",0]],["iovec",3]],[[["",0]],["pollfd",3]],[[["",0]],["winsize",3]],[[["",0]],["linger",3]],[[["",0]],["sigval",3]],[[["",0]],["itimerval",3]],[[["",0]],["tms",3]],[[["",0]],["servent",3]],[[["",0]],["protoent",3]],[[["",0]],["sockaddr",3]],[[["",0]],["sockaddr_in6",3]],[[["",0]],["passwd",3]],[[["",0]],["ifaddrs",3]],[[["",0]],["fd_set",3]],[[["",0]],["tm",3]],[[["",0]],["msghdr",3]],[[["",0]],["cmsghdr",3]],[[["",0]],["fsid_t",3]],[[["",0]],["if_nameindex",3]],[[["",0]],["regex_t",3]],[[["",0]],["regmatch_t",3]],[[["",0]],["sockaddr_un",3]],[[["",0]],["utsname",3]],[[["",0]],["timezone",4]],[[["",0]],["qos_class_t",4]],[[["",0]],["sysdir_search_path_directory_t",4]],[[["",0]],["sysdir_search_path_domain_mask_t",4]],[[["",0]],["ip_mreq",3]],[[["",0]],["ip_mreqn",3]],[[["",0]],["ip_mreq_source",3]],[[["",0]],["aiocb",3]],[[["",0]],["glob_t",3]],[[["",0]],["addrinfo",3]],[[["",0]],["mach_timebase_info",3]],[[["",0]],["stat",3]],[[["",0]],["pthread_mutexattr_t",3]],[[["",0]],["pthread_condattr_t",3]],[[["",0]],["pthread_rwlockattr_t",3]],[[["",0]],["siginfo_t",3]],[[["",0]],["sigaction",3]],[[["",0]],["stack_t",3]],[[["",0]],["fstore_t",3]],[[["",0]],["radvisory",3]],[[["",0]],["statvfs",3]],[[["",0]],["dl_info",3]],[[["",0]],["sockaddr_in",3]],[[["",0]],["kevent64_s",3]],[[["",0]],["dqblk",3]],[[["",0]],["if_msghdr",3]],[[["",0]],["termios",3]],[[["",0]],["flock",3]],[[["",0]],["sf_hdtr",3]],[[["",0]],["lconv",3]],[[["",0]],["proc_taskinfo",3]],[[["",0]],["proc_bsdinfo",3]],[[["",0]],["proc_taskallinfo",3]],[[["",0]],["xsw_usage",3]],[[["",0]],["xucred",3]],[[["",0]],["mach_header",3]],[[["",0]],["mach_header_64",3]],[[["",0]],["segment_command",3]],[[["",0]],["segment_command_64",3]],[[["",0]],["load_command",3]],[[["",0]],["sockaddr_dl",3]],[[["",0]],["sockaddr_inarp",3]],[[["",0]],["sockaddr_ctl",3]],[[["",0]],["in_pktinfo",3]],[[["",0]],["in6_pktinfo",3]],[[["",0]],["ipc_perm",3]],[[["",0]],["sembuf",3]],[[["",0]],["arphdr",3]],[[["",0]],["in_addr",3]],[[["",0]],["sockaddr_ndrv",3]],[[["",0]],["sa_endpoints_t",3]],[[["",0]],["timex",3]],[[["",0]],["ntptimeval",3]],[[["",0]],["thread_standard_policy",3]],[[["",0]],["thread_extended_policy",3]],[[["",0]],["thread_time_constraint_policy",3]],[[["",0]],["thread_precedence_policy",3]],[[["",0]],["thread_affinity_policy",3]],[[["",0]],["thread_background_policy",3]],[[["",0]],["thread_latency_qos_policy",3]],[[["",0]],["thread_throughput_qos_policy",3]],[[["",0]],["malloc_statistics_t",3]],[[["",0]],["mstats",3]],[[["",0]],["vm_range_t",3]],[[["",0]],["sched_param",3]],[[["",0]],["vinfo_stat",3]],[[["",0]],["vnode_info",3]],[[["",0]],["vnode_info_path",3]],[[["",0]],["proc_vnodepathinfo",3]],[[["",0]],["vm_statistics",3]],[[["",0]],["task_thread_times_info",3]],[[["",0]],["rusage_info_v0",3]],[[["",0]],["rusage_info_v1",3]],[[["",0]],["rusage_info_v2",3]],[[["",0]],["rusage_info_v3",3]],[[["",0]],["rusage_info_v4",3]],[[["",0]],["image_offset",3]],[[["",0]],["kevent",3]],[[["",0]],["semid_ds",3]],[[["",0]],["shmid_ds",3]],[[["",0]],["proc_threadinfo",3]],[[["",0]],["statfs",3]],[[["",0]],["dirent",3]],[[["",0]],["pthread_rwlock_t",3]],[[["",0]],["pthread_mutex_t",3]],[[["",0]],["pthread_cond_t",3]],[[["",0]],["sockaddr_storage",3]],[[["",0]],["utmpx",3]],[[["",0]],["sigevent",3]],[[["",0]],["processor_cpu_load_info",3]],[[["",0]],["processor_basic_info",3]],[[["",0]],["processor_set_basic_info",3]],[[["",0]],["processor_set_load_info",3]],[[["",0]],["time_value_t",3]],[[["",0]],["thread_basic_info",3]],[[["",0]],["thread_identifier_info",3]],[[["",0]],["thread_extended_info",3]],[[["",0]],["if_data64",3]],[[["",0]],["if_msghdr2",3]],[[["",0]],["vm_statistics64",3]],[[["",0]],["mach_task_basic_info",3]],[[["",0]],["log2phys",3]],[[["",0]],["semun",19]],[[["",0]],["timeval32",3]],[[["",0]],["if_data",3]],[[["",0]],["bpf_hdr",3]],[[["",0]],["pthread_attr_t",3]],[[["",0]],["malloc_zone_t",3]],[[["",0]],["max_align_t",3]],[[["",0]],["ucontext_t",3]],[[["",0]],["__darwin_mcontext64",3]],[[["",0]],["__darwin_arm_exception_state64",3]],[[["",0]],["__darwin_arm_thread_state64",3]],[[["",0]],["__darwin_arm_neon_state64",3]],[[["",0]],["in6_addr",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["formatter",3]],["result",4,[["error",3]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullnull,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullnull,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["mach_port_t",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]]],null,null,null,[[["",0]],["pid_t",6]],null,null,[[["",0]],["c_int",6]],null,[[["",0]],["uid_t",6]],null,[[["",0]],["sigval",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,null,null,[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[[4,"qos_class_t"],[4,"sysdir_search_path_directory_t"],[4,"sysdir_search_path_domain_mask_t"],[3,"__darwin_arm_thread_state64"],[3,"__darwin_mcontext64"],[3,"__darwin_arm_exception_state64"],[3,"__darwin_arm_neon_state64"],[3,"ipc_perm"],[3,"utimbuf"],[3,"vm_statistics"],[3,"vm_statistics64"],[3,"vm_range_t"],[3,"thread_affinity_policy"],[3,"addrinfo"],[3,"aiocb"],[3,"arphdr"],[19,"semun"],[3,"bpf_hdr"],[3,"malloc_statistics_t"],[4,"DIR"],[4,"FILE"],[4,"fpos_t"],[3,"group"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in6"],[3,"passwd"],[3,"ifaddrs"],[3,"fd_set"],[3,"tm"],[3,"msghdr"],[3,"cmsghdr"],[3,"fsid_t"],[3,"if_nameindex"],[3,"regex_t"],[3,"regmatch_t"],[3,"sockaddr_un"],[3,"utsname"],[4,"timezone"],[3,"ip_mreq"],[3,"ip_mreqn"],[3,"ip_mreq_source"],[3,"glob_t"],[3,"mach_timebase_info"],[3,"stat"],[3,"pthread_mutexattr_t"],[3,"pthread_condattr_t"],[3,"pthread_rwlockattr_t"],[3,"siginfo_t"],[3,"sigaction"],[3,"stack_t"],[3,"fstore_t"],[3,"radvisory"],[3,"statvfs"],[3,"Dl_info"],[3,"sockaddr_in"],[3,"kevent64_s"],[3,"dqblk"],[3,"if_msghdr"],[3,"termios"],[3,"flock"],[3,"sf_hdtr"],[3,"lconv"],[3,"proc_taskinfo"],[3,"proc_bsdinfo"],[3,"proc_taskallinfo"],[3,"xsw_usage"],[3,"xucred"],[3,"mach_header"],[3,"mach_header_64"],[3,"segment_command"],[3,"segment_command_64"],[3,"load_command"],[3,"sockaddr_dl"],[3,"sockaddr_inarp"],[3,"sockaddr_ctl"],[3,"in_pktinfo"],[3,"in6_pktinfo"],[3,"sembuf"],[3,"in_addr"],[3,"sockaddr_ndrv"],[3,"sa_endpoints_t"],[3,"timex"],[3,"ntptimeval"],[3,"thread_standard_policy"],[3,"thread_extended_policy"],[3,"thread_time_constraint_policy"],[3,"thread_precedence_policy"],[3,"thread_background_policy"],[3,"thread_latency_qos_policy"],[3,"thread_throughput_qos_policy"],[3,"mstats"],[3,"sched_param"],[3,"vinfo_stat"],[3,"vnode_info"],[3,"vnode_info_path"],[3,"proc_vnodepathinfo"],[3,"task_thread_times_info"],[3,"rusage_info_v0"],[3,"rusage_info_v1"],[3,"rusage_info_v2"],[3,"rusage_info_v3"],[3,"rusage_info_v4"],[3,"image_offset"],[3,"kevent"],[3,"semid_ds"],[3,"shmid_ds"],[3,"proc_threadinfo"],[3,"statfs"],[3,"dirent"],[3,"pthread_rwlock_t"],[3,"pthread_mutex_t"],[3,"pthread_cond_t"],[3,"sockaddr_storage"],[3,"utmpx"],[3,"sigevent"],[3,"processor_cpu_load_info"],[3,"processor_basic_info"],[3,"processor_set_basic_info"],[3,"processor_set_load_info"],[3,"time_value_t"],[3,"thread_basic_info"],[3,"thread_identifier_info"],[3,"thread_extended_info"],[3,"if_data64"],[3,"if_msghdr2"],[3,"mach_task_basic_info"],[3,"log2phys"],[3,"timeval32"],[3,"if_data"],[3,"pthread_attr_t"],[3,"malloc_zone_t"],[3,"max_align_t"],[3,"ucontext_t"],[3,"in6_addr"],[4,"c_void"]],"a":{"__errno_location":[2193],"errno":[2193]}},\
"memchr":{"doc":"This library provides heavily optimized routines for …","t":[3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,0,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,3,3,3,3,3,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Memchr","Memchr2","Memchr3","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","into","into","into","into_iter","into_iter","into_iter","memchr","memchr2","memchr2_iter","memchr3","memchr3_iter","memchr_iter","memmem","memrchr","memrchr2","memrchr2_iter","memrchr3","memrchr3_iter","memrchr_iter","new","new","new","next","next","next","next_back","next_back","next_back","size_hint","size_hint","size_hint","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Auto","FindIter","FindRevIter","Finder","FinderBuilder","FinderRev","None","Prefilter","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_forward","build_reverse","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","find","find","find_iter","find_iter","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_owned","into_owned","into_owned","into_owned","needle","needle","new","new","new","next","next","prefilter","rfind","rfind","rfind_iter","rfind_iter","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["memchr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","memchr::memmem","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An iterator for <code>memchr</code>.","An iterator for <code>memchr2</code>.","An iterator for <code>memchr3</code>.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Search for the first occurrence of a byte in a slice.","Like <code>memchr</code>, but searches for either of two bytes instead …","An iterator over all occurrences of the needles in a …","Like <code>memchr</code>, but searches for any of three bytes instead …","An iterator over all occurrences of the needles in a …","An iterator over all occurrences of the needle in a …","This module provides forward and reverse substring search …","Search for the last occurrence of a byte in a slice.","Like <code>memrchr</code>, but searches for either of two bytes instead …","An iterator over all occurrences of the needles in a …","Like <code>memrchr</code>, but searches for any of three bytes instead …","An iterator over all occurrences of the needles in a …","An iterator over all occurrences of the needle in a …","Creates a new iterator that yields all positions of needle …","Creates a new iterator that yields all positions of needle …","Create a new <code>Memchr3</code> that’s initialized to zero with a …","","","","","","","","","","","","","","","","","","","Automatically detect whether a heuristic prefilter should …","An iterator over non-overlapping substring matches.","An iterator over non-overlapping substring matches in …","A single substring searcher fixed to a particular needle.","A builder for constructing non-default forward or reverse …","A single substring reverse searcher fixed to a particular …","Never used a prefilter in substring search.","Prefilter controls whether heuristics are used to …","Convert this finder into its borrowed variant.","Convert this finder into its borrowed variant.","","","","","","","","","","","","","Build a forward finder using the given needle from the …","Build a reverse finder using the given needle from the …","","","","","","","","","","","Returns the index of the first occurrence of the given …","Returns the index of the first occurrence of this needle …","Returns an iterator over all non-overlapping occurrences …","Returns an iterator over all occurrences of a substring in …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Convert this iterator into its owned variant, such that it …","Convert this iterator into its owned variant, such that it …","Convert this finder into its owned variant, such that it …","Convert this finder into its owned variant, such that it …","Returns the needle that this finder searches for.","Returns the needle that this finder searches for.","Create a new finder for the given needle.","Create a new reverse finder for the given needle.","Create a new finder builder with default settings.","","","Configure the prefilter setting for the finder.","Returns the index of the last occurrence of the given …","Returns the index of the last occurrence of this needle in …","Returns a reverse iterator over all non-overlapping …","Returns a reverse iterator over all occurrences of a …","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,4,0,0,0,0,0,4,0,5,6,4,7,8,5,6,9,4,7,8,5,6,9,9,9,4,5,6,9,4,5,6,9,4,9,0,5,0,5,4,7,8,5,6,9,4,7,8,5,6,9,4,7,8,5,6,9,7,8,7,8,5,6,5,6,5,6,9,7,8,9,0,6,0,6,4,5,6,9,4,7,8,5,6,9,4,7,8,5,6,9,4,7,8,5,6,9],"f":[null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u8",0]],["option",4,[["usize",0]]]],[[["u8",0],["u8",0]],["option",4,[["usize",0]]]],[[["u8",0],["u8",0]],["memchr2",3]],[[["u8",0],["u8",0],["u8",0]],["option",4,[["usize",0]]]],[[["u8",0],["u8",0],["u8",0]],["memchr3",3]],[[["u8",0]],["memchr",3]],null,[[["u8",0]],["option",4,[["usize",0]]]],[[["u8",0],["u8",0]],["option",4,[["usize",0]]]],[[["u8",0],["u8",0]],["rev",3,[["memchr2",3]]]],[[["u8",0],["u8",0],["u8",0]],["option",4,[["usize",0]]]],[[["u8",0],["u8",0],["u8",0]],["rev",3,[["memchr3",3]]]],[[["u8",0]],["rev",3,[["memchr",3]]]],[[["u8",0]],["memchr",3]],[[["u8",0],["u8",0]],["memchr2",3]],[[["u8",0],["u8",0],["u8",0]],["memchr3",3]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,[[["",0]],["finder",3]],[[["",0]],["finderrev",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["",0]],["finder",3]],[[["",0],["",0]],["finderrev",3]],[[["",0]],["prefilter",4]],[[["",0]],["finder",3]],[[["",0]],["finderrev",3]],[[["",0]],["finderbuilder",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["prefilter",4]],[[],["finderbuilder",3]],[[],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["finditer",3]],[[["",0]],["finditer",3]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["finditer",3]],[[],["findreviter",3]],[[],["finder",3]],[[],["finderrev",3]],[[["",0]]],[[["",0]]],[[["",0]],["finder",3]],[[["",0]],["finderrev",3]],[[],["finderbuilder",3]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0],["prefilter",4]],["finderbuilder",3]],[[],["option",4,[["usize",0]]]],[[["",0],["asref",8]],["option",4,[["usize",0]]]],[[["",0]],["findreviter",3]],[[["",0]],["findreviter",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[3,"Memchr"],[3,"Memchr2"],[3,"Memchr3"],[4,"Prefilter"],[3,"Finder"],[3,"FinderRev"],[3,"FindIter"],[3,"FindRevIter"],[3,"FinderBuilder"]]},\
"memoffset":{"doc":"A crate used for calculating offsets of struct members and …","t":[14,14,14,14,14],"n":["offset_of","offset_of_tuple","raw_field","raw_field_tuple","span_of"],"q":["memoffset","","","",""],"d":["Calculates the offset of the specified field from the …","Calculates the offset of the specified field from the …","Computes a const raw pointer to the given field of the …","Computes a const raw pointer to the given field of the …","Produces a range instance representing the sub-slice …"],"i":[0,0,0,0,0],"f":[null,null,null,null,null],"p":[]},\
"num_cpus":{"doc":"A crate with utilities to determine the number of CPUs …","t":[5,5],"n":["get","get_physical"],"q":["num_cpus",""],"d":["Returns the number of available CPUs of the current system.","Returns the number of physical cores of the current system."],"i":[0,0],"f":[[[],["usize",0]],[[],["usize",0]]],"p":[]},\
"num_traits":{"doc":"Numeric traits for generic mathematics","t":[2,2,2,2,2,2,2,2,2,2,2,13,2,2,2,4,2,16,2,13,2,2,8,8,8,8,2,8,8,2,3,2,2,8,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,11,11,11,11,0,0,2,2,5,5,5,0,11,11,11,11,11,10,0,0,11,11,12,2,0,0,2,0,0,2,11,11,11,11,11,11,11,2,8,8,8,10,10,10,10,8,8,8,8,10,5,10,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,10,10,10,10,10,10,10,10,10,10,8,8,8,10,10,11,10,11,10,10,10,11,10,11,10,10,10,10,10,10,10,10,10,10,11,10,10,11,10,10,10,11,10,10,10,10,11,10,11,10,10,10,10,10,10,11,10,11,10,11,10,11,10,11,10,11,10,10,10,10,10,10,11,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,11,10,11,10,11,10,10,10,10,10,10,10,11,10,11,10,11,8,8,11,10,5,10,11,11,5,10,8,10,10,10,10,11,10,10,11,10,10,10,10,10,10,10,11,10,10,10,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,8,8,10,10,10,10,8,16,10,8,8,16,10,10,8,8,8,10,10,10,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,10,16,8,5,5,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,8,5,10,5,10,10,10,5,10],"n":["AsPrimitive","Bounded","CheckedAdd","CheckedDiv","CheckedEuclid","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","Empty","Euclid","Float","FloatConst","FloatErrorKind","FromPrimitive","FromStrRadixErr","Inv","Invalid","MulAdd","MulAddAssign","Num","NumAssign","NumAssignOps","NumAssignRef","NumCast","NumOps","NumRef","One","ParseFloatError","Pow","PrimInt","RefNum","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","Signed","ToPrimitive","Unsigned","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","Zero","abs","abs_sub","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","cast","checked_pow","clamp","clamp_max","clamp_min","float","fmt","fmt","fmt","from","from","from_str_radix","identities","int","into","into","kind","one","ops","pow","pow","real","sign","signum","to_string","try_from","try_from","try_into","try_into","type_id","type_id","zero","Bounded","LowerBounded","UpperBounded","max_value","max_value","min_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","abs","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","ceil","classify","classify","copysign","cos","cosh","epsilon","epsilon","exp","exp2","exp_m1","floor","floor","fract","fract","hypot","infinity","infinity","integer_decode","integer_decode","is_finite","is_finite","is_infinite","is_infinite","is_nan","is_nan","is_normal","is_normal","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","ln","ln_1p","log","log10","log2","max","max","max_value","max_value","min","min","min_positive_value","min_positive_value","min_value","min_value","mul_add","nan","nan","neg_infinity","neg_infinity","neg_zero","neg_zero","powf","powi","powi","recip","recip","round","round","signum","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_degrees","to_radians","to_radians","trunc","trunc","One","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_ones","leading_zeros","pow","reverse_bits","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_ones","trailing_zeros","unsigned_shl","unsigned_shr","checked","euclid","inv","mul_add","overflowing","saturating","wrapping","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","CheckedEuclid","Euclid","checked_div_euclid","checked_rem_euclid","div_euclid","rem_euclid","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Real","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","cos","cosh","epsilon","exp","exp2","exp_m1","floor","fract","hypot","is_sign_negative","is_sign_positive","ln","ln_1p","log","log10","log2","max","max_value","min","min_positive_value","min_value","mul_add","powf","powi","recip","round","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_radians","trunc","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":["num_traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::bounds","","","","","","","num_traits::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::float","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::identities","","","","","","","","","","num_traits::int","","","","","","","","","","","","","","","","","","","","num_traits::ops","","","","","","","num_traits::ops::checked","","","","","","","","","","","","","","","","num_traits::ops::euclid","","","","","","num_traits::ops::inv","","","num_traits::ops::mul_add","","","","","num_traits::ops::overflowing","","","","","","num_traits::ops::saturating","","","","","","","","","num_traits::ops::wrapping","","","","","","","","","","","","num_traits::pow","","","","","num_traits::real","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::sign","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values, …","The trait for <code>Num</code> types which also implement assignment …","Generic trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","","Generic trait for types implementing basic numeric …","The trait for <code>Num</code> types which also implement numeric …","","","","","The trait for <code>Num</code> references which implement numeric …","","","","","","","","","","","","","","","","","","","","","","","","","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a string and radix (typically <code>2..=36</code>).","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Numbers which have upper and lower bounds","Numbers which have lower bounds","Numbers which have upper bounds","Returns the largest finite number this type can represent","Returns the largest finite number this type can represent","Returns the smallest finite number this type can represent","Returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Generic trait for floating point numbers","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value of <code>self</code>. Returns …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the floating point category of the number. If only …","Returns the floating point category of the number. If only …","Returns a number composed of the magnitude of <code>self</code> and the …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns positive infinity.","Returns the infinite value.","Returns the mantissa, base 2 exponent, and sign as …","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Returns NaN.","Returns the <code>NaN</code> value.","Returns negative infinity.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns <code>-0.0</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts to degrees, assuming the number is in radians.","Converts radians to degrees.","Converts to radians, assuming the number is in degrees.","Converts degrees to radians.","Return the integer part of a number.","Return the integer part of a number.","Defines a multiplicative identity element for <code>Self</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Reverses the order of bits in the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing ones in the binary …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","","","","","","","","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of wrapping …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","","","Performs euclid division that returns <code>None</code> instead of …","Finds the euclid remainder of dividing two numbers, …","Calculates Euclidean division, the matching method for …","Calculates the least nonnegative remainder of <code>self (mod v)</code>.","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation.","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation.","Performs the fused multiply-add operation.","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean indicating …","Returns a tuple of the product along with a boolean …","Returns a tuple of the difference along with a boolean …","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","A trait for real number types that do not necessarily have …","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Raise a number to a real number power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts radians to degrees.","Converts degrees to radians.","Return the integer part of a number.","Useful functions for signed numbers (i.e. numbers that can …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number."],"i":[0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,1,3,0,0,0,0,0,0,0,0,1,3,3,1,3,2,0,0,1,3,3,0,0,0,0,0,0,0,3,1,3,1,3,1,3,0,0,0,0,4,5,4,6,0,0,0,0,7,0,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,0,0,0,11,11,11,11,11,11,11,11,11,12,13,12,12,12,12,12,12,12,12,12,12,13,13,12,12,12,12,13,12,12,12,12,12,13,12,13,12,13,12,13,12,12,13,12,13,12,13,12,13,12,13,12,13,12,12,12,12,12,12,13,13,12,12,13,13,12,13,12,12,13,12,13,12,13,12,12,12,13,12,13,12,13,12,13,12,12,12,12,12,12,13,12,13,12,12,13,0,0,14,15,0,14,14,15,0,15,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,18,19,20,21,22,23,24,0,0,25,25,26,26,0,27,27,0,0,28,28,29,0,0,0,30,31,32,0,0,0,0,33,34,35,33,36,0,0,0,0,0,0,37,38,39,40,41,42,43,0,0,0,43,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,0,0,45,0,45,45,45,0,45],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,null,null,[[["partialord",8],["partialord",8],["partialord",8]],["partialord",8]],[[["partialord",8],["partialord",8]],["partialord",8]],[[["partialord",8],["partialord",8]],["partialord",8]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["str",0],["u32",0]],["result",4]],null,null,[[]],[[]],null,null,null,null,null,null,null,null,[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,[[]],[[]],[[]],[[]],null,null,null,null,[[]],[[["numcast",8]],["option",4,[["numcast",8]]]],[[["toprimitive",8]],["option",4]],[[["f32",0]],["option",4]],[[["f64",0]],["option",4]],[[["i128",0]],["option",4]],[[["i16",0]],["option",4]],[[["i32",0]],["option",4]],[[["i64",0]],["option",4]],[[["i8",0]],["option",4]],[[["isize",0]],["option",4]],[[["u128",0]],["option",4]],[[["u16",0]],["option",4]],[[["u32",0]],["option",4]],[[["u64",0]],["option",4]],[[["u8",0]],["option",4]],[[["usize",0]],["option",4]],[[["",0]],["option",4,[["f32",0]]]],[[["",0]],["option",4,[["f64",0]]]],[[["",0]],["option",4,[["i128",0]]]],[[["",0]],["option",4,[["i16",0]]]],[[["",0]],["option",4,[["i32",0]]]],[[["",0]],["option",4,[["i64",0]]]],[[["",0]],["option",4,[["i8",0]]]],[[["",0]],["option",4,[["isize",0]]]],[[["",0]],["option",4,[["u128",0]]]],[[["",0]],["option",4,[["u16",0]]]],[[["",0]],["option",4,[["u32",0]]]],[[["",0]],["option",4,[["u64",0]]]],[[["",0]],["option",4,[["u8",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fpcategory",4]],[[],["fpcategory",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",0]],[[],["bool",0]],[[],["bool",0]],[[],["bool",0]],[[],["bool",0]],[[],["bool",0]],[[],["bool",0]],[[],["bool",0]],[[],["bool",0]],[[],["bool",0]],[[],["bool",0]],[[],["bool",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",0]]],[[["i32",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[],["one",8]],[[]],[[["",0]]],[[["",0]]],[[],["zero",8]],[[]],null,[[],["u32",0]],[[],["u32",0]],[[]],[[]],[[],["u32",0]],[[],["u32",0]],[[["u32",0]]],[[]],[[["u32",0]]],[[["u32",0]]],[[["u32",0]]],[[["u32",0]]],[[]],[[]],[[]],[[],["u32",0]],[[],["u32",0]],[[["u32",0]]],[[["u32",0]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["",0]],["option",4]],[[["",0],["",0]],["option",4]],[[["",0],["",0]],["option",4]],[[["",0]],["option",4]],[[["",0],["",0]],["option",4]],[[["",0],["u32",0]],["option",4]],[[["",0],["u32",0]],["option",4]],[[["",0],["",0]],["option",4]],null,null,[[["",0],["",0]],["option",4]],[[["",0],["",0]],["option",4]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,[[]],null,null,null,[[]],[[["",0]]],null,null,null,[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,null,null,[[]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[["",0],["",0]]],null,null,null,null,null,null,[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]]],[[["",0],["u32",0]]],[[["",0],["u32",0]]],[[["",0],["",0]]],null,null,[[["",26,[["clone",8],["one",8],["checkedmul",8]]],["usize",0]],["option",4,[["",26,[["clone",8],["one",8],["checkedmul",8]]]]]],[[["",26,[["clone",8],["one",8],["mul",8,[["",26,[["clone",8],["one",8],["mul",8,[["",26,[["clone",8],["one",8],["mul",8,[["",26,[["clone",8],["one",8],["mul",8,[["",26,[["clone",8],["one",8],["mul",8]]]]]]]]]]]]]]]]]]],["usize",0]],["",26,[["clone",8],["one",8],["mul",8,[["",26,[["clone",8],["one",8],["mul",8,[["",26,[["clone",8],["one",8],["mul",8,[["",26,[["clone",8],["one",8],["mul",8,[["",26,[["clone",8],["one",8],["mul",8]]]]]]]]]]]]]]]]]]]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",0]],[[],["bool",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["signed",8]],["signed",8]],[[["",0]]],[[["signed",8],["signed",8]],["signed",8]],[[["",0],["",0]]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["signed",8]],["signed",8]],[[["",0]]]],"p":[[4,"FloatErrorKind"],[8,"Num"],[3,"ParseFloatError"],[8,"Bounded"],[8,"UpperBounded"],[8,"LowerBounded"],[8,"AsPrimitive"],[8,"NumCast"],[8,"FromPrimitive"],[8,"ToPrimitive"],[8,"FloatConst"],[8,"Float"],[8,"FloatCore"],[8,"One"],[8,"Zero"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedDiv"],[8,"CheckedMul"],[8,"CheckedNeg"],[8,"CheckedRem"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"CheckedSub"],[8,"CheckedEuclid"],[8,"Euclid"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"OverflowingAdd"],[8,"OverflowingMul"],[8,"OverflowingSub"],[8,"Saturating"],[8,"SaturatingAdd"],[8,"SaturatingMul"],[8,"SaturatingSub"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"WrappingSub"],[8,"Pow"],[8,"Real"],[8,"Signed"]]},\
"once_cell":{"doc":"Overview","t":[0,0,0,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["race","sync","unsync","OnceBool","OnceBox","OnceNonZeroUsize","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","default","default","drop","fmt","fmt","fmt","from","from","from","get","get","get","get_or_init","get_or_init","get_or_init","get_or_try_init","get_or_try_init","get_or_try_init","into","into","into","new","new","new","set","set","set","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Lazy","OnceCell","borrow","borrow","borrow_mut","borrow_mut","clone","clone_from","clone_into","default","default","deref","deref_mut","eq","fmt","fmt","force","from","from","from","from","get","get","get_mut","get_or_init","get_or_try_init","get_unchecked","into","into","into_inner","into_value","new","new","set","take","to_owned","try_from","try_from","try_insert","try_into","try_into","type_id","type_id","wait","with_value","Lazy","OnceCell","borrow","borrow","borrow_mut","borrow_mut","clone","clone_from","clone_into","default","default","deref","deref_mut","eq","fmt","fmt","force","from","from","from","from","get","get","get_mut","get_or_init","get_or_try_init","into","into","into_inner","into_value","new","new","set","take","to_owned","try_from","try_from","try_insert","try_into","try_into","type_id","type_id","with_value"],"q":["once_cell","","","once_cell::race","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","once_cell::sync","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","once_cell::unsync","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Thread-safe, non-blocking, “first one wins” flavor of …","Thread-safe, blocking version of <code>OnceCell</code>.","Single-threaded version of <code>OnceCell</code>.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a reference to the underlying value.","Gets the underlying value.","Gets the underlying value.","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new empty cell.","Creates a new empty cell.","Creates a new empty cell.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","","","","","","","","","","A value which is initialized on the first access.","A thread-safe cell which can be written to only once.","","","","","","","","","Creates a new lazy value using <code>Default</code> as the initializing …","","","","","","Forces the evaluation of this lazy value and returns a …","","Returns the argument unchanged.","","Returns the argument unchanged.","Gets the reference to the underlying value.","Gets the reference to the result of this lazy value if it …","Gets the mutable reference to the underlying value.","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Get the reference to the underlying value, without …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>OnceCell</code>, returning the wrapped value. Returns","Consumes this <code>Lazy</code> returning the stored value.","Creates a new empty cell.","Creates a new lazy value with the given initializing …","Sets the contents of this cell to <code>value</code>.","Takes the value out of this <code>OnceCell</code>, moving it back to an …","","","","Like <code>set</code>, but also returns a reference to the final cell …","","","","","Gets the reference to the underlying value, blocking the …","Creates a new initialized cell.","A value which is initialized on the first access.","A cell which can be written to only once. It is not thread …","","","","","","","","","Creates a new lazy value using <code>Default</code> as the initializing …","","","","","","Forces the evaluation of this lazy value and returns a …","","","Returns the argument unchanged.","Returns the argument unchanged.","Gets a reference to the underlying value.","Gets the reference to the result of this lazy value if it …","Gets a mutable reference to the underlying value.","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>OnceCell</code>, returning the wrapped value.","Consumes this <code>Lazy</code> returning the stored value.","Creates a new empty cell.","Creates a new lazy value with the given initializing …","Sets the contents of this cell to <code>value</code>.","Takes the value out of this <code>OnceCell</code>, moving it back to an …","","","","Like <code>set</code>, but also returns a reference to the final cell …","","","","","Creates a new initialized cell."],"i":[0,0,0,0,0,0,1,2,3,1,2,3,1,2,3,1,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,0,0,4,5,4,5,4,4,4,4,5,5,5,4,4,5,5,4,4,4,5,4,5,4,4,4,4,4,5,4,5,4,5,4,4,4,4,5,4,4,5,4,5,4,4,0,0,6,7,6,7,6,6,6,6,7,7,7,6,6,7,7,6,6,6,7,6,7,6,6,6,6,7,6,7,6,7,6,6,6,6,7,6,6,7,6,7,6],"f":[null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[],["oncenonzerousize",3]],[[],["oncebool",3]],[[["",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["",0]],["option",4]],[[["",0]],["option",4,[["nonzerousize",3]]]],[[["",0]],["option",4,[["bool",0]]]],[[["",0]],["",0]],[[["",0]],["nonzerousize",3]],[[["",0]],["bool",0]],[[["",0]],["result",4]],[[["",0]],["result",4,[["nonzerousize",3]]]],[[["",0]],["result",4,[["bool",0]]]],[[]],[[]],[[]],[[],["oncebox",3]],[[],["oncenonzerousize",3]],[[],["oncebool",3]],[[["",0],["box",3]],["result",4,[["box",3]]]],[[["",0],["nonzerousize",3]],["result",4]],[[["",0],["bool",0]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["oncecell",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["oncecell",3]],[[],["lazy",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["oncecell",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["lazy",3]],["",0]],[[]],[[]],[[["never",0]]],[[]],[[["",0]],["option",4]],[[["lazy",3]],["option",4]],[[["",0]],["option",4]],[[["",0]],["",0]],[[["",0]],["result",4]],[[["",0]],["",0]],[[]],[[]],[[],["option",4]],[[["lazy",3]],["result",4]],[[],["oncecell",3]],[[],["lazy",3]],[[["",0]],["result",4]],[[["",0]],["option",4]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["",0]],[[],["oncecell",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["oncecell",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[],["lazy",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["lazy",3]],["",0]],[[]],[[["never",0]]],[[]],[[]],[[["",0]],["option",4]],[[["lazy",3]],["option",4]],[[["",0]],["option",4]],[[["",0]],["",0]],[[["",0]],["result",4]],[[]],[[]],[[],["option",4]],[[["lazy",3]],["result",4]],[[],["oncecell",3]],[[],["lazy",3]],[[["",0]],["result",4]],[[["",0]],["option",4]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["oncecell",3]]],"p":[[3,"OnceBox"],[3,"OnceNonZeroUsize"],[3,"OnceBool"],[3,"OnceCell"],[3,"Lazy"],[3,"OnceCell"],[3,"Lazy"]]},\
"oorandom":{"doc":"A tiny, robust PRNG implementation.","t":[18,18,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["DEFAULT_INC","DEFAULT_INC","Rand32","Rand64","borrow","borrow","borrow_mut","borrow_mut","clone","clone","eq","eq","fmt","fmt","from","from","from_state","from_state","into","into","ne","ne","new","new","new_inc","new_inc","rand_float","rand_float","rand_i32","rand_i64","rand_range","rand_range","rand_u32","rand_u64","state","state","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["oorandom","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The default value for <code>increment</code>. This is basically …","The default value for <code>increment</code>.","A PRNG producing a 32-bit output.","A PRNG producing a 64-bit output.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new PRNG from a saved state from <code>Rand32::state()</code>.","Creates a new PRNG from a saved state from <code>Rand32::state()</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Creates a new PRNG with the given seed and a default …","Creates a new PRNG with the given seed and a default …","Creates a new PRNG.  The two inputs, <code>seed</code> and <code>increment</code>, …","Same as <code>Rand32::new_inc()</code>","Produces a random <code>f32</code> in the range <code>[0.0, 1.0)</code>.","Produces a random <code>f64</code> in the range <code>[0.0, 1.0)</code>.","Produces a random <code>i32</code> in the range <code>[i32::MIN, i32::MAX]</code>.","Produces a random <code>i64</code> in the range <code>[i64::MIN, i64::MAX]</code>.","Produces a random within the given bounds.  Like any <code>Range</code>,","Produces a random within the given bounds.  Like any <code>Range</code>,","Produces a random <code>u32</code> in the range <code>[0, u32::MAX]</code>.","Produces a random <code>u64</code> in the range<code>[0, u64::MAX]</code>.","Returns the internal state of the PRNG.  This allows you …","Returns the internal state of the PRNG.  This allows you …","","","","","",""],"i":[1,2,0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2],"f":[null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["rand32",3]],[[["",0]],["rand64",3]],[[["",0],["rand32",3]],["bool",0]],[[["",0],["rand64",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["rand32",3]],["bool",0]],[[["",0],["rand64",3]],["bool",0]],[[["u64",0]]],[[["u128",0]]],[[["u64",0],["u64",0]]],[[["u128",0],["u128",0]]],[[["",0]],["f32",0]],[[["",0]],["f64",0]],[[["",0]],["i32",0]],[[["",0]],["i64",0]],[[["",0],["range",3,[["u32",0]]]],["u32",0]],[[["",0],["range",3,[["u64",0]]]],["u64",0]],[[["",0]],["u32",0]],[[["",0]],["u64",0]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[3,"Rand32"],[3,"Rand64"]]},\
"plotters":{"doc":"Plotters - A Rust drawing library focus on data plotting …","tn":["backend","chart","coord","data","define_color","drawing","element","prelude","series","style","DrawingBackend","ErrorType","SVGBackend","blit_bitmap","borrow","borrow_mut","draw_circle","draw_circle","draw_line","draw_line","draw_path","draw_path","draw_pixel","draw_pixel","draw_rect","draw_rect","draw_text","draw_text","drop","ensure_prepared","ensure_prepared","estimate_text_size","fill_polygon","fill_polygon","from","get_size","get_size","into","new","present","present","try_from","try_into","type_id","with_string","Bottom","ChartBuilder","ChartContext","ChartState","Coordinate","DualCoordChartContext","DualCoordChartState","LabelAreaPosition","Left","LowerLeft","LowerMiddle","LowerRight","MeshStyle","MiddleLeft","MiddleMiddle","MiddleRight","Right","SecondaryMeshStyle","SeriesAnno","SeriesLabelPosition","SeriesLabelStyle","Top","UpperLeft","UpperMiddle","UpperRight","as_coord_spec","axis_desc_style","axis_desc_style","axis_style","axis_style","backend_coord","background_style","bold_line_style","border_style","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_secondary","build_cartesian_2d","build_cartesian_3d","build_ranged","caption","clone","clone","clone","clone_into","clone_into","clone_into","configure_axes","configure_mesh","configure_secondary_axes","configure_series_labels","deref","deref_mut","disable_axes","disable_mesh","disable_x_axis","disable_x_mesh","disable_y_axis","disable_y_mesh","draw","draw","draw","draw_secondary_series","draw_series","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into_chart_state","into_chart_state","into_coord_trans","into_coord_trans_pair","into_secondary_coord_trans","into_shared_chart_state","into_shared_chart_state","label","label_font","label_style","label_style","legend","legend_area_size","light_line_style","margin","margin","margin_bottom","margin_left","margin_right","margin_top","max_light_lines","on","plotting_area","position","restore","restore","right_y_label_area_size","secondary_plotting_area","set_3d_pixel_range","set_all_label_area_size","set_all_tick_mark_size","set_all_tick_mark_size","set_label_area_size","set_left_and_bottom_label_area_size","set_secondary_coord","set_tick_mark_size","set_tick_mark_size","to_chart_state","to_chart_state","to_owned","to_owned","to_owned","top_x_label_area_size","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_projection","x_desc","x_desc","x_label_area_size","x_label_formatter","x_label_formatter","x_label_offset","x_label_offset","x_label_style","x_labels","x_labels","x_max_light_lines","x_range","y_desc","y_desc","y_label_area_size","y_label_formatter","y_label_formatter","y_label_offset","y_label_offset","y_label_style","y_labels","y_labels","y_max_light_lines","y_range","0","1","0","CoordTranslate","From","ReverseCoordTranslate","Shift","borrow","borrow_mut","cartesian","clone","clone_into","combinators","depth","depth","depth","fmt","from","into","ranged1d","ranged3d","reverse_translate","reverse_translate","to_owned","translate","translate","try_from","try_into","type_id","types","Cartesian2d","Cartesian3d","MeshLine","XMesh","YMesh","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","draw","draw_mesh","from","from","get_x_axis_pixel_range","get_x_range","get_y_axis_pixel_range","get_y_range","into","into","new","reverse_translate","to_owned","translate","try_from","try_from","try_into","try_into","type_id","type_id","x_spec","y_spec","0","0","1","1","2","2","0","BindKeyPointMethod","BindKeyPoints","BuildNestedCoord","Category","GroupBy","IntoLinspace","IntoLogRange","IntoPartialAxis","Linspace","LogCoord","LogRange","LogScalable","NestedRange","NestedValue","ToGroupByRange","Value","ValueType","WithKeyPointMethod","WithKeyPoints","as_f64","axis_pixel_range","axis_pixel_range","bold_points","bold_points_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","category","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","eq","fmt","format","format","format","from","from","from","from","from","from","from","from","from","from","from","from","from_f64","from_index","from_index","from_index","from_index","from_index","group_by","group_by","group_by","index_of","index_of","index_of","index_of","index_of","into","into","into","into","into","into","into","into","key_points","key_points","key_points","key_points","key_points","key_points","light_points","light_points_mut","log_scale","make_partial_axis","map","map","map","map","map","map","ne","nested_coord","nested_coord","nested_coord","nested_value","partial_axis","partial_axis","partial_axis","range","range","range","range","range","range","size","size","size","size","size","step","step","step","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unmap","unmap","unmap","unmap","unmap","use_ceil","use_exact","use_floor","use_round","with_key_point_func","with_key_point_func","with_key_point_func","with_key_points","with_key_points","with_key_points","with_light_point_func","with_light_points","0","0","1","0","Any","AsRangedCoord","Bold","BoldPoints","CenterOf","CoordDescType","DefaultFormatting","DefaultValueFormatOption","DiscreteRanged","Exact","FormatOption","IntoSegmentedCoord","KeyPointHint","KeyPointWeight","Last","LightPoints","NoDefaultFormatting","Ranged","ReversibleRanged","SegmentValue","SegmentedCoord","Value","ValueFormatter","ValueType","allow_light_points","axis_pixel_range","bold_points","bold_points","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","fmt","format","format","format_ext","from","from","from","from","from","from","from","from","from","from_index","from_index","index_of","index_of","into","into","into","into","into","into","into","into_segmented","into_segmented","into_segmented","key_points","key_points","map","map","max_num_points","max_num_points","max_num_points","new","next","next","next","previous","previous","previous","range","range","size","size","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unmap","unmap","values","values","values","weight","weight","weight","0","0","Cartesian3d","ProjectionMatrix","ProjectionMatrixBuilder","as_mut","as_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","depth","fmt","from","from","from","from","into","into","into","into_matrix","map_3d","mul","mul","mul","new","new","normalize","one","pitch","projected_depth","projected_depth","projection","rotate","scale","scale","set_coord_pixel_range","set_pivot","set_projection","shift","to_owned","to_owned","to_owned","translate","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_projection","yaw","zero","RangedCoordf32","RangedCoordf64","RangedCoordi128","RangedCoordi32","RangedCoordi64","RangedCoordu128","RangedCoordu32","RangedCoordu64","RangedCoordusize","RangedSlice","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","format","format","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_index","from_index","from_index","from_index","from_index","from_index","from_index","from_index","index_of","index_of","index_of","index_of","index_of","index_of","index_of","index_of","into","into","into","into","into","into","into","into","into","into","key_points","key_points","key_points","key_points","key_points","key_points","key_points","key_points","key_points","key_points","map","map","map","map","map","map","map","map","map","map","range","range","range","range","range","range","range","range","range","range","size","size","size","size","size","size","size","size","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unmap","unmap","unmap","unmap","unmap","unmap","unmap","unmap","unmap","unmap","Quartiles","borrow","borrow_mut","clone","clone_into","fitting_range","float","fmt","from","into","median","new","to_owned","try_from","try_into","type_id","values","FloatPrettyPrinter","allow_scientific","borrow","borrow_mut","from","into","max_decimal","min_decimal","pretty_print_float","print","try_from","try_into","type_id","BackendError","DrawingArea","DrawingAreaErrorKind","DummyBackendError","IntoDrawingArea","LayoutError","Rect","SharingError","apply_coord_spec","as_coord_spec","as_coord_spec_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","dim_in_pixel","draw","draw_mesh","draw_pixel","draw_text","estimate_text_size","fill","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get_base_pixel","get_pixel_range","get_x_axis_pixel_range","get_x_range","get_y_axis_pixel_range","get_y_range","into","into","into","into","into_coord_spec","into_drawing_area","map_coordinate","margin","present","relative_to_height","relative_to_width","shrink","split_by_breakpoints","split_evenly","split_horizontally","split_vertically","strip_coord_spec","titled","to_owned","to_owned","to_string","to_string","truncate","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","use_screen_coord","0","BackendCoordAndZ","BackendCoordOnly","Circle","ComposedElement","CoordMapper","Cross","Cubiod","Drawable","DynElement","EmptyElement","IntoDynElement","IntoIter","MultiLineText","Output","Path","PathElement","Pie","Pixel","Point","PointCollection","PointElement","Polygon","Rectangle","Text","TriangleMarker","add","add","at","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","compute_line_layout","draw","draw","draw","draw","draw","draw","draw","draw","draw","draw","draw","draw","draw","draw","draw","estimate_dimension","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","from_string","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_dyn","label_offset","label_style","make_point","make_point","make_point","make_point","make_point","map","map","map","new","new","new","new","new","new","new","new","new","new","new","percentages","point_iter","push_line","relocate","set_line_height","set_margin","start_angle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","0","1","1","1","2","2","2","3","AreaSeries","AsRelative","BLACK","BLUE","BindKeyPointMethod","BindKeyPoints","Bold","Bottom","BuildNestedCoord","COLORS","CYAN","Cartesian2d","Category","CenterOf","ChartBuilder","ChartContext","Circle","Color","CoordTranslate","Coordinate","Cross","Cubiod","DiscreteRanged","DrawResult","DrawingBackend","DynElement","EmptyElement","ErrorType","Exact","FontDesc","FontFamily","FontStyle","FontTransform","From","GREEN","GroupBy","HSLColor","IntoDynElement","IntoFont","IntoLinspace","IntoLogRange","IntoPartialAxis","IntoSegmentedCoord","IntoTextStyle","Italic","LabelAreaPosition","Last","Left","LineSeries","Linspace","LogCoord","LogRange","LogScalable","LowerLeft","LowerMiddle","LowerRight","MAGENTA","MiddleLeft","MiddleMiddle","MiddleRight","Monospace","MultiLineText","Name","NestedRange","NestedValue","None","Normal","Oblique","Palette","Palette100","Palette99","Palette9999","PaletteColor","PathElement","Pie","Pixel","Polygon","Quartiles","RED","RGBAColor","RGBColor","Ranged","Rectangle","Right","Rotate180","Rotate270","Rotate90","SVGBackend","SansSerif","SegmentValue","SeriesLabelPosition","Serif","ShapeStyle","TRANSPARENT","Text","TextStyle","ToGroupByRange","Top","TriangleMarker","UpperLeft","UpperMiddle","UpperRight","Value","ValueType","WHITE","YELLOW","as_f64","as_str","as_str","blit_bitmap","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","color","color","draw_circle","draw_line","draw_path","draw_pixel","draw_rect","draw_text","ensure_prepared","estimate_text_size","fill_polygon","filled","font","from","from","from","from","from","from_f64","from_index","get_size","index_of","into","into","into","into_dyn","into_font","into_text_style","into_text_style","log_scale","make_partial_axis","pos","present","size","stroke_width","to_backend_color","to_owned","to_owned","to_owned","transform","translate","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","0","0","1","0","0","0","1","AreaSeries","LineSeries","border_style","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","into_iter","into_iter","new","new","next","next","point_size","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","1","1","1","2","2","2","3","AsRelative","BLACK","BLUE","Bold","COLORS","CYAN","Color","FontDesc","FontError","FontFamily","FontResult","FontStyle","FontTransform","GREEN","HSLColor","Height","IntoFont","IntoTextStyle","Italic","LayoutBox","MAGENTA","Monospace","Name","None","Normal","Oblique","Palette","Palette100","Palette99","Palette9999","PaletteColor","RED","RGBAColor","RGBColor","RelativeSize","Rotate180","Rotate270","Rotate90","SansSerif","Serif","ShapeStyle","SizeDesc","Smaller","TRANSPARENT","TextStyle","WHITE","Width","YELLOW","alpha","alpha","alpha","anchor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","box_size","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","color","color","color","color","color","color","color","color","colors","default","default","default","default","draw","draw","eq","eq","eq","eq","family","filled","filled","filled","filled","filled","fmt","fmt","fmt","fmt","font","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_family","get_name","get_size","get_style","get_transform","hash","hash","in_pixels","in_pixels","into","into","into","into","into","into","into","into","into","into","into","into_font","into_text_style","into_text_style","into_text_style","layout_box","layout_box","max","min","mix","mix","mix","ne","ne","ne","ne","new","percent","percent","percent","percent_height","percent_height","percent_height","percent_width","percent_width","percent_width","pick","pick","pick","pick","pos","pos","resize","rgb","rgb","rgb","size","stroke_width","stroke_width","stroke_width","stroke_width","stroke_width","stroke_width","style","style","text_anchor","to_backend_color","to_backend_color","to_backend_color","to_backend_color","to_backend_color","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_rgba","to_rgba","to_rgba","transform","transform","transform","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_anchor","with_anchor","with_anchor","with_color","with_color","with_color","0","0","0","0","BLACK","BLUE","CYAN","GREEN","MAGENTA","RED","TRANSPARENT","WHITE","YELLOW","Bottom","Center","Center","HPos","Left","Pos","Right","Top","VPos","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","from","from","from","h_pos","into","into","into","new","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","v_pos"],"q":["plotters","","","","","","","","","","plotters::backend","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","plotters::chartplotters::chart::SeriesLabelPosition","","plotters::coord","","","","","","","","","","","","","","","","","","","","","","","","","","","","plotters::coord::cartesian","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","plotters::coord::cartesian::MeshLine","","","","","","plotters::coord::combinatorsplotters::coord::combinators::NestedValue","","","plotters::coord::ranged1d","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","plotters::coord::ranged1d::SegmentValue","","plotters::coord::ranged3d","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","plotters::coord::typesplotters::data","","","","","","","","","","","","","","","","","plotters::data::float","","","","","","","","","","","","","plotters::drawing","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","plotters::drawing::DrawingAreaErrorKind","plotters::elementplotters::preludeplotters::prelude::FontFamily","plotters::prelude::NestedValue","","","plotters::prelude::SegmentValue","","plotters::prelude::SeriesLabelPosition","","plotters::series","","","","","","","","","","","","","","","","","","","","","","","","plotters::styleplotters::style::FontFamily","plotters::style::RelativeSize","","","plotters::style::colors","","","","","","","","","plotters::style::text_anchor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["This module contains some useful re-export of backend …","The high-level plotting abstractions.","One of the key features of Plotters is flexible coordinate …","The data processing module, which implements algorithms …","Defines and names a color based on its R, G, B, A values.","The drawing utils for Plotters. In Plotters, we have two …","Defines the drawing elements, the high-level drawing unit …","The module imports the most commonly used types and …","This module contains predefined types of series. The …","The style for shapes and text, font, color, etc.","The drawing backend trait, which implements the low-level …","The error type reported by the backend","The SVG image drawing backend","Blit a bitmap on to the backend.","","","","Draw a circle on the drawing backend","","Draw a line on the drawing backend","","Draw a path on the drawing backend","Draw a pixel on the drawing backend","","","Draw a rectangle on the drawing backend","","Draw a text on the drawing backend","","Ensure the backend is ready to draw","","Estimate the size of the horizontal text if rendered on …","","","Returns the argument unchanged.","Get the dimension of the drawing backend in pixels","","Calls <code>U::from(self)</code>.","Create a new SVG drawing backend","Finalize the drawing step and present all the changes. …","","","","","Create a new SVG drawing backend and store the document …","Bottom of the figure","The helper object to create a chart context, which is used …","The context of the chart. This is the core object of …","A chart context state - This is the data that is needed to …","Places the series label at the specific location in …","The chart context that has two coordinate system attached. …","The chart state for a dual coord chart, see the detailed …","Specifies one of the four label positions around the …","Left side of the figure","Places the series label at the lower left","Places the series label at the lower middle","Places the series label at the lower right","The struct that is used for tracking the configuration of …","Places the series label at the middle left","Places the series label at the middle middle","Places the series label at the middle right","Right side of the figure","The style used to describe the mesh and axis for a …","The annotations (such as the label of the series, the …","Useful to specify the position of the series label.","The struct to specify the series label of a target chart …","Top of the figure","Places the series label at the upper left","Places the series label at the upper middle","Places the series label at the upper right","Cast the reference to a chart context to a reference to …","Set the axis description’s style. If not given, use …","Set the axis description’s style. If not given, use …","Set the style definition for the axis","Set the style definition for the axis","Maps the coordinate to the backend coordinate. This is …","Sets the background style of the label series area.","Set the style for the coarse grind grid","Sets the style of the label series area.","","","","","","","","","","","","","","","","","","","","","","","","","Borrow a mutable reference to the chart context that uses …","Builds a chart with a 2D Cartesian coordinate system.","Builds a chart with a 3D Cartesian coordinate system.","This function has been renamed to …","Sets the title or caption of the chart.","","","","","","","Create an axis configuration object, to set line styles, …","Initialize a mesh configuration object and mesh drawing …","Start configure the style for the secondary axes","Configure the styles for drawing series labels in the chart","","","Disable drawing all axes","Disable drawing all meshes","Disable drawing the X axis","Disable the mesh for the x axis.","Disable drawing the Y axis","Disable the mesh for the y axis","Draw the axes for the secondary coordinate system","Draw the configured mesh on the target plot","Draws the series label area.","Draw a series use the secondary coordinate system.","Draws a data series. A data series in Plotters is …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert a chart context into a chart state, by doing so, …","Convert the chart context into a chart state, similar to …","Convert the chart context into an closure that can be used …","Convert the chart context into a pair of closures that …","Convert the chart context into the secondary coordinate …","Convert the chart context into a sharable chart state. …","Convert the chart context into a sharable chart state.","Sets the series label for the current series.","Sets the font for series labels.","Set the label style for the secondary axis","Set the style of the label text","Sets the legend element creator function.","Sets the size of the legend area.","Set the style for the fine grind grid","Sets the size of the four margins of the chart.","Sets the margin of the series label drawing area.","Sets the size of the bottom margin of the chart.","Sets the size of the left margin of the chart.","Sets the size of the right margin of the chart.","Sets the size of the top margin of the chart.","Set the maximum number of divisions for the minor grid","Create a chart builder on the given drawing area","Get a reference of underlying plotting area","Sets the series label positioning style","Restore the chart state on the given drawing area","Restore the chart context on the given drawing area","Sets the size of the Y label area to the right of the …","Get a reference to the drawing area that uses the …","Sets the 3d coordinate pixel range.","Sets the size of the four label areas of the chart.","Set all the tick marks to the same size <code>value</code>: The new size","Set all the tick mark to the same size <code>value</code>: The new size","Sets the size of a chart label area.","Sets the size of the left and bottom label areas of the …","Convert this chart context into a dual axis chart context …","Sets the tick mark size for a given label area position. …","Set the tick mark size on the axes. When this is set to …","Make the chart context, do not consume the chart context …","Copy the coordinate specs and make a chart state","","","","Sets the size of the X label area at the top of the chart.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Override the 3D projection matrix. This function allows to …","Set the X axis’s description","Set the X axis’s description","Sets the size of the X label area at the bottom of the …","Set the formatter function for the X label text","Set the formatter function for the X label text","The offset of x labels. This is used when we want to place …","The offset of x labels. This is used when we want to place …","Set the style of the label X axis text","Set how many labels for the X axis at most","Set how many labels for the X axis at most","Set the maximum number of divisions for the minor grid","Get the range of X axis","Set the Y axis’s description","Set the Y axis’s description","Sets the size of the Y label area to the left of the chart.","Set the formatter function for the Y label text","Set the formatter function for the Y label text","The offset of y labels. This is used when we want to place …","The offset of y labels. This is used when we want to place …","Set the style of the label Y axis text","Set how many label for the Y axis at most","Set how many label for the Y axis at most","Set the maximum number of divisions for the minor grid","Get range of the Y axis","","","","The trait that translates some customized object to the …","Specifies the object to be translated from","The trait indicates that the coordinate system supports …","The coordinate translation that only impose shift","","","Groups Cartesian ranged coordinates in 2d and 3d.","","","The coordinate combinators","Get the Z-value of current coordinate","Get the Z-value of current coordinate","Get the Z-value of current coordinate","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","The one-dimensional coordinate system abstraction.","Ranged coordinates in 3d.","Reverse translate the coordinate from the drawing …","","","Translate the guest coordinate to the guest coordinate","","","","","The primitive types supported by Plotters coordinate system","A 2D Cartesian coordinate system described by two 1D …","A 3D cartesian coordinate system","Represent a coordinate mesh for the two ranged value …","Used to plot the horizontal lines of the mesh","Used to plot the vertical lines of the mesh","","","","","","","Draw a single mesh line onto the backend","Draw the mesh for the coordinate system","Returns the argument unchanged.","Returns the argument unchanged.","Get the horizental backend coordinate range where X axis …","Get the range of X axis","Get the vertical backend coordinate range where Y axis …","Get the range of Y axis","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new 2D cartesian coordinate system","","","","","","","","","","Get the 1D coordinate spec for X axis","Get the 1D coordinate spec for Y axis","","","","","","","","Bind an existing coordinate spec with a given key points …","Bind a existing coordinate spec with a given key points …","Used to build a nested coordinate system.","Category value","Grouping the value in the coordinate specification.","Makes a linspace coordinate from the ranged coordinates.","Convert a range to a log scale coordinate spec","The trait for the types that can be converted into a …","The coordinate combinator that transform a continous …","A log scaled coordinate axis","The logarithmic coodinate decorator. This decorator is …","The trait for the type that is able to be presented in the …","A nested coordinate spec which is a discrete coordinate on …","Describe a value for a nested coordinate","The trait that provides method <code>Self::group_by</code> function …","One exact nested value","The type of the value","The coordinate decorator that allows customized keypoint …","The coordinate decorator that binds a key point vector. …","Make the conversion from the type to the floating point …","","","Get a reference to the bold points","Get a mut reference to the bold points","","","","","","","","","","","","","","","","","Get the category of current nest value","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Convert a floating point number to the scale","","","","","","Make a grouping ranged value, see the documentation for …","Make a grouping ranged value, see the documentation for …","Make a grouping ranged value, see the documentation for …","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Get a reference to light key points","Get a mut reference to the light key points","Make the log scale coordinate","Make a partial axis based on the percentage of visible …","","","","","","","","Builds a nested coordinate system.","Builds a nested coordinate system.","Builds a nested coordinate system.","Get the nested value from this value","Make the partial axis","Make the partial axis","Make the partial axis","","","","","","","","","","","","Set the step value, make a linspace coordinate from the …","Set the step value, make a linspace coordinate from the …","Set the step value, make a linspace coordinate from the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set the linspace use the round up method for value matching","Set the linspace use the exact match method for value …","Set the linspace use the round down method for value …","Set the linspace use the best match method for value …","Bind a existing coordinate spec with a given key points …","Bind a existing coordinate spec with a given key points …","Bind a existing coordinate spec with a given key points …","Bind a existing coordinate spec with a given key points …","Bind a existing coordinate spec with a given key points …","Bind a existing coordinate spec with a given key points …","Define the light key point algorithm, by default this …","Specify the light key points, which is used to render the …","","","","","Allows any key points","The trait for the type that can be converted into a ranged …","Allows only bold key points","The key point hint indicates we only need key point for …","Means we are referring the center of position <code>T</code> and the …","Type to describe a coordinate system","This makes the ranged coord uses the default <code>Debug</code> based …","Since stable Rust doesn’t have specialization, it’s …","The trait indicates the coordinate is discrete This means …","Means we are referring the exact position of value <code>T</code>","This marker decides if Plotters default ValueFormatter …","The trait for types that can decorated by SegmentedCoord …","The trait for a hint provided to the key point algorithm …","Specify the weight of key points.","Referring the last dummy element","The key point hint indicates that we are using the key …","This markers prevent Plotters to implement the default …","The trait that indicates we have a ordered and ranged value","The trait indicates the ranged value can be map reversely, …","The value that used by the segmented coordinate.","A <code>SegmentedCoord</code> is a decorator on any discrete coordinate …","Type for values in the given coordinate system","Determine how we can format a value in a coordinate system …","The type of this value in this range specification","Check if this key point weight setting allows light point","This function provides the on-axis part of its range","Returns the point number constraint for the bold points","","","","","","","","","","","","","","","","","","","","","Format the value","","Determine how we can format a value in a coordinate system …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Reverse map the index to the value","","Map a value to the index","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert current ranged value into a segmented coordinate","Convert current ranged value into a segmented coordinate","Convert current ranged value into a segmented coordinate","This function gives the key points that we can draw a grid …","","This function maps the value to i32, which is the drawing …","","Returns the max number of key points","","","Create a new light key point hind","Returns the next value in this range","Returns the next value in this range","Returns the next value in this range","Returns the previous value in this range","Returns the previous value in this range","Returns the previous value in this range","Get the range of this value","","Get the number of element in the range Note: we assume …","","","","","","","","","","","","","","","","","","","","","","","","","Perform the reverse mapping","","Return a iterator that iterates over the all possible …","Return a iterator that iterates over the all possible …","Return a iterator that iterates over the all possible …","Returns the weight for this hint","","","","","A 3D cartesian coordinate system","The projection matrix which is used to project the 3D …","The helper struct to build a projection matrix","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Build the matrix based on the configuration","Do not project, only transform the guest coordinate system","","","","Creates a new, default projection matrix builder object.","Create a new coordinate","Normalize the matrix, this will make the metric unit to 1","Returns the identity matrix","Specifies the pitch of the 3D coordinate system","Get the distance of the point in guest coordinate from the …","Get the depth of the projection","Get the projection matrix","Returns the matrix which rotates the coordinate","Returns the matrix that applies a scale factor","Specifies the scale of the 3D coordinate system","Sets the pixel sizes and projections according to the …","Set the pivot point, which means the 3D coordinate “…","Set the projection matrix","Returns the matrix which shift the coordinate","","","","","","","","","","","","","","Creates a Cartesian3d object with the given projection.","Specifies the yaw of the 3D coordinate system","Returns the zero maxtrix","The ranged coordinate for type f32","The ranged coordinate for type f64","The ranged coordinate for type i128","The ranged coordinate for type i32","The ranged coordinate for type i64","The ranged coordinate for type u128","The ranged coordinate for type u32","The ranged coordinate for type u64","The ranged coordinate for type usize","A range that is defined by a slice of values.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The quartiles","","","","","Build a range that fits the data","Handles the printing of floating-point numbers.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Get the quartiles median.","Create a new quartiles struct with the values calculated …","","","","","Get the quartiles values.","Handles printing of floating point numbers","Whether scientific notation is allowed","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Maximum allowed number of decimal digits","Minimum allowed number of decimal digits","The function that pretty prints the floating number Since …","Handles printing of floating point numbers","","","","The error is due to drawing backend failure","The abstraction of a drawing area. Plotters uses drawing …","The error description of any drawing area API","This is the dummy backend placeholder for the backend that …","A type which can be converted into a root drawing area","The error caused by invalid layout","The representation of the rectangle in backend canvas","We are not able to get the mutable reference of the …","Apply a new coord transformation object and returns a new …","Returns the coordinates by reference","Returns the coordinates by mutable reference","","","","","","","","","","","","","Get the area dimension in pixel","Draw an high-level element","Draw the mesh on a area","Draw a single pixel","Draw text on the drawing area","Estimate the dimension of the text if drawn on this …","Fill the entire drawing area with a color","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get the left upper conner of this area in the drawing …","Get the pixel range of this area","Get the range of X of the backend coordinate for current …","Get the range of X of the guest coordinate for current …","Get the range of Y of the backend coordinate for current …","Get the range of Y of the guest coordinate for current …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the coordinates by value","Convert the type into a root drawing area","Map coordinate to the backend coordinate","Create a margin for the given drawing area and returns the …","Present all the pending changes to the backend","Compute the relative size based on the drawing area’s …","Compute the relative size based on the drawing area’s …","Shrink the region, note all the locations are in guest …","Split the drawing area into a grid with specified …","Split the drawing area evenly","Split the drawing area horizontally","Split the drawing area vertically","Strip the applied coordinate specification and returns a …","Draw a title of the drawing area and return the remaining …","","","","","Make the coordinate in the range of the rectangle","","","","","","","","","","","","","Strip the applied coordinate specification and returns a …","","Used for 3d coordinate transformations.","Used for 2d coordinate transformations.","A circle element","A container for two drawable elements, used for …","Useful to translate from guest coordinates to backend …","A cross marker for visualizing data series.","Represents a cuboid, a six-faced solid.","The trait indicates we are able to draw it on a drawing …","The container for a dynamically dispatched element","An empty composable element. This is the starting point of …","The trait that makes the conversion from the statically …","The point iterator","An multi-line text element. The <code>Text</code> element allows only …","Specifies the output data from the translation","This is a deprecated type. Please use new name <code>PathElement</code> …","An element of a series of connected lines","A Pie Graph","An element representing a single pixel.","The item in point iterator","A type which is logically a collection of points, under …","A common trait for elements that can be interpreted as …","An element of a filled polygon","A rectangle element","A single line text element. This can be owned or borrowed …","A triangle marker for visualizing data series.","","","An empty composable element. This is the starting point of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compute the line layout","Actually draws the element. The key points is already …","","","","","","","","","","","","","","","Estimate the multi-line text element’s dimension","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Parse a multi-line text into an multi-line element.","Parse a multi-line text into an multi-line element.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Make the conversion","Sets the offset to labels, to distanciate them …","","Point creator.","","","","","Performs the translation from guest coordinates to backend …","","","Creates a new pixel.","Create a new path","Create a new path","Create a new circle element","Create a new polygon","Creates a cuboid.","Create a new text element","Create an empty multi-line text element. Lines can be …","Creates a cross marker.","Creates a triangle marker.","Build a Pie object. Assumes a start angle at 0.0, which is …","enables drawing the wedge’s percentage in the middle of …","framework to do the coordinate mapping","Push a new line into the given multi-line text <code>line</code>: The …","Move the location to the specified location","Set the line height of the multi-line text element","Set the margin of the rectangle","Pass an angle in degrees to change the default. Default is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An area series is similar to a line series but uses a …","Allows a value turns into a relative size","","","Bind an existing coordinate spec with a given key points …","Bind a existing coordinate spec with a given key points …","The bold style","Bottom of the figure","Used to build a nested coordinate system.","Array of colors","","A 2D Cartesian coordinate system described by two 1D …","Category value","Means we are referring the center of position <code>T</code> and the …","The helper object to create a chart context, which is used …","The context of the chart. This is the core object of …","A circle element","Any color representation","The trait that translates some customized object to the …","Places the series label at the specific location in …","A cross marker for visualizing data series.","Represents a cuboid, a six-faced solid.","The trait indicates the coordinate is discrete This means …","The type used to returns a drawing operation that can be …","The drawing backend trait, which implements the low-level …","The container for a dynamically dispatched element","An empty composable element. This is the starting point of …","The error type reported by the backend","Means we are referring the exact position of value <code>T</code>","Describes a font","Describes font family. This can be either a specific font …","Describes the font style. Such as Italic, Oblique, etc.","Specifying text transformations","Specifies the object to be translated from","","Grouping the value in the coordinate specification.","The color described by HSL color space","The trait that makes the conversion from the statically …","The trait that allows some type turns into a font …","Makes a linspace coordinate from the ranged coordinates.","Convert a range to a log scale coordinate spec","The trait for the types that can be converted into a …","The trait for types that can decorated by SegmentedCoord …","Trait for values that can be converted into <code>TextStyle</code> …","The italic style","Specifies one of the four label positions around the …","Referring the last dummy element","Left side of the figure","The line series object, which takes an iterator of data …","The coordinate combinator that transform a continous …","A log scaled coordinate axis","The logarithmic coodinate decorator. This decorator is …","The trait for the type that is able to be presented in the …","Places the series label at the lower left","Places the series label at the lower middle","Places the series label at the lower right","","Places the series label at the middle left","Places the series label at the middle middle","Places the series label at the middle right","The system default monospace font","An multi-line text element. The <code>Text</code> element allows only …","A specific font family name","A nested coordinate spec which is a discrete coordinate on …","Describe a value for a nested coordinate","Nothing to transform","The normal style","The oblique style","Represents a color palette","The palette of 100% accessibility","The palette of 99% accessibility","The palette of 99.99% accessibility","A color in the given palette","An element of a series of connected lines","A Pie Graph","An element representing a single pixel.","An element of a filled polygon","The quartiles","","The RGBA representation of the color, Plotters use RGBA as …","The color described by its RGB value","","A rectangle element","Right side of the figure","Rotating the text 180 degree clockwise","Rotating the text 270 degree clockwise","Rotating the text 90 degree clockwise","The SVG image drawing backend","The system default sans-serif font family","The value that used by the segmented coordinate.","Useful to specify the position of the series label.","The system default serif font family","Style for any shape","","A single line text element. This can be owned or borrowed …","Style of a text","The trait that provides method <code>Self::group_by</code> function …","Top of the figure","A triangle marker for visualizing data series.","Places the series label at the upper left","Places the series label at the upper middle","Places the series label at the upper right","One exact nested value","The type of the value","","","Make the conversion from the type to the floating point …","Make a CSS compatible string for the font family name. …","Convert the font style into a CSS compatible string which …","Blit a bitmap on to the backend.","","","","","","","","","","","","","Specification of the color.","The text color","Draw a circle on the drawing backend","Draw a line on the drawing backend","Draw a path on the drawing backend","Draw a pixel on the drawing backend","Draw a rectangle on the drawing backend","Draw a text on the drawing backend","Ensure the backend is ready to draw","Estimate the size of the horizontal text if rendered on …","","Whether the style is filled with color.","The font description","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Convert a floating point number to the scale","Reverse map the index to the value","Get the dimension of the drawing backend in pixels","Map a value to the index","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Make the conversion","Make the font description from the source type","Converts the value into a TextStyle value.","","Make the log scale coordinate","Make a partial axis based on the percentage of visible …","The anchor point position","Finalize the drawing step and present all the changes. …","Get the number of element in the range Note: we assume …","Stroke width.","Normalize this color representation to the backend color","","","","Transform the coordinate to perform the rotation","Translate the guest coordinate to the guest coordinate","","","","","","","","","","","","","","","","","","An area series is similar to a line series but uses a …","The line series object, which takes an iterator of data …","Sets the border style of the area series.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Creates an area series with transparent border.","Creates a new line series based on a data iterator and a …","","","Sets the size of the points in the series, in pixels.","","","","","","","","","","","","","","","","","Allows a value turns into a relative size","","","The bold style","Array of colors","","Any color representation","Describes a font","The error type for the font implementation","Describes font family. This can be either a specific font …","The type we used to represent a result of any font …","Describes the font style. Such as Italic, Oblique, etc.","Specifying text transformations","","The color described by HSL color space","Percentage height","The trait that allows some type turns into a font …","Trait for values that can be converted into <code>TextStyle</code> …","The italic style","Represents a box where a text label can be fit","","The system default monospace font","A specific font family name","Nothing to transform","The normal style","The oblique style","Represents a color palette","The palette of 100% accessibility","The palette of 99% accessibility","The palette of 99.99% accessibility","A color in the given palette","","The RGBA representation of the color, Plotters use RGBA as …","The color described by its RGB value","Describes a relative size, might be 1. portion of height …","Rotating the text 180 degree clockwise","Rotating the text 270 degree clockwise","Rotating the text 90 degree clockwise","The system default sans-serif font family","The system default serif font family","Style for any shape","The trait that describes a size, it may be a relative size …","Percentage of either height or width, which is smaller","","Style of a text","","Percentage width","","Get the alpha channel of the color","Get the alpha channel of the color","Get the alpha channel of the color","","","","","","","","","","","","","","","","","","","","","","","","Get the size of the text if rendered in this font. This is …","","","","","","","","","","","","","","","","","Returns a new text style object with the specified <code>color</code>.","Returns the color as interpreted by the backend.","","Sets the color of the style.","Specification of the color.","The text color","Basic predefined colors.","","","","","Actually draws a font with a drawing function","","","","","","","Make a filled style form the color","Make a filled style form the color","Make a filled style form the color","Returns a filled style with the same color and stroke …","Whether the style is filled with color.","","","","","The font description","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the font family","Get the name of the font","Get the size of font","Get the name of the style","Get the font transformation description","","","Convert the size into the number of pixels","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Make the font description from the source type","Converts the value into a TextStyle value.","","","Get the size of the text if rendered in this font","","Set the upper bound of the relative size","Set the lower bound of the relative size.","Mix the color with given opacity","Mix the color with given opacity","Mix the color with given opacity","","","","","Create a new font","Make the value a relative size of percentage of minimal of …","Make the value a relative size of percentage of minimal of …","Make the value a relative size of percentage of minimal of …","Make the value a relative size of percentage of height","Make the value a relative size of percentage of height","Make the value a relative size of percentage of height","Make the value a relative size of percentage of width","Make the value a relative size of percentage of width","Make the value a relative size of percentage of width","Returns a color from the palette","Returns a color from the palette","Returns a color from the palette","Pick a color from the palette","Sets the anchor position.","The anchor point position","Create a new font desc with the same font but different …","Convert the RGB representation to the standard RGB tuple","Convert the RGB representation to the standard RGB tuple","Convert the RGB representation to the standard RGB tuple","","Make a shape style with stroke width from a color","Make a shape style with stroke width from a color","Make a shape style with stroke width from a color","Returns the stroke width.","Returns a new style with the same color and the specified …","Stroke width.","Set the style of the font","","Text anchor attributes are used to properly position the …","Normalize this color representation to the backend color","","","","","","","","","","","","Convert the color into the RGBA color which is internally …","Convert the color into the RGBA color which is internally …","Convert the color into the RGBA color which is internally …","Set the font transformation","Sets the font transformation of the style.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Specifies the position of the text anchor relative to the …","Specifies the position of the text anchor relative to the …","Specifies the position of the text anchor relative to the …","Specifies the color of the text element","Specifies the color of the text element","Specifies the color of the text element","","","","","Black (■ <em>rgb = (0, 0, 0)</em>)","Blue (■ <em>rgb = (0, 0, 255)</em>)","Cyan (■ <em>rgb = (0, 255, 255)</em>)","Green (■ <em>rgb = (0, 255, 0)</em>)","Magenta (■ <em>rgb = (255, 0, 255)</em>)","Red (■ <em>rgb = (255, 0, 0)</em>)","Transparent (■ <em>rgba = (0, 0, 0, 0.0)</em>)","White (■ <em>rgb = (255, 255, 255)</em>)","Yellow (■ <em>rgb = (255, 255, 0)</em>)","Anchor point is on the bottom of the text","Anchor point is in the horizontal center of the text","Anchor point is in the vertical center of the text","The horizontal position of the anchor point relative to …","Anchor point is on the left side of the text","The text anchor position.","Anchor point is on the right side of the text","Anchor point is on the top of the text","The vertical position of the anchor point relative to the …","","","","","","","","","","","","","Create a default text anchor position (top left).","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The horizontal position of the anchor point","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new text anchor position.","","","","","","","","","","","","","The vertical position of the anchor point"],"i":[0,0,0,0,0,0,0,0,0,0,0,1,0,1,2,2,2,1,2,1,2,1,1,2,2,1,2,1,2,1,2,1,2,1,2,1,2,2,2,1,2,2,2,2,2,3,0,0,0,4,0,0,0,3,4,4,4,0,4,4,4,3,0,0,0,0,3,4,4,4,5,6,7,6,7,5,8,7,8,9,5,10,10,6,7,11,4,8,3,12,13,9,5,10,10,6,7,11,4,8,3,12,13,10,9,9,9,9,3,12,13,3,12,13,5,5,10,5,10,10,7,7,7,7,7,7,6,7,8,10,5,9,5,10,6,7,11,4,8,3,12,12,12,13,13,13,9,5,10,6,7,11,4,8,3,12,13,5,10,5,10,10,5,10,11,8,6,7,11,8,7,9,8,9,9,9,9,7,9,5,8,12,13,9,10,5,9,6,7,9,9,5,6,7,5,10,3,12,13,9,9,5,10,6,7,11,4,8,3,12,13,9,5,10,6,7,11,4,8,3,12,13,9,5,10,6,7,11,4,8,3,12,13,5,6,7,9,6,7,6,7,7,6,7,7,5,6,7,9,6,7,6,7,7,6,7,7,5,14,14,15,0,16,0,0,15,15,0,15,15,0,16,16,16,15,15,15,0,0,17,15,15,16,15,15,15,15,0,0,0,0,18,18,18,19,18,19,19,19,18,19,18,19,19,19,19,19,18,19,19,19,19,19,18,19,18,19,18,19,19,19,20,21,20,21,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,23,24,0,0,25,26,27,26,26,26,27,28,29,30,31,22,23,26,27,28,29,30,31,22,23,23,30,31,22,23,30,31,22,23,23,23,29,30,31,26,27,28,28,29,30,31,22,23,23,23,23,25,26,27,29,30,31,32,32,32,26,27,29,30,31,26,27,28,29,30,31,22,23,26,27,28,29,30,31,26,26,24,0,26,27,28,29,30,31,23,33,33,33,23,34,34,34,26,27,28,29,30,31,26,27,29,30,31,35,35,35,30,31,22,23,26,27,28,29,30,31,22,23,26,27,28,29,30,31,22,23,26,27,28,29,30,31,22,23,26,27,29,30,31,31,31,31,31,36,36,36,37,37,37,27,26,38,39,39,40,41,0,41,0,42,43,0,0,0,42,44,0,0,0,42,0,0,0,0,0,0,43,0,44,41,44,45,46,47,48,41,40,46,49,42,47,48,41,40,46,49,42,49,42,49,42,42,50,49,50,47,48,41,40,46,49,42,42,42,51,49,51,49,47,48,41,40,46,49,42,52,52,52,44,49,44,49,45,40,46,46,51,51,51,51,51,51,44,49,51,49,49,42,47,48,41,40,46,49,42,47,48,41,40,46,49,42,47,48,41,40,46,49,42,53,49,51,51,51,45,40,46,54,55,0,0,0,56,56,56,57,58,56,57,58,56,57,58,56,57,58,56,57,58,56,56,56,57,58,56,57,58,57,58,56,56,56,57,58,56,56,57,56,58,58,56,56,57,58,57,58,56,56,57,58,58,56,57,58,56,57,58,56,57,58,58,57,56,0,0,0,0,0,0,0,0,0,0,59,60,61,62,63,64,65,66,67,68,59,60,61,62,63,64,65,66,67,68,59,60,61,62,63,64,65,66,67,68,59,60,61,62,63,64,65,66,67,68,59,60,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,61,62,63,64,65,66,67,68,61,62,63,64,65,66,67,68,59,60,61,62,63,64,65,66,67,68,59,60,61,62,63,64,65,66,67,68,59,60,61,62,63,64,65,66,67,68,59,60,61,62,63,64,65,66,67,68,61,62,63,64,65,66,67,68,59,60,61,62,63,64,65,66,67,68,59,60,61,62,63,64,65,66,67,68,59,60,61,62,63,64,65,66,67,68,59,60,61,62,63,64,65,66,67,68,59,60,61,62,63,64,65,66,67,68,0,69,69,69,69,0,0,69,69,69,69,69,69,69,69,69,69,0,70,70,70,70,70,70,70,0,70,70,70,70,71,0,0,0,0,71,0,71,72,72,72,72,73,71,74,72,73,71,74,72,73,72,73,72,72,72,72,72,72,72,73,71,71,74,74,72,72,72,72,73,71,74,72,72,72,72,72,72,72,73,71,74,72,75,72,72,72,72,72,72,72,72,72,72,72,72,72,73,71,74,73,72,73,71,74,72,73,71,74,72,73,71,74,72,76,0,0,0,0,0,0,0,0,0,0,0,77,0,78,0,0,0,0,77,0,0,0,0,0,0,79,80,79,81,82,83,84,85,86,87,88,89,90,79,80,91,92,93,94,81,82,83,84,85,86,87,88,89,90,79,80,91,92,93,94,88,95,81,82,83,84,85,86,87,88,89,90,79,80,91,92,88,81,82,83,84,85,86,87,88,89,90,79,80,91,92,93,94,88,88,81,82,83,84,85,86,87,88,89,90,79,80,91,92,93,94,96,92,92,97,81,84,89,90,78,93,94,81,82,83,84,85,86,87,88,89,90,92,92,77,88,88,88,83,92,81,82,83,84,85,86,87,88,89,90,79,80,91,92,93,94,81,82,83,84,85,86,87,88,89,90,79,80,91,92,93,94,81,82,83,84,85,86,87,88,89,90,79,80,91,92,93,94,22,98,99,100,98,99,100,98,99,100,98,0,0,0,0,0,0,101,3,0,102,0,0,23,42,0,0,0,0,0,4,0,0,0,0,0,0,0,1,42,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,101,0,42,3,0,0,0,0,0,4,4,4,0,4,4,4,103,0,103,0,0,104,101,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,104,104,104,0,103,0,0,103,0,0,0,0,0,3,0,4,4,4,23,24,0,0,25,103,101,1,103,104,101,103,104,101,103,104,101,103,104,101,105,106,1,1,1,1,1,1,1,1,1,105,106,103,103,104,101,101,25,51,1,51,103,104,101,96,107,108,103,24,0,106,1,51,105,109,103,104,101,104,16,103,104,101,103,104,101,103,104,101,110,38,39,39,54,55,14,14,0,0,111,111,112,111,112,111,112,111,112,111,112,111,112,111,112,112,111,112,111,112,111,112,98,99,100,98,99,100,98,99,100,98,0,0,0,101,102,0,0,0,0,0,0,0,0,0,0,113,0,0,101,0,0,103,103,104,101,101,0,0,0,0,0,0,0,0,0,104,104,104,103,103,0,0,113,0,0,0,113,0,109,109,109,106,114,115,116,113,98,117,99,100,118,105,106,114,115,116,113,98,117,99,100,118,105,106,118,98,117,99,100,118,105,106,98,117,99,100,118,105,106,98,99,118,105,106,106,105,106,0,98,117,99,100,118,106,98,117,99,100,106,109,109,109,105,105,98,117,99,100,106,114,115,116,113,98,117,99,100,118,118,118,118,118,118,118,105,105,106,106,106,118,118,118,118,118,117,99,119,113,114,115,116,113,98,117,99,100,118,105,106,107,108,118,106,118,106,113,113,109,109,109,98,117,99,100,118,120,120,120,120,120,120,120,120,120,102,102,102,117,106,106,118,109,109,109,106,109,109,109,105,105,105,118,106,0,109,98,117,99,100,98,117,99,100,118,105,106,109,109,109,118,106,106,114,115,116,113,98,117,99,100,118,105,106,114,115,116,113,98,117,99,100,118,105,106,114,115,116,113,98,117,99,100,118,105,106,108,108,108,108,108,108,110,121,122,123,0,0,0,0,0,0,0,0,0,124,125,124,0,125,0,125,124,0,125,124,126,125,124,126,125,124,126,125,124,126,126,125,124,126,126,125,124,126,126,125,124,126,125,124,126,125,124,126,125,124,126,126],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["u32",0],["",0],["bool",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["u32",0],["",0],["bool",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["backendcolor",3]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["backendcolor",3]],["result",4,[["drawingerrorkind",4,[["error",3]]]]]],[[["",0],["",0],["bool",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["",0],["bool",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["str",0],["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["str",0],["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0]]],[[["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0]],["result",4,[["drawingerrorkind",4,[["error",3]]]]]],[[["",0],["str",0],["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["",0]],["result",4,[["drawingerrorkind",4]]]],[[]],[[["",0]]],[[["",0]]],[[]],[[["",0]],["svgbackend",3]],[[["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0]],["result",4,[["drawingerrorkind",4,[["error",3]]]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["string",3]],["svgbackend",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0],["intotextstyle",8]],["",0]],[[["",0],["intotextstyle",8]],["",0]],[[["",0],["into",8,[["shapestyle",3]]]],["",0]],[[["",0],["into",8,[["shapestyle",3]]]],["",0]],[[["",0]],["backendcoord",6]],[[["",0],["into",8,[["shapestyle",3]]]],["",0]],[[["",0],["into",8,[["shapestyle",3]]]],["",0]],[[["",0],["into",8,[["shapestyle",3]]]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["chartcontext",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["chartcontext",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["chartcontext",3]],[[["",0],["asrangedcoord",8],["asrangedcoord",8]],["result",4,[["chartcontext",3,[["cartesian2d",3]]],["drawingareaerrorkind",4]]]],[[["",0],["asrangedcoord",8],["asrangedcoord",8],["asrangedcoord",8]],["result",4,[["chartcontext",3,[["cartesian3d",3]]],["drawingareaerrorkind",4]]]],[[["",0],["asrangedcoord",8],["asrangedcoord",8]],["result",4,[["chartcontext",3,[["cartesian2d",3]]],["drawingareaerrorkind",4]]]],[[["",0],["asref",8,[["str",0]]],["intotextstyle",8]],["",0]],[[["",0]],["labelareaposition",4]],[[["",0]],["dualcoordchartstate",3]],[[["",0]],["chartstate",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]],["axes3dstyle",3]],[[["",0]],["meshstyle",3]],[[["",0]],["secondarymeshstyle",3]],[[["",0]],["serieslabelstyle",3]],[[["",0]]],[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["result",4,[["drawingareaerrorkind",4]]]],[[["",0]],["result",4,[["drawingareaerrorkind",4]]]],[[["",0]],["result",4,[["drawingareaerrorkind",4]]]],[[["",0]],["result",4,[["seriesanno",3],["drawingareaerrorkind",4]]]],[[["",0]],["result",4,[["seriesanno",3],["drawingareaerrorkind",4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["dualcoordchartcontext",3]],["dualcoordchartstate",3]],[[["dualcoordchartcontext",3]],["dualcoordchartstate",3]],[[["chartcontext",3]],["chartstate",3]],[[]],[[["chartcontext",3]],["chartstate",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["chartstate",3]],[[],["dualcoordchartstate",3]],[[]],[[]],[[]],[[],["chartstate",3,[["arc",3]]]],[[],["dualcoordchartstate",3,[["arc",3],["arc",3]]]],[[["",0],["into",8,[["string",3]]]],["",0]],[[["",0],["intotextstyle",8]],["",0]],[[["",0],["intotextstyle",8]],["",0]],[[["",0],["intotextstyle",8]],["",0]],[[["",0],["fn",8]],["",0]],[[["",0],["sizedesc",8]],["",0]],[[["",0],["into",8,[["shapestyle",3]]]],["",0]],[[["",0],["sizedesc",8]],["",0]],[[["",0],["sizedesc",8]],["",0]],[[["",0],["sizedesc",8]],["",0]],[[["",0],["sizedesc",8]],["",0]],[[["",0],["sizedesc",8]],["",0]],[[["",0],["sizedesc",8]],["",0]],[[["",0],["usize",0]],["",0]],[[["drawingarea",3]]],[[["",0]],["drawingarea",3]],[[["",0],["serieslabelposition",4]],["",0]],[[["drawingarea",3]],["dualcoordchartcontext",3,[["drawingbackend",8]]]],[[["drawingarea",3]],["chartcontext",3,[["drawingbackend",8]]]],[[["",0],["sizedesc",8]],["",0]],[[["",0]],["drawingarea",3]],[[["",0]],["",0]],[[["",0],["sizedesc",8]],["",0]],[[["",0],["sizedesc",8]],["",0]],[[["",0],["sizedesc",8]],["",0]],[[["",0],["labelareaposition",4],["sizedesc",8]],["",0]],[[["",0],["sizedesc",8]],["",0]],[[["asrangedcoord",8],["asrangedcoord",8]],["dualcoordchartcontext",3,[["cartesian2d",3],["cartesian2d",3]]]],[[["",0],["labelareaposition",4],["sizedesc",8]],["",0]],[[["",0],["labelareaposition",4],["sizedesc",8]],["",0]],[[["",0]],["chartstate",3]],[[["",0]],["dualcoordchartstate",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["sizedesc",8]],["",0]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["fnonce",8]],["",0]],[[["",0],["into",8,[["string",3]]]],["",0]],[[["",0],["into",8,[["string",3]]]],["",0]],[[["",0],["sizedesc",8]],["",0]],[[["",0],["fn",8]],["",0]],[[["",0],["fn",8]],["",0]],[[["",0],["sizedesc",8]],["",0]],[[["",0],["sizedesc",8]],["",0]],[[["",0],["intotextstyle",8]],["",0]],[[["",0],["usize",0]],["",0]],[[["",0],["usize",0]],["",0]],[[["",0],["usize",0]],["",0]],[[["",0]],["range",3]],[[["",0],["into",8,[["string",3]]]],["",0]],[[["",0],["into",8,[["string",3]]]],["",0]],[[["",0],["sizedesc",8]],["",0]],[[["",0],["fn",8]],["",0]],[[["",0],["fn",8]],["",0]],[[["",0],["sizedesc",8]],["",0]],[[["",0],["sizedesc",8]],["",0]],[[["",0],["intotextstyle",8]],["",0]],[[["",0],["usize",0]],["",0]],[[["",0],["usize",0]],["",0]],[[["",0],["usize",0]],["",0]],[[["",0]],["range",3]],null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["shift",3]],[[["",0],["",0]]],null,[[["",0]],["i32",0]],[[["",0]],["i32",0]],[[["",0]],["i32",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],null,null,[[["",0],["backendcoord",6]],["option",4]],[[["",0],["backendcoord",6]],["option",4,[["backendcoord",6]]]],[[["",0]]],[[["",0]],["backendcoord",6]],[[["",0]],["backendcoord",6]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["cartesian2d",3]],[[["",0],["",0]]],[[["",0],["",0],["shapestyle",3]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["keypointhint",8],["keypointhint",8],["fnmut",8]],["result",4]],[[]],[[]],[[["",0]],["range",3,[["i32",0]]]],[[["",0]],["range",3]],[[["",0]],["range",3,[["i32",0]]]],[[["",0]],["range",3]],[[]],[[]],[[["into",8],["into",8]]],[[["",0],["backendcoord",6]],["option",4]],[[["",0]]],[[["",0]],["backendcoord",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["f64",0]],[[["",0]],["range",3,[["i32",0]]]],[[["",0]],["range",3,[["i32",0]]]],[[["",0]]],[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["groupby",3]],[[["",0]],["linspace",3]],[[["",0]],["logrange",3]],[[["",0]],["nestedvalue",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["nestedvalue",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["nestedvalue",4]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[]],[[]],[[["logrange",3]],["logcoord",3]],[[]],[[]],[[]],[[]],[[]],[[["never",0]]],[[],["nestedvalue",4]],[[],["nestedvalue",4]],[[]],[[["f64",0]]],[[["",0],["usize",0]],["option",4]],[[["",0],["usize",0]],["option",4]],[[["",0],["usize",0]],["option",4]],[[["",0],["usize",0]],["option",4]],[[["",0],["usize",0]],["option",4]],[[["usize",0]],["groupby",3]],[[["usize",0]],["groupby",3]],[[["usize",0]],["groupby",3]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["keypointhint",8]],["vec",3]],[[["",0],["keypointhint",8]],["vec",3]],[[["",0],["keypointhint",8]],["vec",3]],[[["",0],["keypointhint",8]],["vec",3]],[[["",0],["keypointhint",8]],["vec",3]],[[["",0],["keypointhint",8]],["vec",3]],[[["",0]]],[[["",0]]],[[],["lograngeext",3]],[[["range",3],["range",3,[["f64",0]]]],["option",4,[["partialaxis",3]]]],[[["",0]],["i32",0]],[[["",0]],["i32",0]],[[["",0],["",0]],["i32",0]],[[["",0]],["i32",0]],[[["",0]],["i32",0]],[[["",0]],["i32",0]],[[["",0],["nestedvalue",4]],["bool",0]],[[],["nestedrange",3]],[[],["nestedrange",3]],[[],["nestedrange",3]],[[["",0]],["option",4]],[[["range",3]],["partialaxis",3]],[[["range",3]],["partialaxis",3]],[[["range",3]],["partialaxis",3]],[[["",0]],["range",3]],[[["",0]],["range",3]],[[["",0]],["range",3]],[[["",0]],["range",3]],[[["",0]],["range",3]],[[["",0]],["range",3]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["clone",8]],["linspace",3,[["clone",8],["exact",3]]]],[[["clone",8]],["linspace",3,[["clone",8],["exact",3]]]],[[["clone",8]],["linspace",3,[["clone",8],["exact",3]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["i32",0]],["option",4]],[[["",0],["i32",0]],["option",4]],[[["",0],["i32",0]],["option",4]],[[["",0],["i32",0]],["option",4]],[[["",0],["i32",0]],["option",4]],[[],["linspace",3,[["ceil",3]]]],[[],["linspace",3,[["exact",3]]]],[[],["linspace",3,[["floor",3]]]],[[],["linspace",3,[["round",3]]]],[[["fn",8]],["withkeypointmethod",3]],[[["fn",8]],["withkeypointmethod",3]],[[["fn",8]],["withkeypointmethod",3]],[[["vec",3]],["withkeypoints",3]],[[["vec",3]],["withkeypoints",3]],[[["vec",3]],["withkeypoints",3]],[[["fn",8]]],[[["intoiterator",8]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["bool",0]],[[["",0]],["range",3,[["i32",0]]]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["segmentedcoord",3]],[[["",0]],["segmentvalue",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0]],["string",3]],[[["segmentvalue",4]],["string",3]],[[["",0],["",0]],["string",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["segmentvalue",4]],[[]],[[["never",0]]],[[["",0],["usize",0]],["option",4]],[[["",0],["usize",0]],["option",4]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["segmentedcoord",3]],[[],["segmentedcoord",3]],[[],["segmentedcoord",3]],[[["",0],["keypointhint",8]],["vec",3]],[[["",0],["keypointhint",8]],["vec",3]],[[["",0]],["i32",0]],[[["",0]],["i32",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["usize",0],["usize",0]]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["range",3]],[[["",0]],["range",3]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["i32",0]],["option",4]],[[["",0],["i32",0]],["option",4]],[[["",0]],["discretevalueiter",3]],[[["",0]],["discretevalueiter",3]],[[["",0]],["discretevalueiter",3]],[[["",0]],["keypointweight",4]],[[["",0]],["keypointweight",4]],[[["",0]],["keypointweight",4]],null,null,null,null,null,[[["",0]]],[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["projectionmatrix",3]],[[["",0]],["projectionmatrixbuilder",3]],[[["",0]],["cartesian3d",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[]],[[["",0]],["i32",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["projectionmatrix",3]],[[["",0]]],[[]],[[]],[[["projectionmatrix",3]],["projectionmatrix",3]],[[]],[[["into",8],["into",8],["into",8]]],[[["",0]]],[[]],null,[[["",0]],["i32",0]],[[["",0]],["i32",0]],[[["",0]],["projectionmatrix",3]],[[["f64",0],["f64",0],["f64",0]]],[[["f64",0]]],null,[[["",0],["range",3,[["i32",0]]],["range",3,[["i32",0]]]],["",0]],[[["",0]],["",0]],[[["",0],["range",3,[["i32",0]]],["range",3,[["i32",0]]],["fnonce",8]],["",0]],[[["f64",0],["f64",0],["f64",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["backendcoord",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["into",8],["into",8],["into",8],["fnonce",8]]],null,[[]],null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["rangedcoordf32",3]],[[["",0]],["rangedcoordf64",3]],[[["",0]],["rangedcoordu32",3]],[[["",0]],["rangedcoordi32",3]],[[["",0]],["rangedcoordu64",3]],[[["",0]],["rangedcoordi64",3]],[[["",0]],["rangedcoordu128",3]],[[["",0]],["rangedcoordi128",3]],[[["",0]],["rangedcoordusize",3]],[[["",0]],["rangedslice",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["f32",0]],["string",3]],[[["f64",0]],["string",3]],[[]],[[["range",3,[["f32",0]]]]],[[]],[[["range",3,[["f64",0]]]]],[[["range",3,[["u32",0]]]]],[[]],[[["range",3,[["i32",0]]]]],[[]],[[["range",3,[["u64",0]]]]],[[]],[[]],[[["range",3,[["i64",0]]]]],[[]],[[["range",3,[["u128",0]]]]],[[]],[[["range",3,[["i128",0]]]]],[[]],[[["range",3,[["usize",0]]]]],[[]],[[]],[[["",0],["usize",0]],["option",4]],[[["",0],["usize",0]],["option",4]],[[["",0],["usize",0]],["option",4]],[[["",0],["usize",0]],["option",4]],[[["",0],["usize",0]],["option",4]],[[["",0],["usize",0]],["option",4]],[[["",0],["usize",0]],["option",4]],[[["",0],["usize",0]],["option",4]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0],["",0]],["option",4,[["usize",0]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["keypointhint",8]],["vec",3,[["f32",0]]]],[[["",0],["keypointhint",8]],["vec",3,[["f64",0]]]],[[["",0],["keypointhint",8]],["vec",3,[["u32",0]]]],[[["",0],["keypointhint",8]],["vec",3,[["i32",0]]]],[[["",0],["keypointhint",8]],["vec",3,[["u64",0]]]],[[["",0],["keypointhint",8]],["vec",3,[["i64",0]]]],[[["",0],["keypointhint",8]],["vec",3,[["u128",0]]]],[[["",0],["keypointhint",8]],["vec",3,[["i128",0]]]],[[["",0],["keypointhint",8]],["vec",3,[["usize",0]]]],[[["",0],["keypointhint",8]],["vec",3]],[[["",0],["f32",0]],["i32",0]],[[["",0],["f64",0]],["i32",0]],[[["",0],["u32",0]],["i32",0]],[[["",0],["i32",0]],["i32",0]],[[["",0],["u64",0]],["i32",0]],[[["",0],["i64",0]],["i32",0]],[[["",0],["u128",0]],["i32",0]],[[["",0],["i128",0]],["i32",0]],[[["",0],["usize",0]],["i32",0]],[[["",0]],["i32",0]],[[["",0]],["range",3,[["f32",0]]]],[[["",0]],["range",3,[["f64",0]]]],[[["",0]],["range",3,[["u32",0]]]],[[["",0]],["range",3,[["i32",0]]]],[[["",0]],["range",3,[["u64",0]]]],[[["",0]],["range",3,[["i64",0]]]],[[["",0]],["range",3,[["u128",0]]]],[[["",0]],["range",3,[["i128",0]]]],[[["",0]],["range",3,[["usize",0]]]],[[["",0]],["range",3]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["i32",0]],["option",4,[["f32",0]]]],[[["",0],["i32",0]],["option",4,[["f64",0]]]],[[["",0],["i32",0]],["option",4]],[[["",0],["i32",0]],["option",4]],[[["",0],["i32",0]],["option",4]],[[["",0],["i32",0]],["option",4]],[[["",0],["i32",0]],["option",4]],[[["",0],["i32",0]],["option",4]],[[["",0],["i32",0]],["option",4]],[[["",0],["i32",0]],["option",4]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["quartiles",3]],[[["",0],["",0]]],[[["intoiterator",8]],["range",3]],null,[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0]],["f64",0]],[[]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],null,null,[[["f64",0],["bool",0]],["string",3]],[[["",0],["f64",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,[[["",0],["coordtranslate",8]],["drawingarea",3,[["coordtranslate",8]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]],["rect",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]]],[[["",0],["",0]],["result",4,[["drawingareaerrorkind",4]]]],[[["",0],["keypointhint",8],["keypointhint",8]],["result",4,[["drawingareaerrorkind",4]]]],[[["",0],["",0]],["result",4,[["drawingareaerrorkind",4]]]],[[["",0],["str",0],["textstyle",3],["backendcoord",6]],["result",4,[["drawingareaerrorkind",4]]]],[[["",0],["str",0],["textstyle",3]],["result",4,[["drawingareaerrorkind",4]]]],[[["",0],["",0]],["result",4,[["drawingareaerrorkind",4]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["rc",3]]],[[["never",0]]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["backendcoord",6]],[[["",0]]],[[["",0]],["range",3,[["i32",0]]]],[[["",0]],["range",3]],[[["",0]],["range",3,[["i32",0]]]],[[["",0]],["range",3]],[[]],[[]],[[]],[[]],[[]],[[],["drawingarea",3,[["shift",3]]]],[[["",0]],["backendcoord",6]],[[["",0],["sizedesc",8],["sizedesc",8],["sizedesc",8],["sizedesc",8]],["drawingarea",3,[["shift",3]]]],[[["",0]],["result",4,[["drawingareaerrorkind",4]]]],[[["",0],["f64",0]],["f64",0]],[[["",0],["f64",0]],["f64",0]],[[],["drawingarea",3,[["shift",3]]]],[[["",0],["asref",8],["asref",8]],["vec",3]],[[["",0]],["vec",3]],[[["",0],["sizedesc",8]]],[[["",0],["sizedesc",8]]],[[["",0]],["drawingarea",3,[["shift",3]]]],[[["",0],["str",0],["into",8,[["textstyle",3]]]],["result",4,[["drawingareaerrorkind",4]]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["drawingarea",3,[["shift",3]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullfontresult",6,[["vec",3,[["layoutbox",6]]]]]],[[["",0],["iterator",8],["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["iterator",8],["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["iterator",8],["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["iterator",8],["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["iterator",8],["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["iterator",8],["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["iterator",8],["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["iterator",8],["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["iterator",8],["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["iterator",8],["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["iterator",8],["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["iterator",8],["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["iterator",8],["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["iterator",8],["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["iterator",8],["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0]],["fontresult",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["into",8,[["str",0]]],["into",8,[["textstyle",3]]],["u32",0]]],[[["string",3],["into",8,[["textstyle",3]]],["u32",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["dynelement",3]],[[["",0],["f64",0]]],[[["",0],["into",8,[["textstyle",3]]]]],[[["shapestyle",3]]],[[["shapestyle",3]]],[[["shapestyle",3]]],[[["shapestyle",3]]],[[["shapestyle",3]]],[[["",0],["rect",3]]],[[["",0],["rect",3]],["backendcoord",6]],[[["",0],["rect",3]]],[[["into",8],["into",8,[["shapestyle",3]]]]],[[["into",8,[["vec",3]]],["into",8,[["shapestyle",3]]]]],[[["into",8,[["shapestyle",3]]]]],[[["into",8,[["shapestyle",3]]]]],[[["into",8,[["vec",3]]],["into",8,[["shapestyle",3]]]]],[[["into",8,[["shapestyle",3]]],["into",8,[["shapestyle",3]]]]],[[["into",8,[["textstyle",3]]]]],[[["into",8,[["textstyle",3]]]]],[[["into",8,[["shapestyle",3]]]]],[[["into",8,[["shapestyle",3]]]]],[[["f64",0]]],[[["",0],["into",8,[["textstyle",3]]]]],[[]],[[["",0],["into",8]]],[[["",0]]],[[["",0],["f64",0]],["",0]],[[["",0],["u32",0],["u32",0],["u32",0],["u32",0]],["",0]],[[["",0],["f64",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["f64",0]],[[["",0]],["str",0]],[[["",0]],["str",0]],[[["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["fontfamily",4]],[[["",0]],["fonttransform",4]],[[["",0]],["fontstyle",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,[[["",0],["u32",0],["",0],["bool",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["backendcolor",3]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["",0],["bool",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["str",0],["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["str",0],["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["",0]],["result",4,[["drawingerrorkind",4]]]],null,null,[[["str",0]],["fontfamily",4]],[[]],[[]],[[]],[[["str",0]],["fontstyle",4]],[[["f64",0]]],[[["",0],["usize",0]],["option",4]],[[["",0]]],[[["",0]],["option",4,[["usize",0]]]],[[]],[[]],[[]],[[],["dynelement",3]],[[],["fontdesc",3]],[[["",0]],["textstyle",3]],[[["",0]],["textstyle",3]],[[],["lograngeext",3]],[[["range",3],["range",3,[["f64",0]]]],["option",4,[["partialaxis",3]]]],null,[[["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0]],["usize",0]],null,[[["",0]],["backendcolor",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["i32",0],["i32",0]]],[[["",0]],["backendcoord",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,[[["into",8,[["shapestyle",3]]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8],["into",8,[["shapestyle",3]]]]],[[["intoiterator",8],["into",8,[["shapestyle",3]]]]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["u32",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["f64",0]],[[["",0]],["f64",0]],[[["",0]],["f64",0]],[[["",0]],["pos",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["str",0]],["fontresult",6]],[[["",0]],["rgbacolor",3]],[[["",0]],["palettecolor",3]],[[["",0]],["rgbcolor",3]],[[["",0]],["hslcolor",3]],[[["",0]],["fontdesc",3]],[[["",0]],["shapestyle",3]],[[["",0]],["textstyle",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]],["backendcolor",3]],[[["",0]],["backendcolor",3]],[[["",0],["",0]],["textstyle",3]],[[["",0]],["backendcolor",3]],[[["",0]],["backendcolor",3]],[[["",0],["",0]]],null,null,null,[[],["rgbacolor",3]],[[],["palettecolor",3]],[[],["rgbcolor",3]],[[],["hslcolor",3]],[[["",0],["str",0],["fnmut",8]],["fontresult",6,[["result",4]]]],[[["",0],["str",0],["backendcoord",6],["fnmut",8]],["result",4,[["result",4]]]],[[["",0],["rgbacolor",3]],["bool",0]],[[["",0],["palettecolor",3]],["bool",0]],[[["",0],["rgbcolor",3]],["bool",0]],[[["",0],["hslcolor",3]],["bool",0]],[[["",0]],["fontfamily",4]],[[["",0]],["shapestyle",3]],[[["",0]],["shapestyle",3]],[[["",0]],["shapestyle",3]],[[["",0]]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fontdesc",3]],[[]],[[["str",0]],["fontdesc",3]],[[],["fontdesc",3]],[[],["fontdesc",3]],[[["fontfamily",4]],["fontdesc",3]],[[],["fontdesc",3]],[[]],[[]],[[["textstyle",3]]],[[]],[[]],[[["",0]],["fontfamily",4]],[[["",0]],["str",0]],[[["",0]],["f64",0]],[[["",0]],["fontstyle",4]],[[["",0]],["fonttransform",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]],["i32",0]],[[["",0],["",0]],["i32",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fontdesc",3]],[[["",0]],["textstyle",3]],[[["",0]],["textstyle",3]],[[["",0]],["textstyle",3]],[[["",0],["str",0]],["fontresult",6]],[[["",0],["str",0]],["result",4]],[[["i32",0]],["relativesizewithbound",3]],[[["i32",0]],["relativesizewithbound",3]],[[["",0],["f64",0]],["rgbacolor",3]],[[["",0],["f64",0]],["rgbacolor",3]],[[["",0],["f64",0]],["rgbacolor",3]],[[["",0],["rgbacolor",3]],["bool",0]],[[["",0],["palettecolor",3]],["bool",0]],[[["",0],["rgbcolor",3]],["bool",0]],[[["",0],["hslcolor",3]],["bool",0]],[[["fontfamily",4],["f64",0],["fontstyle",4]]],[[],["relativesize",4]],[[],["relativesize",4]],[[],["relativesize",4]],[[],["relativesize",4]],[[],["relativesize",4]],[[],["relativesize",4]],[[],["relativesize",4]],[[],["relativesize",4]],[[],["relativesize",4]],[[["usize",0]],["palettecolor",3]],[[["usize",0]],["palettecolor",3]],[[["usize",0]],["palettecolor",3]],[[["usize",0]],["palettecolor",3]],[[["",0],["pos",3]]],null,[[["",0],["f64",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["f64",0]],[[["",0],["u32",0]],["shapestyle",3]],[[["",0],["u32",0]],["shapestyle",3]],[[["",0],["u32",0]],["shapestyle",3]],[[["",0]],["u32",0]],[[["",0],["u32",0]]],null,[[["",0],["fontstyle",4]]],[[["",0]],["fontstyle",4]],null,[[["",0]],["backendcolor",3]],[[["",0]],["backendcolor",3]],[[["",0]],["backendcolor",3]],[[["",0]],["backendcolor",3]],[[["",0]],["backendcolor",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["rgbacolor",3]],[[["",0]],["rgbacolor",3]],[[["",0]],["rgbacolor",3]],[[["",0],["fonttransform",4]]],[[["",0],["fonttransform",4]]],[[["",0]],["fonttransform",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["pos",3]],["textstylebuilder",3]],[[["pos",3]],["textstylebuilder",3]],[[["pos",3]],["textstylebuilder",3]],[[["color",8]],["textstylebuilder",3]],[[["color",8]],["textstylebuilder",3]],[[["color",8]],["textstylebuilder",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["hpos",4]],[[["",0]],["vpos",4]],[[["",0]],["pos",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["pos",3]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[["hpos",4],["vpos",4]],["pos",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null],"p":[[8,"DrawingBackend"],[3,"SVGBackend"],[4,"LabelAreaPosition"],[4,"SeriesLabelPosition"],[3,"ChartContext"],[3,"SecondaryMeshStyle"],[3,"MeshStyle"],[3,"SeriesLabelStyle"],[3,"ChartBuilder"],[3,"DualCoordChartContext"],[3,"SeriesAnno"],[3,"DualCoordChartState"],[3,"ChartState"],[13,"Coordinate"],[3,"Shift"],[8,"CoordTranslate"],[8,"ReverseCoordTranslate"],[4,"MeshLine"],[3,"Cartesian2d"],[13,"XMesh"],[13,"YMesh"],[3,"LogRange"],[4,"NestedValue"],[8,"IntoLogRange"],[8,"LogScalable"],[3,"WithKeyPoints"],[3,"WithKeyPointMethod"],[3,"LogCoord"],[3,"NestedRange"],[3,"GroupBy"],[3,"Linspace"],[8,"ToGroupByRange"],[8,"BuildNestedCoord"],[8,"IntoPartialAxis"],[8,"IntoLinspace"],[8,"BindKeyPointMethod"],[8,"BindKeyPoints"],[13,"Category"],[13,"Value"],[3,"BoldPoints"],[4,"KeyPointWeight"],[4,"SegmentValue"],[8,"AsRangedCoord"],[8,"Ranged"],[8,"KeyPointHint"],[3,"LightPoints"],[3,"DefaultFormatting"],[3,"NoDefaultFormatting"],[3,"SegmentedCoord"],[8,"ValueFormatter"],[8,"DiscreteRanged"],[8,"IntoSegmentedCoord"],[8,"ReversibleRanged"],[13,"Exact"],[13,"CenterOf"],[3,"ProjectionMatrix"],[3,"ProjectionMatrixBuilder"],[3,"Cartesian3d"],[3,"RangedCoordf32"],[3,"RangedCoordf64"],[3,"RangedCoordu32"],[3,"RangedCoordi32"],[3,"RangedCoordu64"],[3,"RangedCoordi64"],[3,"RangedCoordu128"],[3,"RangedCoordi128"],[3,"RangedCoordusize"],[3,"RangedSlice"],[3,"Quartiles"],[3,"FloatPrettyPrinter"],[4,"DrawingAreaErrorKind"],[3,"DrawingArea"],[3,"Rect"],[3,"DummyBackendError"],[8,"IntoDrawingArea"],[13,"BackendError"],[8,"PointCollection"],[8,"CoordMapper"],[3,"EmptyElement"],[3,"ComposedElement"],[3,"Pixel"],[3,"PathElement"],[3,"Rectangle"],[3,"Circle"],[3,"Polygon"],[3,"Cubiod"],[3,"Text"],[3,"MultiLineText"],[3,"Cross"],[3,"TriangleMarker"],[3,"DynElement"],[3,"Pie"],[3,"BackendCoordOnly"],[3,"BackendCoordAndZ"],[8,"Drawable"],[8,"IntoDynElement"],[8,"PointElement"],[3,"RGBAColor"],[3,"RGBColor"],[3,"HSLColor"],[4,"FontStyle"],[8,"Palette"],[4,"FontFamily"],[4,"FontTransform"],[3,"ShapeStyle"],[3,"TextStyle"],[8,"IntoFont"],[8,"IntoTextStyle"],[8,"Color"],[13,"Name"],[3,"AreaSeries"],[3,"LineSeries"],[4,"RelativeSize"],[3,"Palette99"],[3,"Palette9999"],[3,"Palette100"],[3,"PaletteColor"],[3,"FontDesc"],[8,"SizeDesc"],[8,"AsRelative"],[13,"Height"],[13,"Width"],[13,"Smaller"],[4,"VPos"],[4,"HPos"],[3,"Pos"]]},\
"plotters_backend":{"doc":"The Plotters backend API crate. This is a part of …","t":[3,6,8,8,13,8,13,4,16,13,16,4,4,4,13,13,13,13,13,13,13,13,13,13,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,10,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,10,0,12,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,5,5,5,5,5,13,13,13,4,13,3,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["BackendColor","BackendCoord","BackendStyle","BackendTextStyle","Bold","DrawingBackend","DrawingError","DrawingErrorKind","ErrorType","FontError","FontError","FontFamily","FontStyle","FontTransform","Italic","Monospace","Name","None","Normal","Oblique","Rotate180","Rotate270","Rotate90","SansSerif","Serif","alpha","anchor","anchor","as_str","as_str","blit_bitmap","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","color","color","color","color","draw","draw_circle","draw_line","draw_path","draw_pixel","draw_rect","draw_text","ensure_prepared","estimate_text_size","family","fill_polygon","fmt","fmt","from","from","from","from","from","from","from","get_size","into","into","into","into","into","layout_box","mix","present","rasterizer","rgb","size","size","stroke_width","stroke_width","style","style","text_anchor","to_owned","to_owned","to_owned","to_owned","to_string","transform","transform","transform","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","0","0","0","draw_circle","draw_line","draw_rect","fill_polygon","polygonize","Bottom","Center","Center","HPos","Left","Pos","Right","Top","VPos","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","from","from","from","h_pos","into","into","into","new","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","v_pos"],"q":["plotters_backend","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","plotters_backend::DrawingErrorKind","","plotters_backend::FontFamily","plotters_backend::rasterizer","","","","","plotters_backend::text_anchor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The color type that is used by all the backend","A coordinate in the pixel-based backend. The coordinate …","The style data for the backend drawing API","The trait that abstracts a style of a text.","The bold style","The drawing backend trait, which implements the low-level …","A drawing backend error","The error produced by a drawing backend.","The error type reported by the backend","A font rendering error","The error type of this text style implementation","Describes font family. This can be either a specific font …","Describes the font style. Such as Italic, Oblique, etc.","Specifying text transformations","The italic style","The system default monospace font","A specific font family name","Nothing to transform","The normal style","The oblique style","Rotating the text 180 degree clockwise","Rotating the text 270 degree clockwise","Rotating the text 90 degree clockwise","The system default sans-serif font family","The system default serif font family","","","","Make a CSS compatible string for the font family name. …","Convert the font style into a CSS compatible string which …","Blit a bitmap on to the backend.","","","","","","","","","","","","","","","","","","","Get the color of current style","","","","","Draw a circle on the drawing backend","Draw a line on the drawing backend","Draw a path on the drawing backend","Draw a pixel on the drawing backend","Draw a rectangle on the drawing backend","Draw a text on the drawing backend","Ensure the backend is ready to draw","Estimate the size of the horizontal text if rendered on …","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Get the dimension of the drawing backend in pixels","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Finalize the drawing step and present all the changes. …","The built-in rasterizers.","","","","Get the stroke width of current style","Get the stroke width of current style","","","Text anchor attributes are used to properly position the …","","","","","","","","Transform the coordinate to perform the rotation","","","","","","","","","","","","","","","","","","","","","","","Covert a path with &gt;1px stroke width into polygon.","Anchor point is on the bottom of the text","Anchor point is in the horizontal center of the text","Anchor point is in the vertical center of the text","The horizontal position of the anchor point relative to …","Anchor point is on the left side of the text","The text anchor position.","Anchor point is on the right side of the text","Anchor point is on the top of the text","The vertical position of the anchor point relative to the …","","","","","","","","","","","","","Create a default text anchor position (top left).","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The horizontal position of the anchor point","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new text anchor position.","","","","","","","","","","","","","The vertical position of the anchor point"],"i":[0,0,0,0,1,0,2,0,3,2,4,0,0,0,1,5,5,6,1,1,6,6,6,5,5,7,4,4,5,1,3,7,5,6,1,2,7,5,6,1,2,7,5,6,1,7,5,6,1,8,4,4,7,4,3,3,3,3,3,3,3,3,4,3,2,2,7,5,5,6,1,1,2,3,7,5,6,1,2,4,7,3,0,7,4,4,8,8,4,4,0,7,5,6,1,2,4,4,6,7,5,6,1,2,7,5,6,1,2,7,5,6,1,2,9,10,11,0,0,0,0,0,12,13,12,0,13,0,13,12,0,13,12,14,13,12,14,13,12,14,13,12,14,14,13,12,14,14,13,12,14,14,13,12,14,13,12,14,13,12,14,13,12,14,14],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["pos",3]],[[["",0]],["pos",3]],[[["",0]],["str",0]],[[["",0]],["str",0]],[[["",0],["backendcoord",6]],["result",4,[["drawingerrorkind",4]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["backendcolor",3]],[[["",0]],["fontfamily",4]],[[["",0]],["fonttransform",4]],[[["",0]],["fontstyle",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]],["backendcolor",3]],[[["",0]],["backendcolor",3]],[[["",0]],["backendcolor",3]],[[["",0]],["backendcolor",3]],[[["",0],["str",0],["backendcoord",6],["fnmut",8]],["result",4,[["result",4]]]],[[["",0],["backendcoord",6],["u32",0],["",0],["bool",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["backendcoord",6],["backendcoord",6],["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["intoiterator",8],["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["backendcoord",6],["backendcolor",3]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["backendcoord",6],["backendcoord",6],["",0],["bool",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["str",0],["",0],["backendcoord",6]],["result",4,[["drawingerrorkind",4]]]],[[["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["str",0],["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0]],["fontfamily",4]],[[["",0],["intoiterator",8],["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[]],[[["str",0]],["fontfamily",4]],[[]],[[]],[[["str",0]],["fontstyle",4]],[[]],[[]],[[["",0]]],[[]],[[]],[[]],[[]],[[]],[[["",0],["str",0]],["result",4]],[[["",0],["f64",0]]],[[["",0]],["result",4,[["drawingerrorkind",4]]]],null,null,[[["",0]],["f64",0]],[[["",0]],["f64",0]],[[["",0]],["u32",0]],[[["",0]],["u32",0]],[[["",0]],["fontstyle",4]],[[["",0]],["fontstyle",4]],null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["fonttransform",4]],[[["",0]],["fonttransform",4]],[[["",0],["i32",0],["i32",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,[[["",0],["backendcoord",6],["u32",0],["",0],["bool",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["backendcoord",6],["backendcoord",6],["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["backendcoord",6],["backendcoord",6],["",0],["bool",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["",0]],["result",4,[["drawingerrorkind",4]]]],[[["u32",0]],["vec",3,[["backendcoord",6]]]],null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["hpos",4]],[[["",0]],["vpos",4]],[[["",0]],["pos",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[["hpos",4],["vpos",4]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null],"p":[[4,"FontStyle"],[4,"DrawingErrorKind"],[8,"DrawingBackend"],[8,"BackendTextStyle"],[4,"FontFamily"],[4,"FontTransform"],[3,"BackendColor"],[8,"BackendStyle"],[13,"DrawingError"],[13,"FontError"],[13,"Name"],[4,"VPos"],[4,"HPos"],[3,"Pos"]]},\
"plotters_svg":{"doc":"The Plotters SVG backend.","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["SVGBackend","borrow","borrow_mut","draw_circle","draw_line","draw_path","draw_pixel","draw_rect","draw_text","drop","ensure_prepared","fill_polygon","from","get_size","into","new","present","try_from","try_into","type_id","with_string"],"q":["plotters_svg","","","","","","","","","","","","","","","","","","","",""],"d":["The SVG image drawing backend","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Create a new SVG drawing backend","","","","","Create a new SVG drawing backend and store the document …"],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["backendcoord",6],["u32",0],["",0],["bool",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["backendcoord",6],["backendcoord",6],["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["intoiterator",8],["",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["backendcoord",6],["backendcolor",3]],["result",4,[["drawingerrorkind",4,[["error",3]]]]]],[[["",0],["backendcoord",6],["backendcoord",6],["",0],["bool",0]],["result",4,[["drawingerrorkind",4]]]],[[["",0],["str",0],["",0],["backendcoord",6]],["result",4,[["drawingerrorkind",4]]]],[[["",0]]],[[["",0]],["result",4,[["drawingerrorkind",4,[["error",3]]]]]],[[["",0],["intoiterator",8],["",0]],["result",4,[["drawingerrorkind",4]]]],[[]],[[["",0]]],[[]],[[["",0]]],[[["",0]],["result",4,[["drawingerrorkind",4,[["error",3]]]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["string",3]]]],"p":[[3,"SVGBackend"]]},\
"ppv_lite86":{"doc":"","t":[8,8,8,8,8,8,8,8,8,8,16,8,8,8,8,8,8,8,8,8,8,8,8,8,10,10,14,14,14,14,10,10,10,0,10,10,10,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,16,8,16,8,16,8,16,8,16,8,16,8,16,8,16,8,16,8,16,10,11,11,10,10,10,11,11,2,2,2,10,10,10,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,6,6,3,6,6,3,6,6,6,11,11,11,11,11,11,11,19,3,3,11,11,11,11],"n":["AndNot","ArithOps","BSwap","BitOps0","BitOps128","BitOps32","BitOps64","LaneWords4","Machine","MultiLane","Output","RotateEachWord128","RotateEachWord32","RotateEachWord64","Store","StoreBytes","Swap64","UnsafeFrom","VZip","Vec2","Vec4","Vec4Ext","Vector","Words4","andnot","bswap","dispatch","dispatch_light128","dispatch_light256","dispatch_light512","extract","extract","from_lanes","generic","insert","insert","instance","read_be","read_be","read_le","read_le","rotate_each_word_right11","rotate_each_word_right12","rotate_each_word_right16","rotate_each_word_right20","rotate_each_word_right24","rotate_each_word_right25","rotate_each_word_right32","rotate_each_word_right7","rotate_each_word_right8","shuffle1230","shuffle2301","shuffle3012","shuffle_lane_words1230","shuffle_lane_words2301","shuffle_lane_words3012","swap1","swap16","swap2","swap32","swap4","swap64","swap8","to_lanes","to_scalars","transpose4","u128x1","u128x1","u128x2","u128x2","u128x4","u128x4","u32x4","u32x4","u32x4x2","u32x4x2","u32x4x4","u32x4x4","u64x2","u64x2","u64x2x2","u64x2x2","u64x2x4","u64x2x4","u64x4","u64x4","unpack","unpack","unpack","unsafe_from","unsafe_read_be","unsafe_read_le","vec","vec","vec128_storage","vec256_storage","vec512_storage","vzip","write_be","write_le","G0","G1","GenericMachine","add","add","add","add_assign","add_assign","add_assign","andnot","andnot","andnot","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bswap","bswap","bswap","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","eq","eq","eq","eq","eq","eq","extract","extract","extract","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_lanes","from_lanes","from_lanes","from_lanes","insert","insert","insert","instance","into","into","into","into","into","into","into","into","into","ne","ne","ne","ne","ne","new128","new128","not","not","not","rotate_each_word_right11","rotate_each_word_right11","rotate_each_word_right11","rotate_each_word_right12","rotate_each_word_right12","rotate_each_word_right12","rotate_each_word_right16","rotate_each_word_right16","rotate_each_word_right16","rotate_each_word_right20","rotate_each_word_right20","rotate_each_word_right20","rotate_each_word_right24","rotate_each_word_right24","rotate_each_word_right24","rotate_each_word_right25","rotate_each_word_right25","rotate_each_word_right25","rotate_each_word_right32","rotate_each_word_right32","rotate_each_word_right7","rotate_each_word_right7","rotate_each_word_right7","rotate_each_word_right8","rotate_each_word_right8","rotate_each_word_right8","shuffle1230","shuffle1230","shuffle2301","shuffle2301","shuffle3012","shuffle3012","shuffle_lane_words1230","shuffle_lane_words2301","shuffle_lane_words3012","split128","split128","swap1","swap1","swap1","swap16","swap16","swap16","swap2","swap2","swap2","swap32","swap32","swap32","swap4","swap4","swap4","swap64","swap64","swap64","swap8","swap8","swap8","to_lanes","to_lanes","to_lanes","to_lanes","to_scalars","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128x1_generic","u128x2_generic","u128x4_generic","u32x4_generic","u32x4x2_generic","u32x4x4_generic","u64x2_generic","u64x2x2_generic","u64x2x4_generic","u64x4_generic","unpack","unpack","unpack","unsafe_read_be","unsafe_read_be","unsafe_read_le","unsafe_read_le","vec128_storage","vec256_storage","vec512_storage","write_be","write_be","write_le","write_le"],"q":["ppv_lite86","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ppv_lite86::generic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Ops that depend on word size","","Ops that are independent of word size and endian","","","","A vector composed one or more lanes each composed of four …","","A vector composed of multiple 128-bit lanes.","","","","","","","Exchange neigboring ranges of bits of the specified size","","Combine single vectors into a multi-lane vector.","A vector composed of two elements, which may be words or …","A vector composed of four elements, which may be words or …","Vec4 functions which may not be implemented yet for all …","","A vector composed of four words; depending on their size, …","","","","","","","","","Build a multi-lane vector from individual lanes.","","","","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","Split a multi-lane vector into single-lane vectors.","","","","","","","","","","","","","","","","","","","","","","","Safety","","","","Safety","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,3,4,5,0,3,4,6,6,6,6,6,7,7,7,7,7,7,8,7,7,9,9,9,10,10,10,11,11,11,11,11,11,11,5,12,13,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,14,6,6,15,16,16,6,6,0,0,0,17,16,16,0,0,0,18,19,20,18,19,20,18,19,20,18,19,20,18,19,20,18,19,20,18,19,20,18,19,20,18,19,20,21,22,23,24,18,19,20,25,26,21,22,23,24,18,19,20,25,26,18,19,20,21,22,23,24,18,19,20,25,26,21,22,23,21,22,23,18,19,20,27,18,19,18,19,20,21,21,21,21,21,21,22,22,23,24,18,19,20,25,26,27,18,19,20,27,18,19,24,21,22,23,24,18,19,20,25,26,22,23,18,19,20,22,23,18,19,20,18,19,20,18,19,20,18,19,20,18,19,20,18,19,20,18,19,20,19,20,18,19,20,18,19,20,27,18,27,18,27,18,18,18,18,22,23,18,19,20,18,19,20,18,19,20,18,19,20,18,19,20,18,19,20,18,19,20,27,18,19,20,28,21,22,23,24,18,19,20,25,26,21,22,23,24,18,19,20,25,26,21,22,23,24,18,19,20,25,26,0,0,0,0,0,0,0,0,0,0,18,19,20,18,19,18,19,0,0,0,18,19,18,19],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],null,null,null,null,[[["u32",0]]],[[["u32",0]]],[[]],null,[[["u32",0]]],[[["u32",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["store",8]],[[],["store",8]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],null,null,nullvec128_storage",19]],[[["",0]],["vec256_storage",3]],[[["",0]],["vec512_storage",3]],[[["",0]],["genericmachine",3]],[[["",0]],["u32x4_generic",3]],[[["",0]],["u64x2_generic",3]],[[["",0]],["u128x1_generic",3]],[[["",0]],["g0",3]],[[["",0]],["g1",3]],[[]],[[],["vec256_storage",3]],[[],["vec512_storage",3]],[[["",0],["",0]],["bool",0]],[[["",0],["vec256_storage",3]],["bool",0]],[[["",0],["vec512_storage",3]],["bool",0]],[[["",0],["u32x4_generic",3]],["bool",0]],[[["",0],["u64x2_generic",3]],["bool",0]],[[["",0],["u128x1_generic",3]],["bool",0]],[[["u32",0]],["u64",0]],[[["u32",0]],["u32",0]],[[["u32",0]],["u64",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["u128x1_generic",3]]],[[]],[[["u64x2_generic",3]]],[[]],[[]],[[["u32x4_generic",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",0],["u32",0]]],[[["u32",0],["u32",0]]],[[["u64",0],["u32",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["vec256_storage",3]],["bool",0]],[[["",0],["vec512_storage",3]],["bool",0]],[[["",0],["u32x4_generic",3]],["bool",0]],[[["",0],["u64x2_generic",3]],["bool",0]],[[["",0],["u128x1_generic",3]],["bool",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,[[["vec128_storage",19]]],[[["vec128_storage",19]]],[[["vec128_storage",19]]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]]],"p":[[8,"AndNot"],[8,"BSwap"],[8,"Vec2"],[8,"Vec4"],[8,"MultiLane"],[8,"Machine"],[8,"RotateEachWord32"],[8,"RotateEachWord64"],[8,"Words4"],[8,"LaneWords4"],[8,"Swap64"],[8,"Vector"],[8,"Vec4Ext"],[8,"Store"],[8,"UnsafeFrom"],[8,"StoreBytes"],[8,"VZip"],[3,"u32x4_generic"],[3,"u64x2_generic"],[3,"u128x1_generic"],[19,"vec128_storage"],[3,"vec256_storage"],[3,"vec512_storage"],[3,"GenericMachine"],[3,"G0"],[3,"G1"],[6,"u64x4_generic"],[6,"u32x4x4_generic"]]},\
"proc_macro2":{"doc":"github crates-io docs-rs","t":[13,13,13,4,3,13,3,13,13,3,3,13,13,13,3,13,4,3,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,3,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Alone","Brace","Bracket","Delimiter","Group","Group","Ident","Ident","Joint","LexError","Literal","Literal","None","Parenthesis","Punct","Punct","Spacing","Span","TokenStream","TokenTree","as_char","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_string","call_site","character","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","delimiter","eq","eq","eq","eq","extend","extend","f32_suffixed","f32_unsuffixed","f64_suffixed","f64_unsuffixed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_str","from_str","hash","i128_suffixed","i128_unsuffixed","i16_suffixed","i16_unsuffixed","i32_suffixed","i32_unsuffixed","i64_suffixed","i64_unsuffixed","i8_suffixed","i8_unsuffixed","into","into","into","into","into","into","into","into","into","into","into_iter","is_empty","isize_suffixed","isize_unsuffixed","join","located_at","mixed_site","new","new","new","new","new_raw","partial_cmp","resolved_at","set_span","set_span","set_span","set_span","set_span","spacing","span","span","span","span","span","span","span_close","span_open","stream","string","subspan","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","token_stream","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128_suffixed","u128_unsuffixed","u16_suffixed","u16_unsuffixed","u32_suffixed","u32_unsuffixed","u64_suffixed","u64_unsuffixed","u8_suffixed","u8_unsuffixed","unwrap","usize_suffixed","usize_unsuffixed","0","0","0","0","IntoIter","TokenStream","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_iter","next","size_hint","to_owned","try_from","try_into","type_id"],"q":["proc_macroproc_macro2::TokenTree","","","","proc_macro2::token_stream","","","","","","","","","","","","","","",""],"d":["E.g. <code>+</code> is <code>Alone</code> in <code>+ =</code>, <code>+ident</code> or <code>+()</code>.","<code>{ ... }</code>","<code>[ ... ]</code>","Describes how a sequence of token trees is delimited.","A delimited token stream.","A token stream surrounded by bracket delimiters.","A word of Rust code, which may be a keyword or legal …","An identifier.","E.g. <code>+</code> is <code>Joint</code> in <code>+=</code> or <code>&#39;</code> is <code>Joint</code> in <code>&#39;#</code>.","Error returned from <code>TokenStream::from_str</code>.","A literal string (<code>&quot;hello&quot;</code>), byte string (<code>b&quot;hello&quot;</code>), …","A literal character (<code>&#39;a&#39;</code>), string (<code>&quot;hello&quot;</code>), number (<code>2.3</code>), …","<code>Ø ... Ø</code>","<code>( ... )</code>","A <code>Punct</code> is a single punctuation character like <code>+</code>, <code>-</code> or <code>#</code>.","A single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).","Whether a <code>Punct</code> is followed immediately by another <code>Punct</code> …","A region of source code, along with macro expansion …","An abstract stream of tokens, or more concretely a …","A single token or a delimited sequence of token trees …","Returns the value of this punctuation character as <code>char</code>.","","","","","","","","","","","","","","","","","","","","","Byte string literal.","The span of the invocation of the current procedural macro.","Character literal.","","","","","","","","","","","","","","","","","","","","","Returns the delimiter of this <code>Group</code>","","","","","","","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks if this <code>TokenStream</code> is empty.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Create a new span encompassing <code>self</code> and <code>other</code>.","Creates a new span with the same name resolution behavior …","The span located at the invocation of the procedural …","Returns an empty <code>TokenStream</code> containing no token trees.","Creates a new <code>Group</code> with the given delimiter and token …","Creates a new <code>Punct</code> from the given character and spacing.","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","Creates a new span with the same line/column information …","Configures the span for <em>only this token</em>.","Configures the span for this <code>Group</code>’s delimiters, but not …","Configure the span for this punctuation character.","Configures the span of this <code>Ident</code>, possibly changing its …","Configures the span associated for this literal.","Returns the spacing of this punctuation character, …","","Returns the span of this tree, delegating to the <code>span</code> …","Returns the span for the delimiters of this token stream, …","Returns the span for this punctuation character.","Returns the span of this <code>Ident</code>.","Returns the span encompassing this literal.","Returns the span pointing to the closing delimiter of this …","Returns the span pointing to the opening delimiter of this …","Returns the <code>TokenStream</code> of tokens that are delimited in …","String literal.","Returns a <code>Span</code> that is a subset of <code>self.span()</code> containing …","","","","","","","","","","","","","","","","","Public implementation details for the <code>TokenStream</code> type, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Convert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","","","","","An iterator over <code>TokenStream</code>’s <code>TokenTree</code>s.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[1,2,2,0,0,3,0,3,1,0,0,3,2,2,0,3,0,0,0,0,4,5,6,7,3,8,2,4,1,9,10,5,6,7,3,8,2,4,1,9,10,10,7,10,6,7,3,8,2,4,1,9,10,6,7,3,8,2,4,1,9,10,9,6,8,2,1,9,9,6,6,10,10,10,10,5,5,6,6,7,3,3,8,8,2,4,4,1,9,9,10,10,5,6,6,6,7,7,3,3,3,3,3,8,2,4,1,9,10,6,6,6,10,9,10,10,10,10,10,10,10,10,10,10,5,6,7,3,8,2,4,1,9,10,6,6,10,10,7,7,7,6,8,4,9,9,9,7,3,8,4,9,10,4,5,3,8,4,9,10,8,8,8,10,10,6,7,3,8,2,4,1,9,10,5,6,3,8,4,9,10,0,5,6,7,3,8,2,4,1,9,10,5,6,7,3,8,2,4,1,9,10,5,6,7,3,8,2,4,1,9,10,10,10,10,10,10,10,10,10,10,10,7,10,10,11,12,13,14,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["char",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["literal",3]],[[]],[[["char",0]],["literal",3]],[[["",0]],["tokenstream",3]],[[["",0]],["span",3]],[[["",0]],["tokentree",4]],[[["",0]],["group",3]],[[["",0]],["delimiter",4]],[[["",0]],["punct",3]],[[["",0]],["spacing",4]],[[["",0]],["ident",3]],[[["",0]],["literal",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["ident",3]],["ordering",4]],[[]],[[["",0]],["delimiter",4]],[[["",0],["delimiter",4]],["bool",0]],[[["",0],["spacing",4]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["ident",3]],["bool",0]],[[["",0],["intoiterator",8]]],[[["",0],["intoiterator",8]]],[[["f32",0]],["literal",3]],[[["f32",0]],["literal",3]],[[["f64",0]],["literal",3]],[[["f64",0]],["literal",3]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["tokenstream",3]],["tokenstream",3]],[[["tokentree",4]]],[[]],[[["span",3]],["span",3]],[[["literal",3]],["tokentree",4]],[[["group",3]],["tokentree",4]],[[["ident",3]],["tokentree",4]],[[]],[[["punct",3]],["tokentree",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["str",0]],["result",4,[["tokenstream",3],["lexerror",3]]]],[[["str",0]],["result",4,[["lexerror",3]]]],[[["",0],["",0]]],[[["i128",0]],["literal",3]],[[["i128",0]],["literal",3]],[[["i16",0]],["literal",3]],[[["i16",0]],["literal",3]],[[["i32",0]],["literal",3]],[[["i32",0]],["literal",3]],[[["i64",0]],["literal",3]],[[["i64",0]],["literal",3]],[[["i8",0]],["literal",3]],[[["i8",0]],["literal",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[["",0]],["bool",0]],[[["isize",0]],["literal",3]],[[["isize",0]],["literal",3]],[[["",0],["span",3]],["option",4,[["span",3]]]],[[["",0],["span",3]],["span",3]],[[]],[[]],[[["delimiter",4],["tokenstream",3]]],[[["char",0],["spacing",4]]],[[["str",0],["span",3]]],[[["str",0],["span",3]]],[[["",0],["ident",3]],["option",4,[["ordering",4]]]],[[["",0],["span",3]],["span",3]],[[["",0],["span",3]]],[[["",0],["span",3]]],[[["",0],["span",3]]],[[["",0],["span",3]]],[[["",0],["span",3]]],[[["",0]],["spacing",4]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["tokenstream",3]],[[["str",0]],["literal",3]],[[["",0],["rangebounds",8,[["usize",0]]]],["option",4,[["span",3]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["u128",0]],["literal",3]],[[["u128",0]],["literal",3]],[[["u16",0]],["literal",3]],[[["u16",0]],["literal",3]],[[["u32",0]],["literal",3]],[[["u32",0]],["literal",3]],[[["u64",0]],["literal",3]],[[["u64",0]],["literal",3]],[[["u8",0]],["literal",3]],[[["u8",0]],["literal",3]],[[],["span",3]],[[["usize",0]],["literal",3]],[[["usize",0]],["literal",3]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["intoiter",3]],[[["",0],["",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["",0]],["option",4,[["tokentree",4]]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[4,"Spacing"],[4,"Delimiter"],[4,"TokenTree"],[3,"Punct"],[3,"LexError"],[3,"TokenStream"],[3,"Span"],[3,"Group"],[3,"Ident"],[3,"Literal"],[13,"Group"],[13,"Ident"],[13,"Punct"],[13,"Literal"],[3,"IntoIter"]]},\
"quote":{"doc":"github crates-io docs-rs","t":[8,8,8,10,10,10,10,10,14,11,11,14,14,11,11,11,11,10],"n":["IdentFragment","ToTokens","TokenStreamExt","append","append_all","append_separated","append_terminated","fmt","format_ident","into_token_stream","into_token_stream","quote","quote_spanned","span","span","to_token_stream","to_token_stream","to_tokens"],"q":["quote","","","","","","","","","","","","","","","","",""],"d":["Specialized formatting trait used by <code>format_ident!</code>.","Types that can be interpolated inside a <code>quote!</code> invocation.","TokenStream extension trait with methods for appending …","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","Format this value as an identifier fragment.","Formatting macro for constructing <code>Ident</code>s.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","The whole point.","Same as <code>quote!</code>, but applies a given span to all tokens …","Span associated with this <code>IdentFragment</code>.","Span associated with this <code>IdentFragment</code>.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Write <code>self</code> to the given <code>TokenStream</code>."],"i":[0,0,0,1,1,1,1,2,0,3,3,0,0,2,2,3,3,3],"f":[null,null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["formatter",3]],["result",6]],null,[[],["tokenstream",3]],[[],["tokenstream",3]],null,null,[[["",0]],["option",4,[["span",3]]]],[[["",0]],["option",4,[["span",3]]]],[[["",0]],["tokenstream",3]],[[["",0]],["tokenstream",3]],[[["",0],["tokenstream",3]]]],"p":[[8,"TokenStreamExt"],[8,"IdentFragment"],[8,"ToTokens"]]},\
"rand":{"doc":"Utilities for random number generation","t":[18,8,3,8,18,8,8,16,8,11,11,11,0,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,10,0,5,11,11,0,11,11,11,11,11,0,11,11,5,11,10,11,11,10,11,11,11,11,13,3,3,4,3,3,8,8,13,13,13,3,3,3,3,13,3,4,3,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,0,8,8,8,16,3,3,3,3,3,8,16,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,4,3,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,11,11,11,11,11,11,11,11,11,11,2,2,2,2,2,2,2,2,2,2,2,3,3,3,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,8,3,8,11,11,10,11,10,11,11,10,10,11,10,10,11,11,0,11,11,11,11,10,10,11,11,11,11,11,4,4,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CUSTOM_START","CryptoRng","Error","Fill","INTERNAL_START","Rng","RngCore","Seed","SeedableRng","borrow","borrow_mut","code","distributions","fill","fill","fill_bytes","fmt","fmt","from","from","from","from_entropy","from_rng","from_seed","gen","gen","gen_bool","gen_bool","gen_range","gen_range","gen_ratio","gen_ratio","inner","into","new","next_u32","next_u64","prelude","random","raw_os_error","read","rngs","sample","sample","sample_iter","sample_iter","seed_from_u64","seq","source","take_inner","thread_rng","to_string","try_fill","try_fill","try_fill","try_fill_bytes","try_from","try_into","type_id","vzip","AllWeightsZero","Alphanumeric","Bernoulli","BernoulliError","DistIter","DistMap","DistString","Distribution","InvalidProbability","InvalidWeight","NoItem","Open01","OpenClosed01","Slice","Standard","TooMany","Uniform","WeightedError","WeightedIndex","append_string","append_string","append_string","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_ratio","into","into","into","into","into","into","into","into","into","into","into_iter","map","map","ne","ne","new","new","next","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample_iter","sample_iter","sample_string","sample_string","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uniform","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","weighted","SampleBorrow","SampleRange","SampleUniform","Sampler","Uniform","UniformChar","UniformDuration","UniformFloat","UniformInt","UniformSampler","X","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","is_empty","ne","ne","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","AllWeightsZero","InvalidWeight","NoItem","TooMany","WeightedError","WeightedIndex","alias_method","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","fmt","from","from","into","into","ne","new","sample","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","update_weights","vzip","vzip","Weight","WeightedIndex","borrow","borrow_mut","fmt","from","into","new","try_from","try_into","type_id","vzip","CryptoRng","Distribution","IteratorRandom","Rng","RngCore","SeedableRng","SliceRandom","StdRng","ThreadRng","random","thread_rng","OsRng","StdRng","ThreadRng","adapter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","eq","fill_bytes","fill_bytes","fill_bytes","fmt","fmt","fmt","from","from","from","from_rng","from_seed","into","into","into","mock","ne","next_u32","next_u32","next_u32","next_u64","next_u64","next_u64","to_owned","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","ReadError","ReadRng","ReseedingRng","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","fill_bytes","fill_bytes","fmt","fmt","fmt","fmt","from","from","from","into","into","into","new","new","next_u32","next_u32","next_u64","next_u64","reseed","source","to_owned","to_string","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","StepRng","borrow","borrow_mut","clone","clone_into","eq","fill_bytes","fmt","from","into","ne","new","next_u32","next_u64","to_owned","try_fill_bytes","try_from","try_into","type_id","vzip","Item","IteratorRandom","SliceChooseIter","SliceRandom","borrow","borrow_mut","choose","choose","choose_multiple","choose_multiple","choose_multiple_fill","choose_multiple_weighted","choose_mut","choose_stable","choose_weighted","choose_weighted_mut","fmt","from","index","into","into_iter","len","next","partial_shuffle","shuffle","size_hint","try_from","try_into","type_id","vzip","IndexVec","IndexVecIntoIter","IndexVecIter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","fmt","fmt","fmt","from","from","from","from","from","index","into","into","into","into_iter","into_iter","into_iter","into_vec","is_empty","iter","len","next","next","sample","sample_weighted","size_hint","size_hint","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":["rand","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::distributionsrand::distributions::uniform","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::distributions::weighted","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::distributions::weighted::alias_method","","","","","","","","","","","","rand::prelude","","","","","","","","","","","rand::rngs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::rngs::adapter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::rngs::mock","","","","","","","","","","","","","","","","","","","","rand::seq","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::seq::index","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Codes at or above this point can be used by users to …","A marker trait used to indicate that an <code>RngCore</code> or …","Error type of random number generators","Types which may be filled with random data","Codes below this point represent OS Errors (i.e. positive …","An automatically-implemented extension trait on <code>RngCore</code> …","The core of a random number generator.","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","","","Retrieve the error code, if any.","Generating random samples from probability distributions","Fill any type implementing <code>Fill</code> with random data","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> with random data.","","","","","Returns the argument unchanged.","Creates a new instance of the RNG seeded via <code>getrandom</code>.","Create a new PRNG seeded from another <code>Rng</code>.","Create a new PRNG using the given seed.","Return a random value supporting the <code>Standard</code> distribution.","Return a random value supporting the <code>Standard</code> distribution.","Return a bool with a probability <code>p</code> of being true.","Return a bool with a probability <code>p</code> of being true.","Generate a random value in the given range.","Generate a random value in the given range.","Return a bool with a probability of <code>numerator/denominator</code> …","Return a bool with a probability of <code>numerator/denominator</code> …","Reference the inner error (<code>std</code> only)","Calls <code>U::from(self)</code>.","Construct from any type supporting <code>std::error::Error</code>","Return the next random <code>u32</code>.","Return the next random <code>u64</code>.","Convenience re-export of common members","Generates a random value using the thread-local random …","Extract the raw OS error code (if this error came from the …","","Random number generators and adapters","Sample a new value, using the given distribution.","Sample a new value, using the given distribution.","Create an iterator that generates values using the given …","Create an iterator that generates values using the given …","Create a new PRNG using a <code>u64</code> seed.","Sequence-related functionality","","Unwrap the inner error (<code>std</code> only)","Retrieve the lazily-initialized thread-local random number …","","Fill self with random data","Fill any type implementing <code>Fill</code> with random data","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> entirely with random data.","","","","","All items in the provided weight collection are zero.","Sample a <code>u8</code>, uniformly distributed over ASCII letters and …","The Bernoulli distribution.","Error type returned from <code>Bernoulli::new</code>.","An iterator that generates random values of <code>T</code> with …","A distribution of values of type <code>S</code> derived from the …","<code>String</code> sampler","Types (distributions) that can be used to create a random …","<code>p &lt; 0</code> or <code>p &gt; 1</code>.","A weight is either less than zero, greater than the …","The provided weight collection contains no items.","A distribution to sample floating point numbers uniformly …","A distribution to sample floating point numbers uniformly …","A distribution to sample items uniformly from a slice.","A generic random value distribution, implemented for many …","Too many weights are provided (length greater than <code>u32::MAX</code>…","Sample values uniformly between two bounds.","Error type returned from <code>WeightedIndex::new</code>.","A distribution using weighted sampling of discrete items","Append <code>len</code> random chars to <code>string</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Construct a new <code>Bernoulli</code> with the probability of success …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a distribution of values of ‘S’ by mapping the …","Create a distribution of values of ‘S’ by mapping the …","","","Construct a new <code>Bernoulli</code> with the given probability of …","Create a new <code>Slice</code> instance which samples uniformly from …","","Generate a random value of <code>T</code>, using <code>rng</code> as the source of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create an iterator that generates random values of <code>T</code>, …","Create an iterator that generates random values of <code>T</code>, …","Generate a <code>String</code> of <code>len</code> random chars","Generate a <code>String</code> of <code>len</code> random chars","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A distribution uniformly sampling numbers within a given …","","","","","","","","","","","Weighted index sampling","Helper trait similar to <code>Borrow</code> but implemented only for …","Range that supports generating a single sample efficiently.","Helper trait for creating objects using the correct …","The <code>UniformSampler</code> implementation supporting type <code>X</code>.","Sample values uniformly between two bounds.","The back-end implementing <code>UniformSampler</code> for <code>char</code>.","The back-end implementing <code>UniformSampler</code> for <code>Duration</code>.","The back-end implementing <code>UniformSampler</code> for …","The back-end implementing <code>UniformSampler</code> for integer types.","Helper trait handling actual uniform sampling.","The type sampled by this implementation.","Immutably borrows from an owned value. See <code>Borrow::borrow</code>","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check whether the range is empty.","","","Construct self, with inclusive lower bound and exclusive …","Create a new <code>Uniform</code> instance which samples uniformly from …","","","","","","","","","","","","","","","","","Construct self, with inclusive bounds <code>[low, high]</code>.","Create a new <code>Uniform</code> instance which samples uniformly from …","","","","","","","","","","","","","","","","","Sample a value.","","","","","","","","","","","","","","","","","Generate a sample from the given range.","Sample a single value uniformly from a range with …","","","","","","","","","","","","","","","Sample a single value uniformly from a range with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","All items in the provided weight collection are zero.","A weight is either less than zero, greater than the …","The provided weight collection contains no items.","Too many weights are provided (length greater than <code>u32::MAX</code>…","Error type returned from <code>WeightedIndex::new</code>.","A distribution using weighted sampling of discrete items","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Creates a new a <code>WeightedIndex</code> <code>Distribution</code> using the values","","","","","","","","","","","Update a subset of weights, without changing the number of …","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","A random number generator that retrieves randomness from …","The standard RNG. The PRNG algorithm in <code>StdRng</code> is chosen …","A reference to the thread-local generator","Wrappers / adapters forming RNGs","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Mock random number generator","","","","","","","","","","","","","","","","","","","","","","","","","","<code>ReadRng</code> error type","An RNG that reads random bytes straight from any type …","A wrapper around any PRNG that implements <code>BlockRngCore</code>, …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>ReadRng</code> from a <code>Read</code>.","Create a new <code>ReseedingRng</code> from an existing PRNG, combined …","","","","","Reseed the internal PRNG.","","","","","","","","","","","","","","","","","","A simple implementation of <code>RngCore</code> for testing purposes.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Create a <code>StepRng</code>, yielding an arithmetic sequence starting …","","","","","","","","","The element type.","Extension trait on iterators, providing random sampling …","An iterator over multiple slice elements.","Extension trait on slices, providing random mutation and …","","","Returns a reference to one random element of the slice, or …","Choose one element at random from the iterator.","Chooses <code>amount</code> elements from the slice at random, without …","Collects <code>amount</code> values at random from the iterator into a …","Collects values at random from the iterator into a …","Similar to <code>choose_multiple</code>, but where the likelihood of …","Returns a mutable reference to one random element of the …","Choose one element at random from the iterator.","Similar to <code>choose</code>, but where the likelihood of each …","Similar to <code>choose_mut</code>, but where the likelihood of each …","","Returns the argument unchanged.","Low-level API for sampling indices","Calls <code>U::from(self)</code>.","","","","Shuffle a slice in place, but exit early.","Shuffle a mutable slice in place.","","","","","","A vector of indices.","Return type of <code>IndexVec::into_iter</code>.","Return type of <code>IndexVec::iter</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return the value at the given <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert into an iterator over the indices as a sequence of …","","","Return result as a <code>Vec&lt;usize&gt;</code>. Conversion may or may not …","Returns <code>true</code> if the length is 0.","Iterate over the indices as a sequence of <code>usize</code> values","Returns the number of indices","","","Randomly sample exactly <code>amount</code> distinct indices from …","Randomly sample exactly <code>amount</code> distinct indices from …","","","","","","","","","","","","","","","",""],"i":[1,0,0,0,1,0,0,2,0,1,1,1,0,3,3,4,1,1,1,1,1,2,2,2,3,3,3,3,3,3,3,3,1,1,1,4,4,0,0,1,4,0,3,3,3,3,2,0,1,1,0,1,5,3,3,4,1,1,1,1,6,0,0,0,0,0,0,0,7,6,6,0,0,0,0,6,0,0,0,8,9,10,11,7,12,13,14,15,9,16,17,10,11,7,12,13,14,15,9,16,17,10,11,7,14,15,9,16,17,10,11,7,14,15,9,16,17,10,11,7,17,11,7,7,12,13,14,15,9,16,17,10,11,7,12,13,14,15,9,16,17,17,17,10,11,11,7,12,13,14,15,9,16,17,10,12,18,18,11,17,11,16,12,18,11,13,14,14,15,15,9,16,17,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,18,18,8,8,12,11,7,14,15,9,16,17,10,7,11,7,12,13,14,15,9,16,17,10,11,7,12,13,14,15,9,16,17,10,11,7,12,13,14,15,9,16,17,10,0,11,7,12,13,14,15,9,16,17,10,0,0,0,0,19,0,0,0,0,0,0,20,21,22,23,24,25,22,23,24,25,22,23,24,25,22,23,24,25,22,24,22,23,24,25,22,23,24,25,22,23,24,25,26,22,24,20,17,22,22,22,22,22,22,22,22,22,22,22,22,23,24,24,25,20,17,22,22,22,22,22,22,22,22,22,22,22,22,23,24,24,25,20,22,22,22,22,22,22,22,22,22,22,22,22,23,24,24,25,26,20,22,22,22,22,22,22,22,22,22,22,22,22,24,24,20,22,22,22,22,22,22,22,22,22,22,22,22,22,23,24,25,22,23,24,25,22,23,24,25,22,23,24,25,22,23,24,25,6,6,6,6,0,0,0,27,6,27,6,27,6,27,6,27,6,27,6,6,27,6,27,6,27,27,27,27,6,6,27,6,27,6,27,6,27,27,6,0,0,28,28,28,28,28,28,28,28,28,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,30,31,29,30,31,29,30,31,29,30,31,29,31,30,29,30,31,29,30,31,29,30,31,30,30,29,30,31,0,30,29,30,31,29,30,31,29,30,31,29,30,31,29,30,31,29,30,31,29,30,31,29,30,31,0,0,0,32,33,34,32,33,34,34,34,32,34,32,33,33,34,32,33,34,32,33,34,32,34,32,34,32,34,34,33,34,33,32,34,32,33,34,32,33,34,32,33,34,32,33,34,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,36,0,0,0,37,37,36,38,36,38,38,36,36,38,36,36,37,37,0,37,37,37,37,36,36,37,37,37,37,37,0,0,0,39,40,41,39,40,41,39,41,39,41,39,39,40,41,39,39,39,40,41,39,39,40,41,39,40,41,39,39,39,39,40,41,0,0,40,41,39,41,39,40,41,39,40,41,39,40,41,39,40,41],"f":[null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["option",4,[["nonzerou32",3]]]],null,[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["nonzerou32",3]],["error",3]],[[["error",3]],["error",3]],[[]],[[]],[[],["result",4,[["error",3]]]],[[]],[[["",0]]],[[["",0]]],[[["",0],["f64",0]],["bool",0]],[[["",0],["f64",0]],["bool",0]],[[["",0]]],[[["",0]]],[[["",0],["u32",0],["u32",0]],["bool",0]],[[["",0],["u32",0],["u32",0]],["bool",0]],[[["",0]],["error",8]],[[]],[[],["error",3]],[[["",0]],["u32",0]],[[["",0]],["u64",0]],null,[[]],[[["",0]],["option",4,[["i32",0]]]],[[["",0]],["result",4,[["usize",0],["error",3]]]],null,[[["",0],["distribution",8]]],[[["",0],["distribution",8]]],[[],["distiter",3]],[[],["distiter",3]],[[["u64",0]]],null,[[["",0]],["option",4,[["error",8]]]],[[],["box",3,[["error",8],["global",3]]]],[[],["threadrng",3]],[[["",0]],["string",3]],[[["",0],["",0]],["result",4,[["error",3]]]],[[["",0],["",0]],["result",4,[["error",3]]]],[[["",0],["",0]],["result",4,[["error",3]]]],[[["",0]],["result",4,[["error",3]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["",0],["string",3],["usize",0]]],[[["",0],["",0],["string",3],["usize",0]]],[[["",0],["",0],["string",3],["usize",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["bernoulli",3]],[[["",0]],["bernoullierror",4]],[[["",0]],["openclosed01",3]],[[["",0]],["open01",3]],[[["",0]],["alphanumeric",3]],[[["",0]],["slice",3]],[[["",0]],["uniform",3]],[[["",0]],["standard",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["bernoulli",3]],["bool",0]],[[["",0],["bernoullierror",4]],["bool",0]],[[["",0],["uniform",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["range",3]],["uniform",3]],[[]],[[["rangeinclusive",3]],["uniform",3]],[[]],[[["u32",0],["u32",0]],["result",4,[["bernoulli",3],["bernoullierror",4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["distmap",3]],[[],["distmap",3]],[[["",0],["bernoulli",3]],["bool",0]],[[["",0],["uniform",3]],["bool",0]],[[["f64",0]],["result",4,[["bernoulli",3],["bernoullierror",4]]]],[[],["result",4,[["emptyslice",3]]]],[[["",0]],["option",4]],[[["",0],["",0]]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]]],[[["",0],["",0]],["f64",0]],[[["",0],["",0]],["f32",0]],[[["",0],["",0]],["f64",0]],[[["",0],["",0]],["f32",0]],[[["",0],["",0]],["u8",0]],[[["",0],["",0]],["",0]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]]],[[["",0],["",0]],["u32",0]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]],["isize",0]],[[["",0],["",0]]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["nonzerou8",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]],["wrapping",3]],[[["",0],["",0]],["option",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]],["f32",0]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]],["i128",0]],[[["",0],["",0]],["char",0]],[[["",0],["",0]],["u16",0]],[[["",0],["",0]]],[[["",0],["",0]],["u128",0]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]],["nonzerousize",3]],[[["",0],["",0]],["nonzerou128",3]],[[["",0],["",0]],["f64",0]],[[["",0],["",0]]],[[["",0],["",0]],["nonzerou16",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]],["nonzerou32",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]],["usize",0]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]],["i64",0]],[[["",0],["",0]]],[[["",0],["",0]],["i32",0]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]],["i8",0]],[[["",0],["",0]]],[[["",0],["",0]],["i16",0]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]],["u8",0]],[[["",0],["",0]]],[[["",0],["",0]],["nonzerou64",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["distiter",3]],[[],["distiter",3]],[[["",0],["",0],["usize",0]],["string",3]],[[["",0],["",0],["usize",0]],["string",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["uniformint",3]],[[["",0]],["uniformchar",3]],[[["",0]],["uniformfloat",3]],[[["",0]],["uniformduration",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["uniformint",3]],["bool",0]],[[["",0],["uniformfloat",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0],["uniformint",3]],["bool",0]],[[["",0],["uniformfloat",3]],["bool",0]],[[]],[[],["uniform",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["uniform",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]],["duration",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["weightedindex",3]],[[["",0]],["weightederror",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["weightedindex",3]],["bool",0]],[[["",0],["weightederror",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["",0],["weightedindex",3]],["bool",0]],[[],["result",4,[["weightedindex",3],["weightederror",4]]]],[[["",0],["",0]],["usize",0]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["result",4,[["weightederror",4]]]],[[]],[[]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["vec",3]],["result",4,[["weightederror",4]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["osrng",3]],[[["",0]],["stdrng",3]],[[["",0]],["threadrng",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["osrng",3]],[[],["threadrng",3]],[[["",0],["stdrng",3]],["bool",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["rngcore",8]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],null,[[["",0],["stdrng",3]],["bool",0]],[[["",0]],["u32",0]],[[["",0]],["u32",0]],[[["",0]],["u32",0]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["result",4,[["error",3]]]],[[["",0]],["result",4,[["error",3]]]],[[["",0]],["result",4,[["error",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["reseedingrng",3]],[[["",0],["",0]]],[[["",0]]],[[["",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["readrng",3]],[[["u64",0]]],[[["",0]],["u32",0]],[[["",0]],["u32",0]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],[[["",0]],["result",4,[["error",3]]]],[[["",0]],["option",4,[["error",8]]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["result",4,[["error",3]]]],[[["",0]],["result",4,[["error",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["steprng",3]],[[["",0],["",0]]],[[["",0],["steprng",3]],["bool",0]],[[["",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0],["steprng",3]],["bool",0]],[[["u64",0],["u64",0]]],[[["",0]],["u32",0]],[[["",0]],["u64",0]],[[["",0]]],[[["",0]],["result",4,[["error",3]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["",0]],["option",4]],[[["",0]],["option",4]],[[["",0],["",0],["usize",0]],["slicechooseiter",3]],[[["",0],["usize",0]],["vec",3]],[[["",0]],["usize",0]],[[["",0],["",0],["usize",0]],["result",4,[["slicechooseiter",3],["weightederror",4]]]],[[["",0],["",0]],["option",4]],[[["",0]],["option",4]],[[["",0],["",0]],["result",4,[["weightederror",4]]]],[[["",0],["",0]],["result",4,[["weightederror",4]]]],[[["",0],["formatter",3]],["result",6]],[[]],null,[[]],[[]],[[["",0]],["usize",0]],[[["",0]],["option",4]],[[["",0],["",0],["usize",0]]],[[["",0],["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["indexvec",4]],[[["",0]],["indexvecintoiter",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["indexvec",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["vec",3,[["u32",0]]]]],[[["vec",3,[["usize",0]]]]],[[]],[[]],[[]],[[["",0],["usize",0]],["usize",0]],[[]],[[]],[[]],[[],["indexvecintoiter",4]],[[]],[[]],[[],["vec",3,[["usize",0]]]],[[["",0]],["bool",0]],[[["",0]],["indexveciter",4]],[[["",0]],["usize",0]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4]],[[["",0],["usize",0],["usize",0]],["indexvec",4]],[[["",0],["usize",0],["usize",0]],["result",4,[["indexvec",4],["weightederror",4]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]]],"p":[[3,"Error"],[8,"SeedableRng"],[8,"Rng"],[8,"RngCore"],[8,"Fill"],[4,"WeightedError"],[4,"BernoulliError"],[8,"DistString"],[3,"Alphanumeric"],[3,"Standard"],[3,"Bernoulli"],[3,"DistIter"],[3,"DistMap"],[3,"OpenClosed01"],[3,"Open01"],[3,"Slice"],[3,"Uniform"],[8,"Distribution"],[8,"SampleUniform"],[8,"UniformSampler"],[8,"SampleBorrow"],[3,"UniformInt"],[3,"UniformChar"],[3,"UniformFloat"],[3,"UniformDuration"],[8,"SampleRange"],[3,"WeightedIndex"],[3,"WeightedIndex"],[3,"OsRng"],[3,"StdRng"],[3,"ThreadRng"],[3,"ReadRng"],[3,"ReadError"],[3,"ReseedingRng"],[3,"StepRng"],[8,"SliceRandom"],[3,"SliceChooseIter"],[8,"IteratorRandom"],[4,"IndexVec"],[4,"IndexVecIter"],[4,"IndexVecIntoIter"]]},\
"rand_chacha":{"doc":"The ChaCha random number generator.","t":[3,3,3,3,3,3,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ChaCha12Core","ChaCha12Rng","ChaCha20Core","ChaCha20Rng","ChaCha8Core","ChaCha8Rng","ChaChaCore","ChaChaRng","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","fill_bytes","fill_bytes","fill_bytes","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_seed","from_seed","from_seed","from_seed","from_seed","from_seed","generate","generate","generate","get_seed","get_seed","get_seed","get_stream","get_stream","get_stream","get_word_pos","get_word_pos","get_word_pos","into","into","into","into","into","into","ne","ne","ne","next_u32","next_u32","next_u32","next_u64","next_u64","next_u64","rand_core","set_stream","set_stream","set_stream","set_word_pos","set_word_pos","set_word_pos","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip"],"q":["rand_chacha","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["ChaCha with 12 rounds","A cryptographically secure random number generator that …","ChaCha with 20 rounds","A cryptographically secure random number generator that …","ChaCha with 8 rounds","A cryptographically secure random number generator that …","ChaCha with 20 rounds, low-level interface","ChaCha with 20 rounds","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","Get the seed.","Get the seed.","Get the seed.","Get the stream number.","Get the stream number.","Get the stream number.","Get the offset from the start of the stream, in 32-bit …","Get the offset from the start of the stream, in 32-bit …","Get the offset from the start of the stream, in 32-bit …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Set the stream number.","Set the stream number.","Set the stream number.","Set the offset from the start of the stream, in 32-bit …","Set the offset from the start of the stream, in 32-bit …","Set the offset from the start of the stream, in 32-bit …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,2,4,6,1,2,3,4,5,6,1,2,2,3,4,4,5,6,6,1,2,3,4,5,6,1,3,5,2,4,6,2,4,6,2,4,6,1,2,3,4,5,6,1,3,5,2,4,6,2,4,6,0,2,4,6,2,4,6,1,2,3,4,5,6,2,4,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6],"f":[null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["chacha20core",3]],[[["",0]],["chacha20rng",3]],[[["",0]],["chacha12core",3]],[[["",0]],["chacha12rng",3]],[[["",0]],["chacha8core",3]],[[["",0]],["chacha8rng",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["chacha20core",3]],["bool",0]],[[["",0],["chacha20rng",3]],["bool",0]],[[["",0],["chacha12core",3]],["bool",0]],[[["",0],["chacha12rng",3]],["bool",0]],[[["",0],["chacha8core",3]],["bool",0]],[[["",0],["chacha8rng",3]],["bool",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["chacha20core",3]]],[[]],[[]],[[["chacha12core",3]]],[[]],[[]],[[["chacha8core",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],[[["",0]],["u128",0]],[[["",0]],["u128",0]],[[["",0]],["u128",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["chacha20core",3]],["bool",0]],[[["",0],["chacha12core",3]],["bool",0]],[[["",0],["chacha8core",3]],["bool",0]],[[["",0]],["u32",0]],[[["",0]],["u32",0]],[[["",0]],["u32",0]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],null,[[["",0],["u64",0]]],[[["",0],["u64",0]]],[[["",0],["u64",0]]],[[["",0],["u128",0]]],[[["",0],["u128",0]]],[[["",0],["u128",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["result",4,[["error",3]]]],[[["",0]],["result",4,[["error",3]]]],[[["",0]],["result",4,[["error",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"ChaCha20Core"],[3,"ChaCha20Rng"],[3,"ChaCha12Core"],[3,"ChaCha12Rng"],[3,"ChaCha8Core"],[3,"ChaCha8Rng"]]},\
"rand_core":{"doc":"Random number generation traits","t":[18,8,3,18,3,8,16,8,0,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,0,11,11,11,0,11,10,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,3,3,8,16,16,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5],"n":["CUSTOM_START","CryptoRng","Error","INTERNAL_START","OsRng","RngCore","Seed","SeedableRng","block","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","code","default","fill_bytes","fill_bytes","fmt","fmt","fmt","from","from","from","from","from_entropy","from_rng","from_seed","impls","inner","into","into","le","new","next_u32","next_u32","next_u64","next_u64","raw_os_error","read","seed_from_u64","source","take_inner","to_owned","to_string","try_fill_bytes","try_fill_bytes","try_from","try_from","try_into","try_into","type_id","type_id","BlockRng","BlockRng64","BlockRngCore","Item","Results","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","core","core","fill_bytes","fill_bytes","fmt","fmt","from","from","from_rng","from_rng","from_seed","from_seed","generate","generate_and_set","generate_and_set","index","index","into","into","new","new","next_u32","next_u32","next_u64","next_u64","reset","reset","seed_from_u64","seed_from_u64","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_from","try_from","try_into","try_into","type_id","type_id","fill_bytes_via_next","fill_via_u32_chunks","fill_via_u64_chunks","next_u32_via_fill","next_u64_via_fill","next_u64_via_u32","read_u32_into","read_u64_into"],"q":["rand_core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand_core::block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand_core::impls","","","","","","rand_core::le",""],"d":["Codes at or above this point can be used by users to …","A marker trait used to indicate that an <code>RngCore</code> or …","Error type of random number generators","Codes below this point represent OS Errors (i.e. positive …","A random number generator that retrieves randomness from …","The core of a random number generator.","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","The <code>BlockRngCore</code> trait and implementation helpers","","","","","","","Retrieve the error code, if any.","","Fill <code>dest</code> with random data.","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Creates a new instance of the RNG seeded via <code>getrandom</code>.","Create a new PRNG seeded from another <code>Rng</code>.","Create a new PRNG using the given seed.","Helper functions for implementing <code>RngCore</code> functions.","Reference the inner error (<code>std</code> only)","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Little-Endian utilities","Construct from any type supporting <code>std::error::Error</code>","Return the next random <code>u32</code>.","","Return the next random <code>u64</code>.","","Extract the raw OS error code (if this error came from the …","","Create a new PRNG using a <code>u64</code> seed.","","Unwrap the inner error (<code>std</code> only)","","","Fill <code>dest</code> entirely with random data.","","","","","","","","A wrapper type implementing <code>RngCore</code> for some type …","A wrapper type implementing <code>RngCore</code> for some type …","A trait for RNGs which do not generate random numbers …","Results element type, e.g. <code>u32</code>.","Results type. This is the ‘block’ an RNG implementing …","","","","","","","","","The <em>core</em> part of the RNG, implementing the <code>generate</code> …","The <em>core</em> part of the RNG, implementing the <code>generate</code> …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Generate a new block of results.","Generate a new set of results immediately, setting the …","Generate a new set of results immediately, setting the …","Get the index into the result buffer.","Get the index into the result buffer.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>BlockRng</code> from an existing RNG implementing …","Create a new <code>BlockRng</code> from an existing RNG implementing …","","","","","Reset the number of available results. This will force a …","Reset the number of available results. This will force a …","","","","","","","","","","","","","Implement <code>fill_bytes</code> via <code>next_u64</code> and <code>next_u32</code>, …","Implement <code>fill_bytes</code> by reading chunks from the output …","Implement <code>fill_bytes</code> by reading chunks from the output …","Implement <code>next_u32</code> via <code>fill_bytes</code>, little-endian order.","Implement <code>next_u64</code> via <code>fill_bytes</code>, little-endian order.","Implement <code>next_u64</code> via <code>next_u32</code>, little-endian order.","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>."],"i":[1,0,0,1,0,0,2,0,0,1,3,1,3,3,3,1,3,4,3,1,1,3,1,1,1,3,2,2,2,0,1,1,3,0,1,4,3,4,3,1,4,2,1,1,3,1,4,3,1,3,1,3,1,3,0,0,0,5,5,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,5,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["osrng",3]],[[["",0],["",0]]],[[["",0]],["option",4,[["nonzerou32",3]]]],[[],["osrng",3]],[[["",0]]],[[["",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["nonzerou32",3]]],[[]],[[["error",3]]],[[]],[[]],[[["rngcore",8]],["result",4,[["error",3]]]],[[]],null,[[["",0]],["error",8]],[[]],[[]],null,[[]],[[["",0]],["u32",0]],[[["",0]],["u32",0]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],[[["",0]],["option",4,[["i32",0]]]],[[["",0]],["result",4,[["usize",0],["error",3]]]],[[["u64",0]]],[[["",0]],["option",4,[["error",8]]]],[[],["box",3,[["error",8]]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["result",4,[["error",3]]]],[[["",0]],["result",4,[["error",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["blockrng",3]],[[["",0]],["blockrng64",3]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,[[["",0]]],[[["",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["rngcore",8]],["result",4,[["error",3]]]],[[["rngcore",8]],["result",4,[["error",3]]]],[[]],[[]],[[["",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[]],[[]],[[],["blockrng",3]],[[],["blockrng64",3]],[[["",0]],["u32",0]],[[["",0]],["u32",0]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],[[["",0]]],[[["",0]]],[[["u64",0]]],[[["u64",0]]],[[["",0]]],[[["",0]]],[[["",0]],["result",4,[["error",3]]]],[[["",0]],["result",4,[["error",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]]],[[]],[[]],[[["",0]],["u32",0]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],[[]],[[]]],"p":[[3,"Error"],[8,"SeedableRng"],[3,"OsRng"],[8,"RngCore"],[8,"BlockRngCore"],[3,"BlockRng"],[3,"BlockRng64"]]},\
"rayon":{"doc":"Data-parallelism library that makes it easy to convert …","t":[3,3,3,3,3,3,3,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,5,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,5,11,5,5,11,11,11,11,11,0,11,0,0,0,0,11,5,11,5,11,0,11,5,11,11,5,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,4,3,3,3,3,3,3,3,3,3,3,8,8,3,3,3,3,8,8,8,16,16,16,16,16,16,16,16,16,16,16,3,13,3,3,3,3,3,3,3,3,8,8,8,8,8,3,3,3,3,13,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,10,10,11,11,11,11,11,0,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,8,8,16,16,16,16,16,8,8,8,16,16,16,8,8,5,5,5,10,10,10,11,10,11,10,10,10,10,11,11,10,10,10,10,10,10,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,2,2,2,2,8,2,2,2,2,2,2,2,10,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,8,8,3,3,3,3,3,3,3,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,8,3,3,3,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["FnContext","Scope","ScopeFifo","ThreadBuilder","ThreadPool","ThreadPoolBuildError","ThreadPoolBuilder","array","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","breadth_first","build","build_global","build_scoped","collections","current_num_threads","current_num_threads","current_thread_has_pending_tasks","current_thread_index","current_thread_index","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","drop","drop","drop","drop","drop","drop","drop","drop","exit_handler","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","in_place_scope","in_place_scope","in_place_scope_fifo","in_place_scope_fifo","index","init","init","init","init","init","init","init","install","into","into","into","into","into","into","into","iter","join","join","join_context","max_num_threads","migrated","name","new","new","num_threads","option","panic_handler","prelude","range","range_inclusive","result","run","scope","scope","scope_fifo","scope_fifo","slice","source","spawn","spawn","spawn","spawn_fifo","spawn_fifo","spawn_fifo","spawn_handler","stack_size","stack_size","start_handler","str","string","thread_name","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vec","IntoIter","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drive","drive_unindexed","drop","fmt","from","init","into","into_par_iter","len","opt_len","to_owned","try_from","try_into","type_id","with_producer","binary_heap","btree_map","btree_set","hash_map","hash_set","linked_list","vec_deque","Drain","IntoIter","Iter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drive","drive","drive","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","into_par_iter","into_par_iter","into_par_iter","len","len","len","opt_len","opt_len","opt_len","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_producer","with_producer","with_producer","IntoIter","Iter","IterMut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","into_par_iter","into_par_iter","into_par_iter","opt_len","opt_len","opt_len","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","IntoIter","Iter","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","drive_unindexed","drive_unindexed","drop","drop","fmt","fmt","from","from","init","init","into","into","into_par_iter","into_par_iter","opt_len","opt_len","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Drain","IntoIter","Iter","IterMut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","into_par_iter","into_par_iter","into_par_iter","into_par_iter","opt_len","opt_len","opt_len","opt_len","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Drain","IntoIter","Iter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","into_par_iter","into_par_iter","into_par_iter","opt_len","opt_len","opt_len","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","IntoIter","Iter","IterMut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","into_par_iter","into_par_iter","into_par_iter","opt_len","opt_len","opt_len","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Drain","IntoIter","Iter","IterMut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drive","drive","drive","drive","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","into_par_iter","into_par_iter","into_par_iter","into_par_iter","len","len","len","len","opt_len","opt_len","opt_len","opt_len","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","with_producer","with_producer","with_producer","with_producer","Chain","Chunks","Cloned","Copied","Either","Empty","Enumerate","Filter","FilterMap","FlatMap","FlatMapIter","Flatten","FlattenIter","Fold","FoldWith","FromParallelIterator","IndexedParallelIterator","Inspect","Interleave","InterleaveShortest","Intersperse","IntoParallelIterator","IntoParallelRefIterator","IntoParallelRefMutIterator","Item","Item","Item","Item","Item","Item","Iter","Iter","Iter","Iter","Iter","IterBridge","Left","Map","MapInit","MapWith","MaxLen","MinLen","MultiZip","Once","PanicFuse","ParallelBridge","ParallelDrainFull","ParallelDrainRange","ParallelExtend","ParallelIterator","Positions","Repeat","RepeatN","Rev","Right","Skip","Split","StepBy","Take","TryFold","TryFoldWith","Update","WhileSome","Zip","ZipEq","all","all","any","any","as_mut","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","chunks","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","cmp","cmp","collect","collect","collect_into_vec","copied","count","count","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","either","either_into","either_with","empty","enumerate","eq","eq","expect_left","expect_right","extend","factor_err","factor_first","factor_none","factor_ok","factor_second","filter","filter_map","find","find_any","find_first","find_last","find_map","find_map_any","find_map_first","find_map_last","flat_map","flat_map_iter","flatten","flatten_iter","flip","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold_with","for_each","for_each","for_each_init","for_each_with","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_par_iter","ge","gt","hash","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","inspect","interleave","interleave_shortest","intersperse","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_iter","into_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","is_left","is_right","last","le","left","left_and_then","left_or","left_or_default","left_or_else","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","lt","map","map","map_init","map_left","map_right","map_with","max","max_by","max_by_key","min","min_by","min_by_key","ne","ne","next","next_back","nth","once","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","panic_fuse","par_bridge","par_drain","par_drain","par_extend","par_extend","par_iter","par_iter_mut","partial_cmp","partial_cmp","partition","partition","partition_map","plumbing","position","position_any","position_first","position_last","positions","product","reduce","reduce_with","repeat","repeatn","rev","rfind","rfold","right","right_and_then","right_or","right_or_default","right_or_else","size_hint","skip","split","step_by","sum","take","take","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_fold","try_fold_with","try_for_each","try_for_each_init","try_for_each_with","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reduce","try_reduce_with","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrap_left","unwrap_right","unzip","unzip_into_vecs","update","while_some","with_max_len","with_min_len","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","zip","zip","zip_eq","0","0","Consumer","Folder","Folder","IntoIter","Item","Item","Output","Producer","ProducerCallback","Reducer","Reducer","Result","Result","UnindexedConsumer","UnindexedProducer","bridge","bridge_producer_consumer","bridge_unindexed","callback","complete","consume","consume_iter","fold_with","fold_with","full","full","into_folder","into_iter","max_len","min_len","reduce","split","split_at","split_at","split_off_left","to_reducer","IntoIter","Iter","IterMut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drive","drive","drive","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","into_par_iter","into_par_iter","into_par_iter","len","len","len","opt_len","opt_len","opt_len","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_producer","with_producer","with_producer","FromParallelIterator","IndexedParallelIterator","IntoParallelIterator","IntoParallelRefIterator","IntoParallelRefMutIterator","ParallelBridge","ParallelDrainFull","ParallelDrainRange","ParallelExtend","ParallelIterator","ParallelSlice","ParallelSliceMut","ParallelString","par_bridge","Iter","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drive","drive","drive_unindexed","drive_unindexed","drop","fmt","from","init","into","into_par_iter","len","len","opt_len","opt_len","to_owned","try_from","try_into","type_id","with_producer","with_producer","Iter","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drive","drive","drive_unindexed","drive_unindexed","drop","fmt","from","init","into","into_par_iter","len","len","opt_len","opt_len","to_owned","try_from","try_into","type_id","with_producer","with_producer","IntoIter","Iter","IterMut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drive","drive","drive","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","into_par_iter","into_par_iter","into_par_iter","len","len","len","opt_len","opt_len","opt_len","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_producer","with_producer","with_producer","Chunks","ChunksExact","ChunksExactMut","ChunksMut","Iter","IterMut","ParallelSlice","ParallelSliceMut","RChunks","RChunksExact","RChunksExactMut","RChunksMut","Split","SplitMut","Windows","as_parallel_slice","as_parallel_slice_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_remainder","into_remainder","len","len","len","len","len","len","len","len","len","len","len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","par_chunks","par_chunks_exact","par_chunks_exact_mut","par_chunks_mut","par_rchunks","par_rchunks_exact","par_rchunks_exact_mut","par_rchunks_mut","par_sort","par_sort_by","par_sort_by_cached_key","par_sort_by_key","par_sort_unstable","par_sort_unstable_by","par_sort_unstable_by_key","par_split","par_split_mut","par_windows","remainder","remainder","remainder","remainder","take_remainder","take_remainder","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","Bytes","CharIndices","Chars","EncodeUtf16","Lines","MatchIndices","Matches","ParallelString","Split","SplitTerminator","SplitWhitespace","as_parallel_string","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","par_bytes","par_char_indices","par_chars","par_encode_utf16","par_lines","par_match_indices","par_matches","par_split","par_split_terminator","par_split_whitespace","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Drain","borrow","borrow_mut","deref","deref_mut","drive_unindexed","drop","drop","fmt","from","init","into","into_par_iter","try_from","try_into","type_id","Drain","IntoIter","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","drive","drive","drive_unindexed","drive_unindexed","drop","drop","drop","fmt","fmt","from","from","init","init","into","into","into_par_iter","into_par_iter","len","len","opt_len","opt_len","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","with_producer","with_producer"],"q":["rayon","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::array","","","","","","","","","","","","","","","","","","","","","","rayon::collections","","","","","","","rayon::collections::binary_heap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::collections::btree_map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::collections::btree_set","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::collections::hash_map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::collections::hash_set","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::collections::linked_list","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::collections::vec_deque","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::iterrayon::iter::Either","","rayon::iter::plumbing","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::option","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::prelude","","","","","","","","","","","","","","rayon::range","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::range_inclusive","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::result","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::slicerayon::strrayon::string","","","","","","","","","","","","","","","","rayon::vec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Provides the calling context to a closure called by …","Represents a fork-join scope which can be used to spawn …","Represents a fork-join scope which can be used to spawn …","Thread builder used for customization via …","Represents a user created thread-pool.","Error when initializing a thread pool.","Used to create a new <code>ThreadPool</code> or to configure the global …","Parallel iterator types for arrays (<code>[T; N]</code>)","","","","","","","","","","","","","","","<strong>(DEPRECATED)</strong> Suggest to worker threads that they execute …","Creates a new <code>ThreadPool</code> initialized using this …","Initializes the global thread pool. This initialization is …","Creates a scoped <code>ThreadPool</code> initialized using this …","Parallel iterator types for standard collections","Returns the number of threads in the current registry. If …","Returns the (current) number of threads in the thread pool.","Returns true if the current worker thread currently has “…","If called from a Rayon worker thread, returns the index of …","If called from a Rayon worker thread in this thread-pool, …","","","","","","","","","","","","","","","","","","","","","","","","","Sets a callback to be invoked on thread exit.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a “fork-join” scope <code>s</code> and invokes the closure …","Creates a scope that spawns work into this thread-pool.","Creates a “fork-join” scope <code>s</code> with FIFO order, and …","Creates a scope that spawns work into this thread-pool in …","Gets the index of this thread in the pool, within …","","","","","","","","Executes <code>op</code> within the threadpool. Any attempts to use <code>join</code>…","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Traits for writing parallel programs using an …","Takes two closures and <em>potentially</em> runs them in parallel. …","Execute <code>oper_a</code> and <code>oper_b</code> in the thread-pool and return …","Identical to <code>join</code>, except that the closures have a …","Returns the maximum number of threads that Rayon supports …","Returns <code>true</code> if the closure was called from a different …","Gets the string that was specified by …","Deprecated in favor of <code>ThreadPoolBuilder::build</code>.","Creates and returns a valid rayon thread pool builder, but …","Sets the number of threads to be used in the rayon …","Parallel iterator types for options","Normally, whenever Rayon catches a panic, it tries to …","The rayon prelude imports the various <code>ParallelIterator</code> …","Parallel iterator types for ranges, the type for values …","Parallel iterator types for inclusive ranges, the type for …","Parallel iterator types for results","Executes the main loop for this thread. This will not …","Creates a “fork-join” scope <code>s</code> and invokes the closure …","Creates a scope that executes within this thread-pool. …","Creates a “fork-join” scope <code>s</code> with FIFO order, and …","Creates a scope that executes within this thread-pool. …","Parallel iterator types for slices","","Fires off a task into the Rayon threadpool in the “static…","Spawns a job into the fork-join scope <code>self</code>. This job will …","Spawns an asynchronous task in this thread-pool. This task …","Fires off a task into the Rayon threadpool in the “static…","Spawns a job into the fork-join scope <code>self</code>. This job will …","Spawns an asynchronous task in this thread-pool. This task …","Sets a custom function for spawning threads.","Gets the value that was specified by …","Sets the stack size of the worker threads","Sets a callback to be invoked on thread start.","Parallel iterator types for strings","This module contains the parallel iterator types for owned …","Sets a closure which takes a thread index and returns the …","","","","","","","","","","","","","","","","","","","","","","","Parallel iterator types for vectors (<code>Vec&lt;T&gt;</code>)","Parallel iterator that moves out of an array.","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","This module contains the parallel iterator types for heaps …","This module contains the parallel iterator types for …","This module contains the parallel iterator types for …","This module contains the parallel iterator types for hash …","This module contains the parallel iterator types for hash …","This module contains the parallel iterator types for …","This module contains the parallel iterator types for …","Draining parallel iterator that moves out of a binary heap,","Parallel iterator over a binary heap","Parallel iterator over an immutable reference to a binary …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Parallel iterator over a B-Tree map","Parallel iterator over an immutable reference to a B-Tree …","Parallel iterator over a mutable reference to a B-Tree map","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Parallel iterator over a B-Tree set","Parallel iterator over an immutable reference to a B-Tree …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Draining parallel iterator that moves out of a hash map, …","Parallel iterator over a hash map","Parallel iterator over an immutable reference to a hash map","Parallel iterator over a mutable reference to a hash map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Draining parallel iterator that moves out of a hash set, …","Parallel iterator over a hash set","Parallel iterator over an immutable reference to a hash set","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Parallel iterator over a linked list","Parallel iterator over an immutable reference to a linked …","Parallel iterator over a mutable reference to a linked list","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Draining parallel iterator that moves a range out of a …","Parallel iterator over a double-ended queue","Parallel iterator over an immutable reference to a …","Parallel iterator over a mutable reference to a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Chain</code> is an iterator that joins <code>b</code> after <code>a</code> in one …","<code>Chunks</code> is an iterator that groups elements of an …","<code>Cloned</code> is an iterator that clones the elements of an …","<code>Copied</code> is an iterator that copies the elements of an …","The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","Iterator adaptor for the <code>empty()</code> function.","<code>Enumerate</code> is an iterator that returns the current count …","<code>Filter</code> takes a predicate <code>filter_op</code> and filters out …","<code>FilterMap</code> creates an iterator that uses <code>filter_op</code> to both …","<code>FlatMap</code> maps each element to a parallel iterator, then …","<code>FlatMapIter</code> maps each element to a serial iterator, then …","<code>Flatten</code> turns each element to a parallel iterator, then …","<code>FlattenIter</code> turns each element to a serial iterator, then …","<code>Fold</code> is an iterator that applies a function over an …","<code>FoldWith</code> is an iterator that applies a function over an …","<code>FromParallelIterator</code> implements the creation of a …","An iterator that supports “random access” to its data, …","<code>Inspect</code> is an iterator that calls a function with a …","<code>Interleave</code> is an iterator that interleaves elements of …","<code>InterleaveShortest</code> is an iterator that works similarly to …","<code>Intersperse</code> is an iterator that inserts a particular item …","<code>IntoParallelIterator</code> implements the conversion to a …","<code>IntoParallelRefIterator</code> implements the conversion to a …","<code>IntoParallelRefMutIterator</code> implements the conversion to a …","The type of item that the parallel iterator will produce.","The type of item that the parallel iterator will produce. …","The type of item that will be produced; this is typically …","The type of item that this parallel iterator produces. For …","The type of item that the parallel iterator will produce. …","The type of item that the parallel iterator will produce. …","The parallel iterator type that will be created.","The type of the parallel iterator that will be returned.","The type of iterator that will be created.","The draining parallel iterator type that will be created.","The draining parallel iterator type that will be created.","<code>IterBridge</code> is a parallel iterator that wraps a sequential …","A value of type <code>L</code>.","<code>Map</code> is an iterator that transforms the elements of an …","<code>MapInit</code> is an iterator that transforms the elements of an …","<code>MapWith</code> is an iterator that transforms the elements of an …","<code>MaxLen</code> is an iterator that imposes a maximum length on …","<code>MinLen</code> is an iterator that imposes a minimum length on …","<code>MultiZip</code> is an iterator that zips up a tuple of parallel …","Iterator adaptor for the <code>once()</code> function.","<code>PanicFuse</code> is an adaptor that wraps an iterator with a fuse …","Conversion trait to convert an <code>Iterator</code> to a …","<code>ParallelDrainFull</code> creates a parallel iterator that moves …","<code>ParallelDrainRange</code> creates a parallel iterator that moves …","<code>ParallelExtend</code> extends an existing collection with items …","Parallel version of the standard iterator trait.","<code>Positions</code> takes a predicate <code>predicate</code> and filters out …","Iterator adaptor for the <code>repeat()</code> function.","Iterator adaptor for the <code>repeatn()</code> function.","<code>Rev</code> is an iterator that produces elements in reverse …","A value of type <code>R</code>.","<code>Skip</code> is an iterator that skips over the first <code>n</code> elements. …","<code>Split</code> is a parallel iterator using arbitrary data and a …","<code>StepBy</code> is an iterator that skips <code>n</code> elements between each …","<code>Take</code> is an iterator that iterates over the first <code>n</code> …","<code>TryFold</code> is an iterator that applies a function over an …","<code>TryFoldWith</code> is an iterator that applies a function over an …","<code>Update</code> is an iterator that mutates the elements of an …","<code>WhileSome</code> is an iterator that yields the <code>Some</code> elements of …","<code>Zip</code> is an iterator that zips up <code>a</code> and <code>b</code> into a single …","An <code>IndexedParallelIterator</code> that iterates over two parallel …","","Tests that every item in the parallel iterator matches the …","","Searches for <strong>some</strong> item in the parallel iterator that …","Convert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.","","","","","Convert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Takes two iterators and creates a new iterator over both.","Splits an iterator up into fixed-size chunks.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates an iterator which clones all of its elements.  …","","Lexicographically compares the elements of this …","","Creates a fresh collection containing all the elements …","Collects the results of the iterator into the specified …","Creates an iterator which copies all of its elements.  …","","Counts the number of items in this parallel iterator.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Internal method used to define the behavior of this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Internal method used to define the behavior of this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Apply one of two functions depending on contents, unifying …","Convert the contained value into <code>T</code>","Like <code>either</code>, but provide some context to whichever of the …","Creates a parallel iterator that produces nothing.","Yields an index along with each item.","","Determines if the elements of this <code>ParallelIterator</code> are …","Returns the left value","Returns the right value","","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","Factors out <code>None</code> from an <code>Either</code> of <code>Option</code>.","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","Applies <code>filter_op</code> to each item of this iterator, producing …","Applies <code>filter_op</code> to each item of this iterator to get an …","","Searches for <strong>some</strong> item in the parallel iterator that …","Searches for the sequentially <strong>first</strong> item in the parallel …","Searches for the sequentially <strong>last</strong> item in the parallel …","","Applies the given predicate to the items in the parallel …","Applies the given predicate to the items in the parallel …","Applies the given predicate to the items in the parallel …","Applies <code>map_op</code> to each item of this iterator to get nested …","Applies <code>map_op</code> to each item of this iterator to get nested …","An adaptor that flattens parallel-iterable <code>Item</code>s into one …","An adaptor that flattens serial-iterable <code>Item</code>s into one …","Convert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parallel fold is similar to sequential fold except that the","Applies <code>fold_op</code> to the given <code>init</code> value with each item of …","","Executes <code>OP</code> on each item produced by the iterator, in …","Executes <code>OP</code> on a value returned by <code>init</code> with each item …","Executes <code>OP</code> on the given <code>init</code> value with each item …","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates an instance of the collection from the parallel …","Determines if the elements of this <code>ParallelIterator</code> are …","Determines if the elements of this <code>ParallelIterator</code> are …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Applies <code>inspect_op</code> to a reference to each item of this …","Interleaves elements of this iterator and the other given …","Interleaves elements of this iterator and the other given …","Intersperses clones of an element between items of this …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Extract the value of an either over two equivalent types.","Convert the inner value to an iterator.","","Converts <code>self</code> into a parallel iterator.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return true if the value is the <code>Left</code> variant.","Return true if the value is the <code>Right</code> variant.","","Determines if the elements of this <code>ParallelIterator</code> are …","Convert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Return left value or given value","Return left or a default","Returns left value or computes it from a closure","Produces an exact count of how many items this iterator …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Determines if the elements of this <code>ParallelIterator</code> are …","Map <code>f</code> over the contained value and return the result in the","Applies <code>map_op</code> to each item of this iterator, producing a …","Applies <code>map_op</code> to a value returned by <code>init</code> with each item …","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Applies <code>map_op</code> to the given <code>init</code> value with each item of …","Computes the maximum of all the items in the iterator. If …","Computes the maximum of all the items in the iterator with …","Computes the item that yields the maximum value for the …","Computes the minimum of all the items in the iterator. If …","Computes the minimum of all the items in the iterator with …","Computes the item that yields the minimum value for the …","","Determines if the elements of this <code>ParallelIterator</code> are …","","","","Creates a parallel iterator that produces an element …","","","Internal method used to define the behavior of this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Wraps an iterator with a fuse in case of panics, to halt …","Creates a bridge from this type to a <code>ParallelIterator</code>.","Returns a draining parallel iterator over an entire …","Returns a draining parallel iterator over a range of the …","Extends an instance of the collection with the elements …","","Converts <code>self</code> into a parallel iterator.","Creates the parallel iterator from <code>self</code>.","","Lexicographically compares the elements of this …","","Partitions the items of a parallel iterator into a pair of …","Partitions and maps the items of a parallel iterator into …","Traits and functions used to implement parallel iteration. …","","Searches for <strong>some</strong> item in the parallel iterator that …","Searches for the sequentially <strong>first</strong> item in the parallel …","Searches for the sequentially <strong>last</strong> item in the parallel …","Searches for items in the parallel iterator that match the …","Multiplies all the items in the iterator.","Reduces the items in the iterator into one item using <code>op</code>. …","Reduces the items in the iterator into one item using <code>op</code>. …","Creates a parallel iterator that endlessly repeats <code>elt</code> (by …","Creates a parallel iterator that produces <code>n</code> repeats of <code>elt</code> …","Produces a new iterator with the elements of this iterator …","","","Convert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Return right value or given value","Return right or a default","Returns right value or computes it from a closure","","Creates an iterator that skips the first <code>n</code> elements.","The <code>split</code> function takes arbitrary data and a closure that …","Creates an iterator that steps by the given amount","Sums up the items in the iterator.","Creates an iterator that yields the first <code>n</code> elements.","Takes only <code>n</code> repeats of the element, similar to the general","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs a fallible parallel fold.","Performs a fallible parallel fold with a cloneable <code>init</code> …","Executes a fallible <code>OP</code> on each item produced by the …","Executes a fallible <code>OP</code> on a value returned by <code>init</code> with …","Executes a fallible <code>OP</code> on the given <code>init</code> value with each …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reduces the items in the iterator into one item using a …","Reduces the items in the iterator into one item using a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the left value","Returns the right value","Unzips the items of a parallel iterator into a pair of …","Unzips the results of the iterator into the specified …","Mutates each item of this iterator before yielding it.","Creates an iterator over the <code>Some</code> items of this iterator, …","Sets the maximum length of iterators desired to process in …","Sets the minimum length of iterators desired to process in …","Internal method used to define the behavior of this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Iterates over tuples <code>(A, B)</code>, where the items <code>A</code> are from …","Iterates tuples, repeating the element with items from …","The same as <code>Zip</code>, but requires that both iterators have the …","","","A consumer is effectively a generalized “fold” …","The <code>Folder</code> trait encapsulates the standard fold operation. …","The type of folder that this consumer can be converted …","The type of iterator we will become.","The type of item that will be produced by this producer …","The type of item returned by this producer.","The type of value returned by this callback. Analogous to …","A <code>Producer</code> is effectively a “splittable <code>IntoIterator</code>”. …","The <code>ProducerCallback</code> trait is a kind of generic closure, …","The reducer is the final step of a <code>Consumer</code> – after a …","The type of reducer that is produced if this consumer is …","The type of result that this consumer will ultimately …","The type of result that will ultimately be produced by the …","A stateless consumer can be freely copied. These consumers …","A variant on <code>Producer</code> which does not know its exact length …","This helper function is used to “connect” a parallel …","This helper function is used to “connect” a producer …","A variant of <code>bridge_producer_consumer</code> where the producer …","Invokes the callback with the given producer as argument. …","Finish consuming items, produce final result.","Consume next item and return new sequential state.","Consume items from the iterator until full, and return new …","Iterate the producer, feeding each element to <code>folder</code>, and …","Iterate the producer, feeding each element to <code>folder</code>, and …","Hint whether this <code>Consumer</code> would like to stop processing …","Hint whether this <code>Folder</code> would like to stop processing …","Convert the consumer into a folder that can consume items …","Convert <code>self</code> into an iterator; at this point, no more …","The maximum number of items that we will process …","The minimum number of items that we will process …","Reduce two final results into one; this is executed after a","Split midway into a new producer if possible, otherwise …","Split into two producers; one produces items <code>0..index</code>, the …","Divide the consumer into two consumers, one processing …","Splits off a “left” consumer and returns it. The <code>self</code> …","Creates a reducer that can be used to combine the results …","A parallel iterator over the value in <code>Some</code> variant of an …","A parallel iterator over a reference to the <code>Some</code> variant …","A parallel iterator over a mutable reference to the <code>Some</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Conversion trait to convert an <code>Iterator</code> to a …","","","","","","","","Creates a bridge from this type to a <code>ParallelIterator</code>.","Parallel iterator over a range, implemented for all …","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Parallel iterator over an inclusive range, implemented for …","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Parallel iterator over a result","Parallel iterator over an immutable reference to a result","Parallel iterator over a mutable reference to a result","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Parallel iterator over immutable non-overlapping chunks of …","Parallel iterator over immutable non-overlapping chunks of …","Parallel iterator over mutable non-overlapping chunks of a …","Parallel iterator over mutable non-overlapping chunks of a …","Parallel iterator over immutable items in a slice","Parallel iterator over mutable items in a slice","Parallel extensions for slices.","Parallel extensions for mutable slices.","Parallel iterator over immutable non-overlapping chunks of …","Parallel iterator over immutable non-overlapping chunks of …","Parallel iterator over mutable non-overlapping chunks of a …","Parallel iterator over mutable non-overlapping chunks of a …","Parallel iterator over slices separated by a predicate","Parallel iterator over mutable slices separated by a …","Parallel iterator over immutable overlapping windows of a …","Returns a plain slice, which is used to implement the rest …","Returns a plain mutable slice, which is used to implement …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Return the remainder of the original slice that is not …","Return the remainder of the original slice that is not …","","","","","","","","","","","","","","","","","","","","","","","Returns a parallel iterator over at most <code>chunk_size</code> …","Returns a parallel iterator over <code>chunk_size</code> elements of …","Returns a parallel iterator over <code>chunk_size</code> elements of …","Returns a parallel iterator over at most <code>chunk_size</code> …","Returns a parallel iterator over at most <code>chunk_size</code> …","Returns a parallel iterator over <code>chunk_size</code> elements of …","Returns a parallel iterator over <code>chunk_size</code> elements of …","Returns a parallel iterator over at most <code>chunk_size</code> …","Sorts the slice in parallel.","Sorts the slice in parallel with a comparator function.","Sorts the slice in parallel with a key extraction function.","Sorts the slice in parallel with a key extraction function.","Sorts the slice in parallel, but might not preserve the …","Sorts the slice in parallel with a comparator function, …","Sorts the slice in parallel with a key extraction …","Returns a parallel iterator over subslices separated by …","Returns a parallel iterator over mutable subslices …","Returns a parallel iterator over all contiguous windows of …","Return the remainder of the original slice that is not …","Return the remainder of the original slice that is not …","Return the remainder of the original slice that is not …","Return the remainder of the original slice that is not …","Return the remainder of the original slice that is not …","Return the remainder of the original slice that is not …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parallel iterator over the bytes of a string","Parallel iterator over the characters of a string, with …","Parallel iterator over the characters of a string","Parallel iterator over a string encoded as UTF-16","Parallel iterator over lines in a string","Parallel iterator over substrings that match a pattern, …","Parallel iterator over substrings that match a pattern","Parallel extensions for strings.","Parallel iterator over substrings separated by a pattern","Parallel iterator over substrings separated by a …","Parallel iterator over substrings separated by whitespace","Returns a plain string slice, which is used to implement …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns a parallel iterator over the bytes of a string.","Returns a parallel iterator over the characters of a …","Returns a parallel iterator over the characters of a …","Returns a parallel iterator over a string encoded as …","Returns a parallel iterator over the lines of a string, …","Returns a parallel iterator over substrings that match a …","Returns a parallel iterator over substrings that match a …","Returns a parallel iterator over substrings separated by a …","Returns a parallel iterator over substrings terminated by a","Returns a parallel iterator over the sub-slices of a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Draining parallel iterator that moves a range of …","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","Draining parallel iterator that moves a range out of a …","Parallel iterator that moves out of a vector.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,1,2,3,4,5,6,7,5,5,5,5,0,0,4,4,0,4,5,1,2,3,4,5,6,7,1,2,3,4,5,6,7,6,1,2,3,4,4,5,6,7,5,1,2,3,4,5,6,6,7,1,2,3,4,5,6,7,0,4,0,4,1,1,2,3,4,5,6,7,4,1,2,3,4,5,6,7,0,0,4,0,0,7,1,4,5,5,0,5,0,0,0,0,1,0,4,0,4,0,6,0,2,4,0,3,4,5,1,5,5,0,0,5,6,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,0,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,9,10,11,9,10,11,9,10,9,10,9,10,11,9,10,11,9,10,11,9,10,11,9,10,11,11,9,10,11,9,10,11,9,10,11,9,10,11,9,10,11,9,10,11,9,10,11,9,10,9,10,11,9,10,11,9,10,11,9,10,11,0,0,0,12,13,14,12,13,14,13,13,12,13,14,12,13,14,12,13,14,12,13,14,12,13,14,12,13,14,12,13,14,12,13,14,12,13,14,12,13,14,13,12,13,14,12,13,14,12,13,14,0,0,15,16,15,16,16,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,16,15,16,15,16,15,16,0,0,0,0,17,18,19,20,17,18,19,20,18,18,17,18,19,20,17,18,19,20,17,18,19,20,17,18,19,20,17,18,19,20,17,18,19,20,17,18,19,20,17,18,19,20,17,18,19,20,17,18,19,20,18,17,18,19,20,17,18,19,20,17,18,19,20,0,0,0,21,22,23,21,22,23,22,22,21,22,23,21,22,23,21,22,23,21,22,23,21,22,23,21,22,23,21,22,23,21,22,23,21,22,23,21,22,23,22,21,22,23,21,22,23,21,22,23,0,0,0,24,25,26,24,25,26,24,25,24,25,24,25,26,24,25,26,24,25,26,24,25,26,24,25,26,24,25,26,24,25,26,24,25,26,24,25,26,24,25,26,24,25,24,25,26,24,25,26,24,25,26,0,0,0,0,27,28,29,30,27,28,29,30,27,28,27,28,27,28,29,30,27,28,29,30,27,28,29,30,27,28,29,30,27,28,29,30,30,27,28,29,30,27,28,29,30,27,28,29,30,27,28,29,30,27,28,29,30,27,28,29,30,27,28,29,30,27,28,27,28,29,30,27,28,29,30,27,28,29,30,27,28,29,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,32,33,34,35,36,31,32,33,35,36,0,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,0,0,0,37,34,37,34,37,37,37,37,37,37,37,37,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,34,79,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,37,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,34,37,79,37,34,79,34,37,34,37,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,37,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,37,38,39,40,41,42,43,52,53,54,55,56,57,58,59,60,61,61,61,61,61,61,61,61,61,61,61,61,62,63,67,68,69,71,74,76,77,78,34,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,61,61,61,61,61,61,61,61,61,61,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,37,37,37,0,79,37,79,37,37,37,37,37,37,37,37,34,34,37,34,34,34,37,34,34,34,34,34,34,34,37,37,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,37,34,34,37,34,34,34,37,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,79,79,37,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,34,79,79,34,37,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,37,37,37,31,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,37,37,37,79,37,37,37,37,37,79,37,37,38,39,40,41,42,43,52,53,54,55,56,57,58,59,60,61,61,61,61,61,61,61,61,61,61,61,61,62,63,67,68,69,71,74,76,77,78,79,37,34,34,37,37,34,34,34,34,34,34,34,37,79,37,37,37,0,37,38,34,39,40,41,42,43,52,53,54,55,56,57,58,59,60,61,61,61,61,61,61,61,61,61,61,61,61,62,63,67,68,69,71,74,76,77,78,34,81,35,36,82,37,32,33,37,79,37,34,34,0,37,79,79,79,79,34,34,34,0,0,79,37,37,37,37,37,37,37,37,79,0,79,34,79,66,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,37,34,34,34,34,34,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,34,34,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,37,37,34,79,34,34,79,79,79,37,38,39,40,41,42,43,52,53,54,55,56,57,58,59,60,61,61,61,61,61,61,61,61,61,61,61,61,62,63,67,68,69,71,74,76,77,78,79,66,79,83,84,0,0,85,86,86,87,88,0,0,0,85,85,89,0,0,0,0,0,88,89,89,89,87,86,85,89,85,86,86,86,90,87,86,85,91,91,0,0,0,92,93,94,92,93,94,92,93,92,93,92,93,94,92,93,94,92,93,94,92,93,94,92,93,94,92,93,94,92,93,94,92,93,94,92,93,94,92,93,94,92,93,94,92,93,94,92,93,92,93,94,92,93,94,92,93,94,92,93,94,0,0,0,0,0,0,0,0,0,0,0,0,0,81,0,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,0,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,0,0,0,97,98,99,97,98,99,97,98,97,98,97,98,99,97,98,99,97,98,99,97,98,99,97,98,99,97,98,99,97,98,99,97,98,99,97,98,99,97,98,99,97,98,99,97,98,99,97,98,97,98,99,97,98,99,97,98,99,97,98,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,102,103,104,105,106,107,108,109,110,111,112,113,114,102,104,105,108,109,112,113,102,104,105,108,109,112,113,102,103,104,105,106,107,108,109,110,111,112,113,114,102,103,104,105,106,107,108,109,110,111,112,113,114,104,105,106,107,108,109,110,111,112,113,114,102,103,104,105,106,107,108,109,110,111,112,113,114,102,103,104,105,106,107,108,109,110,111,112,113,114,102,103,104,105,106,107,108,109,110,111,112,113,114,102,103,104,105,106,107,108,109,110,111,112,113,114,102,103,104,105,106,107,108,109,110,111,112,113,114,102,103,104,105,106,107,108,109,110,111,112,113,114,102,103,104,105,106,107,108,109,110,111,112,113,114,107,111,104,105,106,107,108,109,110,111,112,113,114,104,105,106,107,108,109,110,111,112,113,114,100,100,101,101,100,100,101,101,101,101,101,101,101,101,101,100,101,100,105,107,109,111,107,111,102,104,105,108,109,112,113,102,103,104,105,106,107,108,109,110,111,112,113,114,102,103,104,105,106,107,108,109,110,111,112,113,114,102,103,104,105,106,107,108,109,110,111,112,113,114,104,105,106,107,108,109,110,111,112,113,114,0,0,0,0,0,0,0,0,0,0,0,115,116,117,118,119,120,121,122,123,124,125,116,117,118,119,120,121,122,123,124,125,116,117,118,119,120,121,122,123,124,125,116,117,118,119,120,121,122,123,124,125,116,117,118,119,120,121,122,123,124,125,116,117,118,119,120,121,122,123,124,125,116,117,118,119,120,121,122,123,124,125,116,117,118,119,120,121,122,123,124,125,116,117,118,119,120,121,122,123,124,125,116,117,118,119,120,121,122,123,124,125,116,117,118,119,120,121,122,123,124,125,116,117,118,119,120,121,122,123,124,125,116,117,118,119,120,121,122,123,124,125,115,115,115,115,115,115,115,115,115,115,116,117,118,119,120,121,122,123,124,125,116,117,118,119,120,121,122,123,124,125,116,117,118,119,120,121,122,123,124,125,116,117,118,119,120,121,122,123,124,125,0,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,0,0,127,128,127,128,127,127,127,128,127,128,127,128,127,128,127,128,128,127,128,127,128,127,128,127,128,127,128,127,128,127,128,127,127,128,127,128,127,128,127,128],"f":[null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["threadpoolbuilder",3]],[[],["result",4,[["threadpool",3],["threadpoolbuilderror",3]]]],[[],["result",4,[["threadpoolbuilderror",3]]]],[[],["result",4,[["threadpoolbuilderror",3]]]],null,[[],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["option",4,[["bool",0]]]],[[],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[],["threadpoolbuilder",3,[["defaultspawn",3]]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["",0]],["str",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[],["threadpoolbuilder",3]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]]],[[]],[[["",0]]],[[["",0]],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[["",0]]],[[]],[[],["usize",0]],[[["",0]],["bool",0]],[[["",0]],["option",4,[["str",0]]]],[[["configuration",3]],["result",4,[["threadpool",3],["box",3,[["error",8],["global",3]]]]]],[[],["threadpoolbuilder",3,[["defaultspawn",3]]]],[[["usize",0]],["threadpoolbuilder",3]],null,[[],["threadpoolbuilder",3]],null,null,null,null,[[]],[[]],[[["",0]]],[[]],[[["",0]]],null,[[["",0]],["option",4,[["error",8]]]],[[]],[[["",0]]],[[["",0]]],[[]],[[["",0]]],[[["",0]]],[[],["threadpoolbuilder",3,[["customspawn",3]]]],[[["",0]],["option",4,[["usize",0]]]],[[["usize",0]],["threadpoolbuilder",3]],[[],["threadpoolbuilder",3]],null,null,[[],["threadpoolbuilder",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["intoiter",3]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[]],[[]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],[[]],[[["",0]],["usize",0]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["intoiter",3]],[[["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[]],[[]],[[]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[]],[[]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[]],[[]],[[]],[[]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[]],[[]],[[]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["intoiter",3]],[[["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[]],[[]],[[]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["intoiter",3]],[[["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["bool",0]],[[],["bool",0]],[[["",0]],["bool",0]],[[],["bool",0]],[[["",0]],["either",4]],[[["",0]],["",0]],[[["",0]]],[[["",0]],["str",0]],[[["",0]]],[[["",0]],["either",4]],[[["",0]],["strchain",3]],[[["usize",0]],["chunks",3]],[[["",0]],["either",4]],[[["",0]]],[[["",0]],["chain",3]],[[["",0]],["chunks",3]],[[["",0]],["cloned",3]],[[["",0]],["copied",3]],[[["",0]],["enumerate",3]],[[["",0]],["filter",3]],[[["",0]],["filtermap",3]],[[["",0]],["flatmap",3]],[[["",0]],["flatmapiter",3]],[[["",0]],["flatten",3]],[[["",0]],["flatteniter",3]],[[["",0]],["fold",3]],[[["",0]],["foldwith",3]],[[["",0]],["inspect",3]],[[["",0]],["interleave",3]],[[["",0]],["interleaveshortest",3]],[[["",0]],["intersperse",3]],[[["",0]],["minlen",3]],[[["",0]],["maxlen",3]],[[["",0]],["map",3]],[[["",0]],["mapwith",3]],[[["",0]],["mapinit",3]],[[["",0]],["multizip",3]],[[["",0]],["once",3]],[[["",0]],["panicfuse",3]],[[["",0]],["iterbridge",3]],[[["",0]],["positions",3]],[[["",0]],["repeat",3]],[[["",0]],["repeatn",3]],[[["",0]],["rev",3]],[[["",0]],["skip",3]],[[["",0]],["split",3]],[[["",0]],["take",3]],[[["",0]],["tryfold",3]],[[["",0]],["tryfoldwith",3]],[[["",0]],["update",3]],[[["",0]],["whilesome",3]],[[["",0]],["zip",3]],[[["",0]],["zipeq",3]],[[["",0]],["stepby",3]],[[["",0],["eithercloned",3]],[[["",0],["either",4]],["ordering",4]],[[],["ordering",4]],[[]],[[]],[[["vec",3]]],[[],["copied",3]],[[],["usize",0]],[[],["usize",0]],[[["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["consumer",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["consumer",8]]],[[]],[[]],[[]],[[]],[[["consumer",8]]],[[["consumer",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["consumer",8]]],[[["consumer",8]]],[[["consumer",8]]],[[]],[[]],[[]],[[["consumer",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[]],[[]],[[]],[[],["empty",3,[["send",8]]]],[[],["enumerate",3]],[[["",0],["either",4]],["bool",0]],[[],["bool",0]],[[["str",0]]],[[["str",0]]],[[["",0]]],[[],["result",4,[["either",4]]]],[[]],[[],["option",4,[["either",4]]]],[[],["result",4,[["either",4]]]],[[]],[[],["filter",3]],[[],["filtermap",3]],[[["",0]],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["",0]],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["flatmap",3]],[[],["flatmapiter",3]],[[],["flatten",3]],[[],["flatteniter",3]],[[],["either",4]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["fold",3]],[[],["foldwith",3]],[[]],[[]],[[]],[[]],[[]],[[["result",4]],["either",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",0]],[[],["bool",0]],[[["",0],["",0]]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["inspect",3]],[[],["interleave",3]],[[],["interleaveshortest",3]],[[],["intersperse",3]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["either",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[],["option",4]],[[],["bool",0]],[[],["option",4]],[[],["either",4]],[[]],[[]],[[]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[],["bool",0]],[[],["either",4]],[[],["map",3]],[[],["mapinit",3]],[[],["either",4]],[[],["either",4]],[[],["mapwith",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["",0],["either",4]],["bool",0]],[[],["bool",0]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0],["usize",0]],["option",4]],[[["send",8]],["once",3,[["send",8]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[],["panicfuse",3]],[[],["iterbridge",3]],[[]],[[["rangebounds",8]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["either",4]],["option",4,[["ordering",4]]]],[[],["option",4,[["ordering",4]]]],[[]],[[]],[[]],null,[[["",0]],["option",4,[["usize",0]]]],[[],["option",4,[["usize",0]]]],[[],["option",4,[["usize",0]]]],[[],["option",4,[["usize",0]]]],[[],["positions",3]],[[]],[[]],[[],["option",4]],[[["",26,[["clone",8],["send",8]]]],["repeat",3,[["",26,[["clone",8],["send",8]]]]]],[[["",26,[["clone",8],["send",8]]],["usize",0]],["repeatn",3,[["",26,[["clone",8],["send",8]]]]]],[[],["rev",3]],[[["",0]],["option",4]],[[]],[[],["option",4]],[[],["either",4]],[[]],[[]],[[]],[[["",0]]],[[["usize",0]],["skip",3]],[[],["split",3]],[[["usize",0]],["stepby",3]],[[]],[[["usize",0]],["take",3]],[[["usize",0]],["repeatn",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["tryfold",3]],[[],["tryfoldwith",3]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[],["option",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[["vec",3],["vec",3]]],[[],["update",3]],[[],["whilesome",3]],[[["usize",0]],["maxlen",3]],[[["usize",0]],["minlen",3]],[[["producercallback",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["zip",3]],[[],["zip",3,[["repeatn",3]]]],[[],["zipeq",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["usize",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[]],[[]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[]],[[]],[[["usize",0]]],[[["usize",0]]],[[["",0]]],[[["",0]]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["intoiter",3]],[[["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["iterbridge",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["iter",3]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[]],[[]],[[]],[[]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],[[]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],[[]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["iter",3]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[]],[[]],[[]],[[]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],[[]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],[[]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["intoiter",3]],[[["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]]],[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0],["usize",0]],["chunks",3]],[[["",0],["usize",0]],["chunksexact",3]],[[["",0],["usize",0]],["chunksexactmut",3]],[[["",0],["usize",0]],["chunksmut",3]],[[["",0],["usize",0]],["rchunks",3]],[[["",0],["usize",0]],["rchunksexact",3]],[[["",0],["usize",0]],["rchunksexactmut",3]],[[["",0],["usize",0]],["rchunksmut",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["split",3]],[[["",0]],["splitmut",3]],[[["",0],["usize",0]],["windows",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["str",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["chars",3]],[[["",0]],["charindices",3]],[[["",0]],["bytes",3]],[[["",0]],["encodeutf16",3]],[[["",0]],["split",3]],[[["",0]],["splitterminator",3]],[[["",0]],["lines",3]],[[["",0]],["splitwhitespace",3]],[[["",0]],["matches",3]],[[["",0]],["matchindices",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["bytes",3]],[[["",0]],["charindices",3]],[[["",0]],["chars",3]],[[["",0]],["encodeutf16",3]],[[["",0]],["lines",3]],[[["",0],["pattern",8]],["matchindices",3,[["pattern",8]]]],[[["",0],["pattern",8]],["matches",3,[["pattern",8]]]],[[["",0],["pattern",8]],["split",3,[["pattern",8]]]],[[["",0],["pattern",8]],["splitterminator",3,[["pattern",8]]]],[[["",0]],["splitwhitespace",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[]],[[["usize",0]]],[[["",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["intoiter",3]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[]],[[]],[[]],[[]],[[["usize",0]]],[[["usize",0]]],[[["",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]]],"p":[[3,"ThreadBuilder"],[3,"Scope"],[3,"ScopeFifo"],[3,"ThreadPool"],[3,"ThreadPoolBuilder"],[3,"ThreadPoolBuildError"],[3,"FnContext"],[3,"IntoIter"],[3,"IntoIter"],[3,"Iter"],[3,"Drain"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Drain"],[3,"IntoIter"],[3,"Iter"],[3,"Drain"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Drain"],[8,"IntoParallelIterator"],[8,"IntoParallelRefIterator"],[8,"IntoParallelRefMutIterator"],[8,"ParallelIterator"],[8,"ParallelDrainFull"],[8,"ParallelDrainRange"],[4,"Either"],[3,"Empty"],[3,"Chain"],[3,"Chunks"],[3,"Cloned"],[3,"Copied"],[3,"Enumerate"],[3,"Filter"],[3,"FilterMap"],[3,"FlatMap"],[3,"FlatMapIter"],[3,"Flatten"],[3,"FlattenIter"],[3,"Fold"],[3,"FoldWith"],[3,"Inspect"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"Intersperse"],[3,"MinLen"],[3,"MaxLen"],[3,"Map"],[3,"MapWith"],[3,"MapInit"],[3,"MultiZip"],[3,"Once"],[3,"PanicFuse"],[3,"IterBridge"],[3,"Positions"],[3,"Repeat"],[3,"RepeatN"],[3,"Rev"],[3,"Skip"],[3,"Split"],[3,"Take"],[3,"TryFold"],[3,"TryFoldWith"],[3,"Update"],[3,"WhileSome"],[3,"Zip"],[3,"ZipEq"],[3,"StepBy"],[8,"IndexedParallelIterator"],[8,"FromParallelIterator"],[8,"ParallelBridge"],[8,"ParallelExtend"],[13,"Left"],[13,"Right"],[8,"Consumer"],[8,"Producer"],[8,"UnindexedProducer"],[8,"ProducerCallback"],[8,"Folder"],[8,"Reducer"],[8,"UnindexedConsumer"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Iter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"ParallelSlice"],[8,"ParallelSliceMut"],[3,"Split"],[3,"SplitMut"],[3,"Chunks"],[3,"ChunksExact"],[3,"ChunksMut"],[3,"ChunksExactMut"],[3,"RChunks"],[3,"RChunksExact"],[3,"RChunksMut"],[3,"RChunksExactMut"],[3,"Iter"],[3,"Windows"],[3,"IterMut"],[8,"ParallelString"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"EncodeUtf16"],[3,"Split"],[3,"SplitTerminator"],[3,"Lines"],[3,"SplitWhitespace"],[3,"Matches"],[3,"MatchIndices"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"]]},\
"rayon_core":{"doc":"Rayon-core houses the core stable APIs of Rayon.","t":[3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,5,11,5,5,11,11,11,11,11,11,11,11,11,11,5,11,5,11,11,5,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Configuration","FnContext","Scope","ScopeFifo","ThreadBuilder","ThreadPool","ThreadPoolBuildError","ThreadPoolBuilder","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","breadth_first","breadth_first","build","build","build_global","build_scoped","current_num_threads","current_num_threads","current_thread_has_pending_tasks","current_thread_has_pending_tasks","current_thread_index","current_thread_index","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","drop","drop","drop","drop","drop","drop","drop","drop","drop","exit_handler","exit_handler","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","in_place_scope","in_place_scope","in_place_scope_fifo","in_place_scope_fifo","index","init","init","init","init","init","init","init","init","initialize","install","into","into","into","into","into","into","into","into","join","join","join_context","max_num_threads","migrated","name","new","new","new","num_threads","num_threads","panic_handler","panic_handler","run","scope","scope","scope_fifo","scope_fifo","source","spawn","spawn","spawn","spawn_fifo","spawn_fifo","spawn_fifo","spawn_handler","stack_size","stack_size","stack_size","start_handler","start_handler","thread_name","thread_name","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["rayon_core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Contains the rayon thread pool configuration. Use …","Provides the calling context to a closure called by …","Represents a fork-join scope which can be used to spawn …","Represents a fork-join scope which can be used to spawn …","Thread builder used for customization via …","Represents a user created thread-pool.","Error when initializing a thread pool.","Used to create a new <code>ThreadPool</code> or to configure the global …","","","","","","","","","","","","","","","","","<strong>(DEPRECATED)</strong> Suggest to worker threads that they execute …","Deprecated in favor of <code>ThreadPoolBuilder::breadth_first</code>.","Creates a new <code>ThreadPool</code> initialized using this …","Deprecated in favor of <code>ThreadPoolBuilder::build</code>.","Initializes the global thread pool. This initialization is …","Creates a scoped <code>ThreadPool</code> initialized using this …","Returns the number of threads in the current registry. If …","Returns the (current) number of threads in the thread pool.","If called from a Rayon worker thread, indicates whether …","Returns true if the current worker thread currently has “…","If called from a Rayon worker thread, returns the index of …","If called from a Rayon worker thread in this thread-pool, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets a callback to be invoked on thread exit.","Deprecated in favor of <code>ThreadPoolBuilder::exit_handler</code>.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a “fork-join” scope <code>s</code> and invokes the closure …","Creates a scope that spawns work into this thread-pool.","Creates a “fork-join” scope <code>s</code> with FIFO order, and …","Creates a scope that spawns work into this thread-pool in …","Gets the index of this thread in the pool, within …","","","","","","","","","Deprecated in favor of <code>ThreadPoolBuilder::build_global</code>.","Executes <code>op</code> within the threadpool. Any attempts to use <code>join</code>…","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Takes two closures and <em>potentially</em> runs them in parallel. …","Execute <code>oper_a</code> and <code>oper_b</code> in the thread-pool and return …","Identical to <code>join</code>, except that the closures have a …","Returns the maximum number of threads that Rayon supports …","Returns <code>true</code> if the closure was called from a different …","Gets the string that was specified by …","Deprecated in favor of <code>ThreadPoolBuilder::build</code>.","Creates and returns a valid rayon thread pool builder, but …","Creates and return a valid rayon thread pool …","Sets the number of threads to be used in the rayon …","Deprecated in favor of <code>ThreadPoolBuilder::num_threads</code>.","Normally, whenever Rayon catches a panic, it tries to …","Deprecated in favor of <code>ThreadPoolBuilder::panic_handler</code>.","Executes the main loop for this thread. This will not …","Creates a “fork-join” scope <code>s</code> and invokes the closure …","Creates a scope that executes within this thread-pool. …","Creates a “fork-join” scope <code>s</code> with FIFO order, and …","Creates a scope that executes within this thread-pool. …","","Fires off a task into the Rayon threadpool in the “static…","Spawns a job into the fork-join scope <code>self</code>. This job will …","Spawns an asynchronous task in this thread-pool. This task …","Fires off a task into the Rayon threadpool in the “static…","Spawns a job into the fork-join scope <code>self</code>. This job will …","Spawns an asynchronous task in this thread-pool. This task …","Sets a custom function for spawning threads.","Gets the value that was specified by …","Sets the stack size of the worker threads","Deprecated in favor of <code>ThreadPoolBuilder::stack_size</code>.","Sets a callback to be invoked on thread start.","Deprecated in favor of <code>ThreadPoolBuilder::start_handler</code>.","Sets a closure which takes a thread index and returns the …","Deprecated in favor of <code>ThreadPoolBuilder::thread_name</code>.","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,5,6,5,6,5,5,0,4,0,4,0,4,5,6,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,7,1,2,3,4,4,5,6,7,8,5,6,1,2,3,4,5,6,7,7,8,1,2,3,4,5,6,7,8,0,4,0,4,1,1,2,3,4,5,6,7,8,0,4,1,2,3,4,5,6,7,8,0,4,0,0,8,1,4,5,6,5,6,5,6,1,0,4,0,4,7,0,2,4,0,3,4,5,1,5,6,5,6,5,6,7,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8],"f":[null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[],["result",4,[["threadpool",3],["threadpoolbuilderror",3]]]],[[],["result",4,[["threadpool",3],["box",3,[["error",8]]]]]],[[],["result",4,[["threadpoolbuilderror",3]]]],[[],["result",4,[["threadpoolbuilderror",3]]]],[[],["usize",0]],[[["",0]],["usize",0]],[[],["option",4,[["bool",0]]]],[[["",0]],["option",4,[["bool",0]]]],[[],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[]],[[]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["",0]],["str",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[]],[[],["configuration",3]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]]],[[]],[[["",0]]],[[["",0]],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[["configuration",3]],["result",4,[["box",3,[["error",8]]]]]],[[["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]]],[[]],[[],["usize",0]],[[["",0]],["bool",0]],[[["",0]],["option",4,[["str",0]]]],[[["configuration",3]],["result",4,[["threadpool",3],["box",3,[["error",8]]]]]],[[]],[[],["configuration",3]],[[["usize",0]]],[[["usize",0]],["configuration",3]],[[]],[[],["configuration",3]],[[]],[[]],[[["",0]]],[[]],[[["",0]]],[[["",0]],["option",4,[["error",8]]]],[[]],[[["",0]]],[[["",0]]],[[]],[[["",0]]],[[["",0]]],[[],["threadpoolbuilder",3,[["customspawn",3]]]],[[["",0]],["option",4,[["usize",0]]]],[[["usize",0]]],[[["usize",0]]],[[]],[[],["configuration",3]],[[]],[[]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[3,"ThreadBuilder"],[3,"Scope"],[3,"ScopeFifo"],[3,"ThreadPool"],[3,"ThreadPoolBuilder"],[3,"Configuration"],[3,"ThreadPoolBuildError"],[3,"FnContext"]]},\
"regex":{"doc":"This crate provides a library for parsing, compiling, and …","tn":["0","CaptureLocations","CaptureMatches","CaptureNames","Captures","CompiledTooBig","Error","Match","Matches","NoExpand","Regex","RegexBuilder","RegexSet","RegexSetBuilder","Replacer","ReplacerRef","SetMatches","SetMatchesIntoIter","SetMatchesIter","Split","SplitN","SubCaptureMatches","Syntax","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","by_ref","by_ref","bytes","capture_locations","capture_names","captures","captures_iter","captures_len","captures_read","captures_read_at","case_insensitive","case_insensitive","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count","count","description","dfa_size_limit","dfa_size_limit","dot_matches_new_line","dot_matches_new_line","empty","end","eq","eq","escape","expand","find","find_at","find_iter","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","get","get","ignore_whitespace","ignore_whitespace","index","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_match","is_match","is_match_at","iter","iter","len","len","len","len","matched","matched_any","matches","multi_line","multi_line","name","ne","ne","nest_limit","nest_limit","new","new","new","new","next","next","next","next","next","next","next","next","next_back","next_back","no_expansion","no_expansion","no_expansion","no_expansion","octal","octal","patterns","range","replace","replace_all","replace_append","replace_append","replace_append","replacen","shortest_match","shortest_match_at","size_hint","size_hint","size_hint","size_hint","size_hint","size_limit","size_limit","split","splitn","start","swap_greed","swap_greed","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unicode","unicode","0","0","0","CaptureLocations","CaptureMatches","CaptureNames","Captures","Match","Matches","NoExpand","Regex","RegexBuilder","RegexSet","RegexSetBuilder","Replacer","ReplacerRef","SetMatches","SetMatchesIntoIter","SetMatchesIter","Split","SplitN","SubCaptureMatches","as_bytes","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","by_ref","by_ref","capture_locations","capture_names","captures","captures_iter","captures_len","captures_read","captures_read_at","case_insensitive","case_insensitive","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count","dfa_size_limit","dfa_size_limit","dot_matches_new_line","dot_matches_new_line","empty","end","eq","expand","find","find_at","find_iter","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","get","get","ignore_whitespace","ignore_whitespace","index","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_match","is_match","is_match_at","iter","iter","len","len","len","len","matched","matched_any","matches","multi_line","multi_line","name","ne","nest_limit","nest_limit","new","new","new","new","next","next","next","next","next","next","next","next","next_back","next_back","no_expansion","no_expansion","no_expansion","no_expansion","octal","octal","patterns","range","replace","replace_all","replace_append","replace_append","replace_append","replacen","shortest_match","shortest_match_at","size_hint","size_hint","size_hint","size_hint","size_limit","size_limit","split","splitn","start","swap_greed","swap_greed","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unicode","unicode"],"q":["regexregex::Error","","regex::bytesd":["","CaptureLocations is a low level representation of the raw …","An iterator that yields all non-overlapping capture groups …","An iterator over the names of all possible captures.","Captures represents a group of captured strings for a …","The compiled program exceeded the set size limit. The …","An error that occurred during parsing or compiling a …","Match represents a single match of a regex in a haystack.","An iterator over all non-overlapping matches for a …","<code>NoExpand</code> indicates literal string replacement.","A compiled regular expression for matching Unicode strings.","A configurable builder for a regular expression.","Match multiple (possibly overlapping) regular expressions …","A configurable builder for a set of regular expressions.","Replacer describes types that can be used to replace …","By-reference adaptor for a <code>Replacer</code>","A set of matches returned by a regex set.","An owned iterator over the set of matches from a regex set.","A borrowed iterator over the set of matches from a regex …","Yields all substrings delimited by a regular expression …","Yields at most <code>N</code> substrings delimited by a regular …","An iterator that yields all capturing matches in the order …","A syntax error.","Returns the matched text.","Returns the original string of this regex.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the builder and compile the regular expression.","Consume the builder and compile the regular expressions …","Return a <code>Replacer</code> that borrows and wraps this <code>Replacer</code>.","Return a <code>Replacer</code> that borrows and wraps this <code>Replacer</code>.","Match regular expressions on arbitrary bytes.","Returns an empty set of capture locations that can be …","Returns an iterator over the capture names.","Returns the capture groups corresponding to the …","Returns an iterator over all the non-overlapping capture …","Returns the number of captures.","This is like <code>captures</code>, but uses <code>CaptureLocations</code> instead of","Returns the same as captures, but starts the search at the …","Set the value for the case insensitive (<code>i</code>) flag.","Set the value for the case insensitive (<code>i</code>) flag.","","","","","","","","","","","","","","","","","","","","","","","","Set the approximate size of the cache used by the DFA.","Set the approximate size of the cache used by the DFA.","Set the value for the any character (<code>s</code>) flag, where in <code>.</code> …","Set the value for the any character (<code>s</code>) flag, where in <code>.</code> …","Create a new empty regex set.","Returns the ending byte offset of the match in the …","","","Escapes all regular expression meta characters in <code>text</code>.","Expands all instances of <code>$name</code> in <code>replacement</code> to the …","Returns the start and end byte range of the leftmost-first …","Returns the same as find, but starts the search at the …","Returns an iterator for each successive non-overlapping …","","","","","","","","","","","Shows the original regular expression.","Shows the original regular expression.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Attempts to parse a string into a regular expression","Returns the match associated with the capture group at …","Returns the start and end positions of the Nth capture …","Set the value for the ignore whitespace (<code>x</code>) flag.","Set the value for the ignore whitespace (<code>x</code>) flag.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns <code>true</code> if this set contains no regular expressions.","Returns true if and only if one of the regexes in this set …","Returns true if and only if there is a match for the regex …","Returns the same as is_match, but starts the search at the …","An iterator that yields all capturing matches in the order …","Returns an iterator over indexes in the regex that matched.","Returns the total number of capture groups (even if they …","Returns the total number of regular expressions in this …","The total number of regexes in the set that created these …","Returns the total number of capture groups (even if they …","Whether the regex at the given index matched.","Whether this set contains any matches.","Returns the set of regular expressions that match in the …","Set the value for the multi-line matching (<code>m</code>) flag.","Set the value for the multi-line matching (<code>m</code>) flag.","Returns the match for the capture group named <code>name</code>. If <code>name</code>…","","","Set the nesting limit for this parser.","Set the nesting limit for this parser.","Create a new regular expression builder with the given …","Create a new regular expression builder with the given …","Create a new regex set with the given regular expressions.","Compiles a regular expression. Once compiled, it can be …","","","","","","","","","","","Return a fixed unchanging replacement string.","Return a fixed unchanging replacement string.","","","Whether to support octal syntax or not.","Whether to support octal syntax or not.","Returns the patterns that this set will match on.","Returns the range over the starting and ending byte …","Replaces the leftmost-first match with the replacement …","Replaces all non-overlapping matches in <code>text</code> with the …","Appends text to <code>dst</code> to replace the current match.","","","Replaces at most <code>limit</code> non-overlapping matches in <code>text</code> …","Returns the end location of a match in the text given.","Returns the same as shortest_match, but starts the search …","","","","","","Set the approximate size limit of the compiled regular …","Set the approximate size limit of the compiled regular …","Returns an iterator of substrings of <code>text</code> delimited by a …","Returns an iterator of at most <code>limit</code> substrings of <code>text</code> …","Returns the starting byte offset of the match in the …","Set the value for the greedy swap (<code>U</code>) flag.","Set the value for the greedy swap (<code>U</code>) flag.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set the value for the Unicode (<code>u</code>) flag.","Set the value for the Unicode (<code>u</code>) flag.","","","","CaptureLocations is a low level representation of the raw …","An iterator that yields all non-overlapping capture groups …","An iterator over the names of all possible captures.","Captures represents a group of captured byte strings for a …","Match represents a single match of a regex in a haystack.","An iterator over all non-overlapping matches for a …","<code>NoExpand</code> indicates literal byte string replacement.","A compiled regular expression for matching arbitrary bytes.","A configurable builder for a regular expression.","Match multiple (possibly overlapping) regular expressions …","A configurable builder for a set of regular expressions.","Replacer describes types that can be used to replace …","By-reference adaptor for a <code>Replacer</code>","A set of matches returned by a regex set.","An owned iterator over the set of matches from a regex set.","A borrowed iterator over the set of matches from a regex …","Yields all substrings delimited by a regular expression …","Yields at most <code>N</code> substrings delimited by a regular …","An iterator that yields all capturing matches in the order …","Returns the matched text.","Returns the original string of this regex.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the builder and compile the regular expression.","Consume the builder and compile the regular expressions …","Return a <code>Replacer</code> that borrows and wraps this <code>Replacer</code>.","Return a <code>Replacer</code> that borrows and wraps this <code>Replacer</code>.","Returns an empty set of capture locations that can be …","Returns an iterator over the capture names.","Returns the capture groups corresponding to the …","Returns an iterator over all the non-overlapping capture …","Returns the number of captures.","This is like <code>captures</code>, but uses <code>CaptureLocations</code> instead of","Returns the same as <code>captures_read</code>, but starts the search …","Set the value for the case insensitive (<code>i</code>) flag.","Set the value for the case insensitive (<code>i</code>) flag.","","","","","","","","","","","","","","","","","","","","Set the approximate size of the cache used by the DFA.","Set the approximate size of the cache used by the DFA.","Set the value for the any character (<code>s</code>) flag, where in <code>.</code> …","Set the value for the any character (<code>s</code>) flag, where in <code>.</code> …","Create a new empty regex set.","Returns the ending byte offset of the match in the …","","Expands all instances of <code>$name</code> in <code>replacement</code> to the …","Returns the start and end byte range of the leftmost-first …","Returns the same as find, but starts the search at the …","Returns an iterator for each successive non-overlapping …","","","","","Shows the original regular expression.","Shows the original regular expression.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Attempts to parse a string into a regular expression","Returns the match associated with the capture group at …","Returns the start and end positions of the Nth capture …","Set the value for the ignore whitespace (<code>x</code>) flag.","Set the value for the ignore whitespace (<code>x</code>) flag.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns <code>true</code> if this set contains no regular expressions.","Returns true if and only if there is a match for the regex …","Returns true if and only if one of the regexes in this set …","Returns the same as is_match, but starts the search at the …","An iterator that yields all capturing matches in the order …","Returns an iterator over indexes in the regex that matched.","Returns the total number of capture groups (even if they …","Returns the total number of capture groups (even if they …","Returns the total number of regular expressions in this …","The total number of regexes in the set that created these …","Whether the regex at the given index matched.","Whether this set contains any matches.","Returns the set of regular expressions that match in the …","Set the value for the multi-line matching (<code>m</code>) flag.","Set the value for the multi-line matching (<code>m</code>) flag.","Returns the match for the capture group named <code>name</code>. If <code>name</code>…","","Set the nesting limit for this parser.","Set the nesting limit for this parser.","Create a new regular expression builder with the given …","Create a new regular expression builder with the given …","Compiles a regular expression. Once compiled, it can be …","Create a new regex set with the given regular expressions.","","","","","","","","","","","Return a fixed unchanging replacement byte string.","Return a fixed unchanging replacement byte string.","","","Whether to support octal syntax or not.","Whether to support octal syntax or not.","Returns the patterns that this set will match on.","Returns the range over the starting and ending byte …","Replaces the leftmost-first match with the replacement …","Replaces all non-overlapping matches in <code>text</code> with the …","Appends text to <code>dst</code> to replace the current match.","","","Replaces at most <code>limit</code> non-overlapping matches in <code>text</code> …","Returns the end location of a match in the text given.","Returns the same as shortest_match, but starts the search …","","","","","Set the approximate size limit of the compiled regular …","Set the approximate size limit of the compiled regular …","Returns an iterator of substrings of <code>text</code> delimited by a …","Returns an iterator of at most <code>limit</code> substrings of <code>text</code> …","Returns the starting byte offset of the match in the …","Set the value for the greedy swap (<code>U</code>) flag.","Set the value for the greedy swap (<code>U</code>) flag.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set the value for the Unicode (<code>u</code>) flag.","Set the value for the Unicode (<code>u</code>) flag."],"i":[1,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,4,5,2,6,7,8,9,10,11,3,4,12,13,14,15,16,17,18,19,1,5,2,6,7,8,9,10,11,3,4,12,13,14,15,16,17,18,19,1,6,7,20,20,0,4,4,4,4,4,4,4,6,7,2,8,9,11,3,4,12,15,16,1,2,8,9,11,3,4,12,15,16,1,12,16,2,6,7,6,7,8,3,2,3,0,5,4,4,4,5,2,2,6,7,8,9,10,11,3,4,4,12,13,14,15,16,17,18,19,1,5,2,6,7,8,9,10,11,3,4,12,13,14,15,16,17,18,19,1,4,5,15,6,7,5,5,5,2,6,7,8,9,10,11,3,4,12,13,14,15,16,17,18,19,1,9,10,11,12,13,14,16,17,18,8,8,4,4,5,9,5,8,9,15,9,9,8,6,7,5,2,3,6,7,6,7,8,4,10,11,12,13,14,16,17,18,10,11,20,20,19,1,6,7,8,3,4,4,20,19,1,4,4,4,10,11,12,14,16,6,7,4,4,3,6,7,2,8,9,11,3,4,12,15,16,1,2,4,5,2,6,7,8,9,10,11,3,4,12,13,14,15,16,17,18,19,1,5,2,6,7,8,9,10,11,3,4,12,13,14,15,16,17,18,19,1,5,2,6,7,8,9,10,11,3,4,12,13,14,15,16,17,18,19,1,6,7,21,22,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,25,26,27,28,24,25,29,30,31,32,33,34,35,36,23,37,38,39,40,26,27,28,24,25,29,30,31,32,33,34,35,36,23,37,38,39,40,27,28,41,41,25,25,25,25,25,25,25,27,28,24,25,33,34,35,23,37,38,40,24,25,33,34,35,23,37,38,40,33,27,28,27,28,37,24,24,26,25,25,25,26,27,28,24,25,25,29,30,31,32,33,34,35,36,23,37,38,39,40,26,27,28,24,25,29,30,31,32,33,34,35,36,23,37,38,39,40,25,26,34,27,28,26,26,26,27,28,24,25,29,30,31,32,33,34,35,36,23,37,38,39,40,29,30,31,32,33,35,38,39,40,37,25,37,25,26,38,26,34,37,38,38,38,37,27,28,26,24,27,28,27,28,25,37,29,30,31,32,33,35,39,40,39,40,41,41,36,23,27,28,37,24,25,25,41,36,23,25,25,25,32,33,39,40,27,28,25,25,24,27,28,24,25,33,34,35,23,37,38,40,25,26,27,28,24,25,29,30,31,32,33,34,35,36,23,37,38,39,40,26,27,28,24,25,29,30,31,32,33,34,35,36,23,37,38,39,40,26,27,28,24,25,29,30,31,32,33,34,35,36,23,37,38,39,40,27,28],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["str",0]],[[["",0]],["strresult",4,[["regex",3],["error",4]]]],[[["",0]],["result",4,[["regexset",3],["error",4]]]],[[["",0]],["replacerref",3]],[[["",0]],["replacerref",3]],null,[[["",0]],["capturelocations",3]],[[["",0]],["capturenames",3]],[[["",0],["str",0]],["option",4,[["captures",3]]]],[[["",0],["str",0]],["capturematches",3]],[[["",0]],["usize",0]],[[["",0],["capturelocations",3],["str",0]],["option",4,[["match",3]]]],[[["",0],["capturelocations",3],["str",0],["usize",0]],["option",4,[["match",3]]]],[[["",0],["bool",0]],["regexbuilder",3]],[[["",0],["bool",0]],["regexsetbuilder",3]],[[["",0]],["error",4]],[[["",0]],["regexset",3]],[[["",0]],["setmatches",3]],[[["",0]],["setmatchesiter",3]],[[["",0]],["match",3]],[[["",0]],["regex",3]],[[["",0]],["capturenames",3]],[[["",0]],["capturelocations",3]],[[["",0]],["subcapturematches",3]],[[["",0]],["noexpand",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["usize",0]],[[],["usize",0]],[[["",0]],["str",0]],[[["",0],["usize",0]],["regexbuilder",3]],[[["",0],["usize",0]],["regexsetbuilder",3]],[[["",0],["bool",0]],["regexbuilder",3]],[[["",0],["bool",0]],["regexsetbuilder",3]],[[],["regexset",3]],[[["",0]],["usize",0]],[[["",0],["error",4]],["bool",0]],[[["",0],["match",3]],["bool",0]],[[["str",0]],["string",3]],[[["",0],["str",0],["string",3]]],[[["",0],["str",0]],["option",4,[["match",3]]]],[[["",0],["str",0],["usize",0]],["option",4,[["match",3]]]],[[["",0],["str",0]],["matches",3]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",0]],["result",4,[["regex",3],["error",4]]]],[[["",0],["usize",0]],["option",4,[["match",3]]]],[[["",0],["usize",0]],["option",4]],[[["",0],["bool",0]],["regexbuilder",3]],[[["",0],["bool",0]],["regexsetbuilder",3]],[[["",0],["usize",0]],["str",0]],[[["",0],["str",0]],["str",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0],["str",0]],["bool",0]],[[["",0],["str",0]],["bool",0]],[[["",0],["str",0],["usize",0]],["bool",0]],[[["",0]],["subcapturematches",3]],[[["",0]],["setmatchesiter",3]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0],["usize",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0],["str",0]],["setmatches",3]],[[["",0],["bool",0]],["regexbuilder",3]],[[["",0],["bool",0]],["regexsetbuilder",3]],[[["",0],["str",0]],["option",4,[["match",3]]]],[[["",0],["error",4]],["bool",0]],[[["",0],["match",3]],["bool",0]],[[["",0],["u32",0]],["regexbuilder",3]],[[["",0],["u32",0]],["regexsetbuilder",3]],[[["str",0]],["regexbuilder",3]],[[],["regexsetbuilder",3]],[[],["result",4,[["regexset",3],["error",4]]]],[[["str",0]],["result",4,[["regex",3],["error",4]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["option",4,[["str",0]]]]]],[[["",0]],["option",4,[["str",0]]]],[[["",0]],["option",4,[["str",0]]]],[[["",0]],["option",4,[["option",4,[["match",3]]]]]],[[["",0]],["option",4,[["captures",3]]]],[[["",0]],["option",4,[["match",3]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["cow",4,[["str",0]]]]]],[[["",0]],["option",4,[["cow",4,[["str",0]]]]]],[[["",0]],["option",4,[["cow",4,[["str",0]]]]]],[[["",0]],["option",4,[["cow",4,[["str",0]]]]]],[[["",0],["bool",0]],["regexbuilder",3]],[[["",0],["bool",0]],["regexsetbuilder",3]],[[["",0]]],[[["",0]],["range",3,[["usize",0]]]],[[["",0],["str",0],["replacer",8]],["cow",4,[["str",0]]]],[[["",0],["str",0],["replacer",8]],["cow",4,[["str",0]]]],[[["",0],["captures",3],["string",3]]],[[["",0],["captures",3],["string",3]]],[[["",0],["captures",3],["string",3]]],[[["",0],["str",0],["usize",0],["replacer",8]],["cow",4,[["str",0]]]],[[["",0],["str",0]],["option",4,[["usize",0]]]],[[["",0],["str",0],["usize",0]],["option",4,[["usize",0]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["usize",0]],["regexbuilder",3]],[[["",0],["usize",0]],["regexsetbuilder",3]],[[["",0],["str",0]],["split",3]],[[["",0],["str",0],["usize",0]],["splitn",3]],[[["",0]],["usize",0]],[[["",0],["bool",0]],["regexbuilder",3]],[[["",0],["bool",0]],["regexsetbuilder",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["bool",0]],["regexbuilder",3]],[[["",0],["bool",0]],["regexsetbuilder",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]]],[[["",0]],["str",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["result",4,[["regex",3],["error",4]]]],[[["",0]],["result",4,[["regexset",3],["error",4]]]],[[["",0]],["replacerref",3]],[[["",0]],["replacerref",3]],[[["",0]],["capturelocations",3]],[[["",0]],["capturenames",3]],[[["",0]],["option",4,[["captures",3]]]],[[["",0]],["capturematches",3]],[[["",0]],["usize",0]],[[["",0],["capturelocations",3]],["option",4,[["match",3]]]],[[["",0],["capturelocations",3],["usize",0]],["option",4,[["match",3]]]],[[["",0],["bool",0]],["regexbuilder",3]],[[["",0],["bool",0]],["regexsetbuilder",3]],[[["",0]],["match",3]],[[["",0]],["regex",3]],[[["",0]],["capturenames",3]],[[["",0]],["capturelocations",3]],[[["",0]],["subcapturematches",3]],[[["",0]],["noexpand",3]],[[["",0]],["regexset",3]],[[["",0]],["setmatches",3]],[[["",0]],["setmatchesiter",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["usize",0]],[[["",0],["usize",0]],["regexbuilder",3]],[[["",0],["usize",0]],["regexsetbuilder",3]],[[["",0],["bool",0]],["regexbuilder",3]],[[["",0],["bool",0]],["regexsetbuilder",3]],[[],["regexset",3]],[[["",0]],["usize",0]],[[["",0],["match",3]],["bool",0]],[[["",0],["vec",3]]],[[["",0]],["option",4,[["match",3]]]],[[["",0],["usize",0]],["option",4,[["match",3]]]],[[["",0]],["matches",3]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",0]],["result",4,[["regex",3],["error",4]]]],[[["",0],["usize",0]],["option",4,[["match",3]]]],[[["",0],["usize",0]],["option",4]],[[["",0],["bool",0]],["regexbuilder",3]],[[["",0],["bool",0]],["regexsetbuilder",3]],[[["",0],["str",0]]],[[["",0],["usize",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0],["usize",0]],["bool",0]],[[["",0]],["subcapturematches",3]],[[["",0]],["setmatchesiter",3]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0],["usize",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["setmatches",3]],[[["",0],["bool",0]],["regexbuilder",3]],[[["",0],["bool",0]],["regexsetbuilder",3]],[[["",0],["str",0]],["option",4,[["match",3]]]],[[["",0],["match",3]],["bool",0]],[[["",0],["u32",0]],["regexbuilder",3]],[[["",0],["u32",0]],["regexsetbuilder",3]],[[["str",0]],["regexbuilder",3]],[[],["regexsetbuilder",3]],[[["str",0]],["result",4,[["regex",3],["error",4]]]],[[],["result",4,[["regexset",3],["error",4]]]],[[["",0]],["option",4,[["match",3]]]],[[["",0]],["option",4,[["captures",3]]]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4,[["option",4,[["str",0]]]]]],[[["",0]],["option",4,[["option",4,[["match",3]]]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["cow",4]]]],[[["",0]],["option",4,[["cow",4]]]],[[["",0]],["option",4,[["cow",4]]]],[[["",0]],["option",4,[["cow",4]]]],[[["",0],["bool",0]],["regexbuilder",3]],[[["",0],["bool",0]],["regexsetbuilder",3]],[[["",0]]],[[["",0]],["range",3,[["usize",0]]]],[[["",0],["replacer",8]],["cow",4]],[[["",0],["replacer",8]],["cow",4]],[[["",0],["captures",3],["vec",3]]],[[["",0],["captures",3],["vec",3]]],[[["",0],["captures",3],["vec",3]]],[[["",0],["usize",0],["replacer",8]],["cow",4]],[[["",0]],["option",4,[["usize",0]]]],[[["",0],["usize",0]],["option",4,[["usize",0]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["usize",0]],["regexbuilder",3]],[[["",0],["usize",0]],["regexsetbuilder",3]],[[["",0]],["split",3]],[[["",0],["usize",0]],["splitn",3]],[[["",0]],["usize",0]],[[["",0],["bool",0]],["regexbuilder",3]],[[["",0],["bool",0]],["regexsetbuilder",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["bool",0]],["regexbuilder",3]],[[["",0],["bool",0]],["regexsetbuilder",3]]],"p":[[3,"NoExpand"],[4,"Error"],[3,"Match"],[3,"Regex"],[3,"Captures"],[3,"RegexBuilder"],[3,"RegexSetBuilder"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"CaptureNames"],[3,"Split"],[3,"SplitN"],[3,"CaptureLocations"],[3,"SubCaptureMatches"],[3,"CaptureMatches"],[3,"Matches"],[3,"ReplacerRef"],[8,"Replacer"],[13,"Syntax"],[13,"CompiledTooBig"],[3,"NoExpand"],[3,"Match"],[3,"Regex"],[3,"Captures"],[3,"RegexBuilder"],[3,"RegexSetBuilder"],[3,"Matches"],[3,"CaptureMatches"],[3,"Split"],[3,"SplitN"],[3,"CaptureNames"],[3,"CaptureLocations"],[3,"SubCaptureMatches"],[3,"ReplacerRef"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[8,"Replacer"]]},\
"regex_automata":{"doc":"A low level regular expression library that uses …","t":[13,13,8,4,16,13,13,3,4,13,13,8,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,10,11,10,10,11,11,11,11,11,11,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,0,10,10,11,11,11,10,12,12,12,12,12,12,3,13,4,3,13,3,13,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,3,13,4,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["ByteClass","ByteClass","DFA","DenseDFA","ID","Premultiplied","PremultipliedByteClass","Regex","SparseDFA","Standard","Standard","StateID","borrow","borrow_mut","clone","dense","find","find","find","find_at","find_at","find_at","find_iter","fmt","forward","from","from_dfas","from_usize","into","is_anchored","is_dead_state","is_match","is_match","is_match","is_match_at","is_match_at","is_match_at","is_match_or_dead_state","is_match_state","max_id","next_state","next_state_unchecked","read_bytes","reverse","rfind","rfind","rfind_at","rfind_at","shortest_match","shortest_match","shortest_match","shortest_match_at","shortest_match_at","shortest_match_at","sparse","start_state","to_usize","try_from","try_into","type_id","write_bytes","0","0","0","0","0","0","ByteClass","ByteClass","DenseDFA","Premultiplied","Premultiplied","PremultipliedByteClass","PremultipliedByteClass","Standard","Standard","as_ref","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","find_at","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_bytes","into","into","into","into","into","is_anchored","is_anchored","is_anchored","is_anchored","is_anchored","is_dead_state","is_dead_state","is_dead_state","is_dead_state","is_dead_state","is_match_at","is_match_or_dead_state","is_match_or_dead_state","is_match_or_dead_state","is_match_or_dead_state","is_match_or_dead_state","is_match_state","is_match_state","is_match_state","is_match_state","is_match_state","memory_usage","next_state","next_state","next_state","next_state","next_state","next_state_unchecked","next_state_unchecked","next_state_unchecked","next_state_unchecked","next_state_unchecked","rfind_at","shortest_match_at","start_state","start_state","start_state","start_state","start_state","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","0","0","0","0","ByteClass","ByteClass","SparseDFA","Standard","Standard","as_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","find_at","fmt","fmt","fmt","from","from","from","from_bytes","into","into","into","is_anchored","is_anchored","is_anchored","is_dead_state","is_dead_state","is_dead_state","is_match_at","is_match_or_dead_state","is_match_or_dead_state","is_match_or_dead_state","is_match_state","is_match_state","is_match_state","memory_usage","next_state","next_state","next_state","next_state_unchecked","next_state_unchecked","next_state_unchecked","rfind_at","shortest_match_at","start_state","start_state","start_state","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","0"],"q":["regex_automata","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","regex_automata::DenseDFA","","","","regex_automata::SparseDFA","","regex_automata::dense","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","regex_automata::dense::DenseDFA","","","","regex_automata::sparse","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","regex_automata::sparse::SparseDFA",""],"d":["A DFA that shrinks its alphabet to a set of equivalence …","A DFA that shrinks its alphabet to a set of equivalence …","A trait describing the interface of a deterministic finite …","A dense table-based deterministic finite automaton (DFA).","The representation used for state identifiers in this DFA.","A DFA that premultiplies all of its state identifiers in …","The default configuration of a DFA, which uses byte …","A regular expression that uses deterministic finite …","A sparse table-based deterministic finite automaton (DFA).","A standard DFA that does not use premultiplication or byte …","A standard DFA that does not use byte classes.","A trait describing the representation of a DFA’s state …","","","","Types and routines specific to dense DFAs.","Returns the end offset of the longest match. If no match …","Returns the end offset of the longest match. If no match …","Returns the start and end offset of the leftmost first …","Returns the same as <code>find</code>, but starts the search at the …","Returns the same as <code>find</code>, but starts the search at the …","Returns the same as <code>find</code>, but starts the search at the …","Returns an iterator over all non-overlapping leftmost …","","Return the underlying DFA responsible for forward matching.","Returns the argument unchanged.","Build a new regex from its constituent forward and reverse …","Convert from a <code>usize</code> to this implementation’s …","Calls <code>U::from(self)</code>.","Returns true if and only if this DFA is anchored.","Returns true if and only if the given identifier …","Returns true if and only if the given bytes match this DFA.","Returns true if and only if the given bytes match this DFA.","Returns true if and only if the given bytes match.","Returns the same as <code>is_match</code>, but starts the search at the …","Returns the same as <code>is_match</code>, but starts the search at the …","Returns the same as <code>is_match</code>, but starts the search at the …","Returns true if and only if the given identifier …","Returns true if and only if the given identifier …","Return the maximum state identifier supported by this …","Given the current state that this DFA is in and the next …","Like <code>next_state</code>, but its implementation may look up the …","Read a single state identifier from the given slice of …","Return the underlying DFA responsible for reverse matching.","Returns the start offset of the longest match in reverse, …","Returns the start offset of the longest match in reverse, …","Returns the same as <code>rfind</code>, but starts the search at the …","Returns the same as <code>rfind</code>, but starts the search at the …","Returns the first position at which a match is found.","Returns the first position at which a match is found.","Returns the first position at which a match is found.","Returns the same as <code>shortest_match</code>, but starts the search …","Returns the same as <code>shortest_match</code>, but starts the search …","Returns the same as <code>shortest_match</code>, but starts the search …","Types and routines specific to sparse DFAs.","Return the identifier of this DFA’s start state.","Convert this implementation’s representation to a <code>usize</code>.","","","","Write this state identifier to the given slice of bytes in …","","","","","","","A dense DFA that shrinks its alphabet.","A DFA that shrinks its alphabet to a set of equivalence …","A dense table-based deterministic finite automaton (DFA).","A dense DFA that premultiplies all of its state …","A DFA that premultiplies all of its state identifiers in …","The default configuration of a dense DFA, which uses byte …","The default configuration of a DFA, which uses byte …","A standard dense DFA that does not use premultiplication …","A standard DFA that does not use premultiplication or byte …","Cheaply return a borrowed version of this dense DFA. …","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserialize a DFA with a specific state identifier …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the memory usage, in bytes, of this DFA.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A sparse DFA that shrinks its alphabet.","A DFA that shrinks its alphabet to a set of equivalence …","A sparse table-based deterministic finite automaton (DFA).","A standard sparse DFA that does not use premultiplication …","A standard DFA that does not use byte classes.","Cheaply return a borrowed version of this sparse DFA. …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserialize a sparse DFA with a specific state identifier …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the memory usage, in bytes, of this DFA.","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,2,0,0,3,1,1,0,0,1,2,0,4,4,4,0,3,3,4,3,3,4,4,4,4,4,4,5,4,3,3,3,3,4,3,3,4,3,3,5,3,3,5,4,3,3,3,3,3,3,4,3,3,4,0,3,5,4,4,4,5,6,7,8,9,10,11,0,1,0,0,1,0,1,0,1,1,1,12,13,14,15,1,12,13,14,15,1,12,13,14,15,1,1,12,13,14,15,1,12,13,14,15,1,1,12,13,14,15,1,12,13,14,15,1,12,13,14,15,1,1,12,13,14,15,1,12,13,14,15,1,1,12,13,14,15,1,12,13,14,15,1,1,1,12,13,14,15,1,12,13,14,15,1,12,13,14,15,1,12,13,14,15,6,7,8,9,0,2,0,0,2,2,2,16,17,2,16,17,2,16,17,2,2,16,17,2,16,17,2,2,16,17,2,16,17,2,16,17,2,2,16,17,2,16,17,2,2,16,17,2,16,17,2,2,2,16,17,2,16,17,2,16,17,2,16,17,10,11],"f":[null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["regex",3]],null,[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4]],[[["",0],["usize",0]],["option",4,[["usize",0]]]],[[["",0],["usize",0]],["option",4,[["usize",0]]]],[[["",0],["usize",0]],["option",4]],[[["",0]],["matches",3]],[[["",0],["formatter",3]],["result",6]],[[["",0]],["",0]],[[]],[[],["regex",3]],[[["usize",0]]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0],["usize",0]],["bool",0]],[[["",0],["usize",0]],["bool",0]],[[["",0],["usize",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[],["usize",0]],[[["",0],["u8",0]]],[[["",0],["u8",0]]],[[]],[[["",0]],["",0]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0],["usize",0]],["option",4,[["usize",0]]]],[[["",0],["usize",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0],["usize",0]],["option",4,[["usize",0]]]],[[["",0],["usize",0]],["option",4,[["usize",0]]]],[[["",0],["usize",0]],["option",4,[["usize",0]]]],null,[[["",0]]],[[],["usize",0]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["densedfa",4]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["densedfa",4]],[[["",0]],["standard",3]],[[["",0]],["byteclass",3]],[[["",0]],["premultiplied",3]],[[["",0]],["premultipliedbyteclass",3]],[[["",0],["usize",0]],["option",4,[["usize",0]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[],["densedfa",4]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0],["usize",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["usize",0]],[[["",0],["u8",0]]],[[["",0],["u8",0]]],[[["",0],["u8",0]]],[[["",0],["u8",0]]],[[["",0],["u8",0]]],[[["",0],["u8",0]]],[[["",0],["u8",0]]],[[["",0],["u8",0]]],[[["",0],["u8",0]]],[[["",0],["u8",0]]],[[["",0],["usize",0]],["option",4,[["usize",0]]]],[[["",0],["usize",0]],["option",4,[["usize",0]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,[[["",0]],["sparsedfa",4]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["sparsedfa",4]],[[["",0]],["standard",3]],[[["",0]],["byteclass",3]],[[["",0],["usize",0]],["option",4,[["usize",0]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["sparsedfa",4]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0],["usize",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["usize",0]],[[["",0],["u8",0]]],[[["",0],["u8",0]]],[[["",0],["u8",0]]],[[["",0],["u8",0]]],[[["",0],["u8",0]]],[[["",0],["u8",0]]],[[["",0],["usize",0]],["option",4,[["usize",0]]]],[[["",0],["usize",0]],["option",4,[["usize",0]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null],"p":[[4,"DenseDFA"],[4,"SparseDFA"],[8,"DFA"],[3,"Regex"],[8,"StateID"],[13,"Standard"],[13,"ByteClass"],[13,"Premultiplied"],[13,"PremultipliedByteClass"],[13,"Standard"],[13,"ByteClass"],[3,"Standard"],[3,"ByteClass"],[3,"Premultiplied"],[3,"PremultipliedByteClass"],[3,"Standard"],[3,"ByteClass"]]},\
"regex_syntax":{"doc":"This crate provides a robust regular expression parser.","t":[4,13,3,3,6,13,3,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,0,12,12,13,13,3,13,13,13,3,13,4,4,13,13,13,13,13,13,13,13,13,3,13,13,13,4,13,3,4,3,13,3,4,13,13,4,3,4,4,3,3,13,3,4,4,13,13,3,3,13,13,13,13,13,13,13,13,13,13,13,13,13,16,3,4,13,13,13,13,13,13,4,13,13,13,13,13,13,3,13,3,4,13,13,3,13,4,13,13,13,13,13,13,13,13,4,13,13,13,13,3,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,16,13,13,3,13,13,13,13,13,3,13,13,13,13,4,13,3,4,3,13,13,13,3,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,8,3,13,13,13,13,13,13,13,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,12,12,0,11,11,11,0,11,12,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,13,4,13,13,13,13,13,13,13,13,13,3,4,13,3,3,3,3,3,3,13,13,13,13,13,16,3,4,13,3,13,4,3,4,13,4,13,13,13,16,13,3,13,4,4,13,13,13,13,13,13,13,13,13,13,13,8,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,3,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12],"n":["Error","Parse","Parser","ParserBuilder","Result","Translate","UnicodeWordError","allow_invalid_utf8","ast","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","case_insensitive","clone","clone","clone","clone_into","clone_into","clone_into","default","description","dot_matches_new_line","eq","escape","escape_into","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hir","ignore_whitespace","into","into","into","into","is_meta_character","is_word_byte","is_word_character","multi_line","ne","nest_limit","new","new","octal","parse","swap_greed","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_is_word_character","type_id","type_id","type_id","type_id","unicode","utf8","0","0","Alnum","Alpha","Alternation","Alternation","Ascii","Ascii","Assertion","Assertion","AssertionKind","Ast","AtLeast","Bell","BinaryOp","Blank","Bounded","Bracketed","Bracketed","CaptureIndex","CaptureLimitExceeded","CaptureName","CaptureName","CarriageReturn","CaseInsensitive","Class","Class","ClassAscii","ClassAsciiKind","ClassBracketed","ClassEscapeInvalid","ClassPerl","ClassPerlKind","ClassRangeInvalid","ClassRangeLiteral","ClassSet","ClassSetBinaryOp","ClassSetBinaryOpKind","ClassSetItem","ClassSetRange","ClassSetUnion","ClassUnclosed","ClassUnicode","ClassUnicodeKind","ClassUnicodeOpKind","Cntrl","Colon","Comment","Concat","Concat","DecimalEmpty","DecimalInvalid","Difference","Digit","Digit","Dot","DotMatchesNewLine","Empty","Empty","EndLine","EndText","Equal","Err","Error","ErrorKind","EscapeHexEmpty","EscapeHexInvalid","EscapeHexInvalidDigit","EscapeUnexpectedEof","EscapeUnrecognized","Exactly","Flag","Flag","FlagDanglingNegation","FlagDuplicate","FlagRepeatedNegation","FlagUnexpectedEof","FlagUnrecognized","Flags","Flags","FlagsItem","FlagsItemKind","FormFeed","Graph","Group","Group","GroupKind","GroupNameDuplicate","GroupNameEmpty","GroupNameInvalid","GroupNameUnexpectedEof","GroupUnclosed","GroupUnopened","HexBrace","HexFixed","HexLiteralKind","IgnoreWhitespace","Intersection","Item","LineFeed","Literal","Literal","Literal","LiteralKind","Lower","MultiLine","Named","NamedValue","Negation","NestLimitExceeded","NonCapturing","NotEqual","NotWordBoundary","Octal","OneLetter","OneOrMore","Output","Perl","Perl","Position","Print","Punct","Punctuation","Range","Range","Repetition","Repetition","RepetitionCountDecimalEmpty","RepetitionCountInvalid","RepetitionCountUnclosed","RepetitionKind","RepetitionMissing","RepetitionOp","RepetitionRange","SetFlags","Space","Space","Space","Span","Special","SpecialLiteralKind","StartLine","StartText","SwapGreed","SymmetricDifference","Tab","Unicode","Unicode","Unicode","UnicodeClassInvalid","UnicodeLong","UnicodeShort","Union","UnsupportedBackreference","UnsupportedLookAround","Upper","Verbatim","VerticalTab","Visitor","WithComments","Word","Word","WordBoundary","X","Xdigit","ZeroOrMore","ZeroOrOne","add_item","ast","ast","ast","asts","asts","auxiliary_span","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte","c","capture_index","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","column","comment","comments","description","digits","drop","drop","end","end","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","finish","flag_state","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_name","greedy","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_ast","into_ast","into_item","is_capturing","is_empty","is_empty","is_equal","is_negated","is_negation","is_one_line","is_valid","is_valid","items","items","kind","kind","kind","kind","kind","kind","kind","kind","kind","kind","kind","lhs","line","name","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","negated","negated","negated","negated","new","new","offset","op","parse","partial_cmp","partial_cmp","pattern","print","push","rhs","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","splat","start","start","start","start","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","visit","visit_alternation_in","visit_alternation_in","visit_class_set_binary_op_in","visit_class_set_binary_op_in","visit_class_set_binary_op_post","visit_class_set_binary_op_post","visit_class_set_binary_op_pre","visit_class_set_binary_op_pre","visit_class_set_item_post","visit_class_set_item_post","visit_class_set_item_pre","visit_class_set_item_pre","visit_post","visit_post","visit_pre","visit_pre","with_end","with_start","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","name","op","value","0","original","original","original","0","0","0","0","0","0","0","0","0","0","0","1","Parser","ParserBuilder","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","default","fmt","fmt","from","from","ignore_whitespace","into","into","nest_limit","new","new","octal","parse","parse_with_comments","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Printer","borrow","borrow_mut","fmt","from","into","new","print","try_from","try_into","type_id","Alternation","Anchor","Anchor","Ascii","AsciiNegate","AtLeast","Bounded","Byte","Bytes","CaptureIndex","CaptureName","CaseFoldError","Class","Class","ClassBytes","ClassBytesIter","ClassBytesRange","ClassUnicode","ClassUnicodeIter","ClassUnicodeRange","Concat","Empty","EmptyClassNotAllowed","EndLine","EndText","Err","Error","ErrorKind","Exactly","Group","Group","GroupKind","Hir","HirKind","InvalidUtf8","Literal","Literal","NonCapturing","OneOrMore","Output","Range","Repetition","Repetition","RepetitionKind","RepetitionRange","StartLine","StartText","Unicode","Unicode","Unicode","UnicodeCaseUnavailable","UnicodeNegate","UnicodeNotAllowed","UnicodePerlClassNotFound","UnicodePropertyNotFound","UnicodePropertyValueNotFound","Visitor","WordBoundary","WordBoundary","ZeroOrMore","ZeroOrOne","alternation","anchor","any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","case_fold_simple","case_fold_simple","case_fold_simple","class","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","concat","default","default","description","difference","difference","dot","drop","empty","empty","empty","end","end","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","finish","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","greedy","group","has_subexprs","hir","hir","intersect","intersect","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_kind","is_all_ascii","is_all_ascii","is_all_assertions","is_alternation_literal","is_always_utf8","is_always_utf8","is_anchored_end","is_anchored_start","is_any_anchored_end","is_any_anchored_start","is_empty","is_line_anchored_end","is_line_anchored_start","is_literal","is_match_empty","is_match_empty","is_negated","is_unicode","iter","iter","kind","kind","kind","kind","literal","literal","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","negate","negate","negate","new","new","new","new","next","next","partial_cmp","partial_cmp","pattern","print","push","push","ranges","ranges","repetition","span","start","start","start","start","symmetric_difference","symmetric_difference","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","translate","try_case_fold_simple","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","visit","visit_alternation_in","visit_alternation_in","visit_post","visit_post","visit_pre","visit_pre","word_boundary","0","0","0","index","name","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","Literal","Literals","add","add_byte_class","add_char_class","all_complete","any_complete","as_ref","borrow","borrow","borrow_mut","borrow_mut","clear","clone","clone","clone_into","clone_into","cmp","contains_empty","cross_add","cross_product","cut","cut","deref","deref_mut","empty","empty","eq","eq","fmt","fmt","from","from","into","into","is_cut","is_empty","limit_class","limit_size","literals","longest_common_prefix","longest_common_suffix","min_len","ne","new","partial_cmp","prefixes","reverse","set_limit_class","set_limit_size","suffixes","to_empty","to_owned","to_owned","trim_suffix","try_from","try_from","try_into","try_into","type_id","type_id","unambiguous_prefixes","unambiguous_suffixes","union","union_prefixes","union_suffixes","Printer","borrow","borrow_mut","fmt","from","into","new","print","try_from","try_into","type_id","Translator","TranslatorBuilder","allow_invalid_utf8","borrow","borrow","borrow_mut","borrow_mut","build","case_insensitive","clone","clone","clone_into","clone_into","default","dot_matches_new_line","fmt","fmt","from","from","into","into","multi_line","new","new","swap_greed","to_owned","to_owned","translate","try_from","try_from","try_into","try_into","type_id","type_id","unicode","Four","One","Three","Two","Utf8Range","Utf8Sequence","Utf8Sequences","as_slice","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","end","eq","eq","fmt","fmt","fmt","from","from","from","into","into","into","into_iter","len","matches","matches","ne","ne","new","next","partial_cmp","partial_cmp","reverse","start","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","0","0","0"],"q":["regex_syntax","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","regex_syntax::Error","","regex_syntax::astregex_syntax::ast::Ast","","","","","","","","","","regex_syntax::ast::Class","","","regex_syntax::ast::ClassSet","","regex_syntax::ast::ClassSetItem","","","","","","","","regex_syntax::ast::ClassUnicodeKind","","","","","regex_syntax::ast::ErrorKind","","","","regex_syntax::ast::FlagsItemKind","regex_syntax::ast::GroupKind","","","regex_syntax::ast::LiteralKind","","","regex_syntax::ast::RepetitionKind","regex_syntax::ast::RepetitionRange","","","","regex_syntax::ast::parse","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","regex_syntax::ast::print","","","","","","","","","","","regex_syntax::hirregex_syntax::hir::Class","","regex_syntax::hir::GroupKind","","","regex_syntax::hir::HirKind","","","","","","","","regex_syntax::hir::Literal","","regex_syntax::hir::RepetitionKind","regex_syntax::hir::RepetitionRange","","","","regex_syntax::hir::literal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","regex_syntax::hir::print","","","","","","","","","","","regex_syntax::hir::translate","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","regex_syntax::utf8","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","regex_syntax::utf8::Utf8Sequence","","",""],"d":["This error type encompasses any error that can be returned …","An error that occurred while translating concrete syntax …","A convenience parser for regular expressions.","A builder for a regular expression parser.","A type alias for dealing with errors returned by this …","An error that occurred while translating abstract syntax …","An error that occurs when the Unicode-aware <code>\\\\w</code> class is …","When enabled, the parser will permit the construction of a …","Defines an abstract syntax for regular expressions.","","","","","","","","","Build a parser from this configuration with the given …","Enable or disable the case insensitive flag by default.","","","","","","","","","Enable or disable the “dot matches any character” flag …","","Escapes all regular expression meta characters in <code>text</code>.","Escapes all meta characters in <code>text</code> and writes the result …","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Defines a high-level intermediate representation for …","Enable verbose mode in the regular expression.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if the given character has significance in a …","Returns true if and only if the given character is an …","Returns true if and only if the given character is a …","Enable or disable the multi-line matching flag by default.","","Set the nesting limit for this parser.","Create a new parser builder with a default configuration.","Create a new parser with a default configuration.","Whether to support octal syntax or not.","Parse the regular expression into a high level intermediate","Enable or disable the “swap greed” flag by default.","","","","","","","","","","","","","","Returns true if and only if the given character is a …","","","","","Enable or disable the Unicode flag (<code>u</code>) by default.","Converts ranges of Unicode scalar values to equivalent …","","","<code>[0-9A-Za-z]</code>","<code>[A-Za-z]</code>","An alternation of regular expressions.","An alternation of regular expressions.","<code>[\\\\x00-\\\\x7F]</code>","An ASCII character class, e.g., <code>[:alnum:]</code> or <code>[:punct:]</code>.","A single zero-width assertion.","A single zero-width assertion.","An assertion kind.","An abstract syntax tree for a single regular expression.","<code>{m,}</code>","Bell, spelled <code>\\\\a</code> (<code>\\\\x07</code>).","A single binary operation (i.e., &amp;&amp;, – or ~~).","<code>[ \\\\t]</code>","<code>{m,n}</code>","A bracketed character class set, which may contain zero or …","A bracketed character class set, which may contain zero or …","<code>(a)</code>","The capturing group limit was exceeded.","A capture name.","<code>(?P&lt;name&gt;a)</code>","Carriage return, spelled <code>\\\\r</code> (<code>\\\\x0D</code>).","<code>i</code>","A single character class expression.","A single character class. This includes all forms of …","An ASCII character class.","The available ASCII character classes.","A bracketed character class, e.g., <code>[a-z0-9]</code>.","An invalid escape sequence was found in a character class …","A Perl character class.","The available Perl character classes.","An invalid character class range was found. An invalid …","An invalid range boundary was found in a character class. …","A character class set.","A Unicode character class set operation.","The type of a Unicode character class set operation.","A single component of a character class set.","A single character class range in a set.","A union of items inside a character class set.","An opening <code>[</code> was found with no corresponding closing <code>]</code>.","A Unicode character class.","The available forms of Unicode character classes.","The type of op used in a Unicode character class.","<code>[\\\\x00-\\\\x1F\\\\x7F]</code>","A property set to a specific value using a colon, e.g., …","A comment from a regular expression with an associated …","A concatenation of regular expressions.","A concatenation of regular expressions.","Note that this error variant is no longer used. Namely, a …","An invalid decimal number was given where one was expected.","The difference of two sets, e.g., <code>\\\\pN--[0-9]</code>.","Decimal numbers.","<code>[0-9]</code>","The “any character” class.","<code>s</code>","An empty regex that matches everything.","An empty item.","<code>$</code>","<code>\\\\z</code>","A property set to a specific value, e.g., <code>\\\\p{scx=Katakana}</code>.","An error that visiting an AST might return.","An error that occurred while parsing a regular expression …","The type of an error that occurred while building an AST.","A bracketed hex literal was empty.","A bracketed hex literal did not correspond to a Unicode …","An invalid hexadecimal digit was found.","EOF was found before an escape sequence was completed.","An unrecognized escape sequence.","<code>{m}</code>","A single flag.","A single flag in a group.","A dangling negation was used when setting flags, e.g., <code>i-</code>.","A flag was used twice, e.g., <code>i-i</code>.","The negation operator was used twice, e.g., <code>-i-s</code>.","Expected a flag but got EOF, e.g., <code>(?</code>.","Unrecognized flag, e.g., <code>a</code>.","A group of flags.","A set of flags, e.g., <code>(?is)</code>.","A single item in a group of flags.","The kind of an item in a group of flags.","Form feed, spelled <code>\\\\f</code> (<code>\\\\x0C</code>).","<code>[!-~]</code>","A grouped regular expression.","A grouped regular expression.","The kind of a group.","A duplicate capture name was found.","A capture group name is empty, e.g., <code>(?P&lt;&gt;abc)</code>.","An invalid character was seen for a capture group name. …","A closing <code>&gt;</code> could not be found for a capture group name.","An unclosed group, e.g., <code>(ab</code>.","An unopened group, e.g., <code>ab)</code>.","The literal is written as a hex code with a bracketed …","The literal is written as a hex code with a fixed number …","The type of a Unicode hex literal.","<code>x</code>","The intersection of two sets, e.g., <code>\\\\pN&amp;&amp;[a-z]</code>.","An item, which can be a single literal, range, nested …","Line feed, spelled <code>\\\\n</code> (<code>\\\\x0A</code>).","A single literal expression.","A single character literal, which includes escape …","A single literal.","The kind of a single literal expression.","<code>[a-z]</code>","<code>m</code>","A binary property, general category or script. The string …","A property name and an associated value.","A negation operator applied to all subsequent flags in the …","The nest limit was exceeded. The limit stored here is the …","<code>(?:a)</code> and <code>(?i:a)</code>","A property that isn’t a particular value, e.g., …","<code>\\\\B</code>","The literal is written as an octal escape, e.g., <code>\\\\141</code>.","A one letter abbreviated class, e.g., <code>\\\\pN</code>.","<code>+</code>","The result of visiting an AST.","A perl character class, e.g., <code>\\\\d</code> or <code>\\\\W</code>.","A perl character class, e.g., <code>\\\\d</code> or <code>\\\\W</code>.","A single position in a regular expression.","<code>[ -~]</code>","<code>[!-/:-@\\\\[-</code>{-~]`","The literal is written as an escape because it is …","A range between two literals.","<code>{m,n}</code>","A repetition operation applied to a regular expression.","A repetition operator applied to an arbitrary regular …","An opening <code>{</code> was not followed by a valid decimal value. …","The range provided in a counted repetition operator is …","An opening <code>{</code> was found with no corresponding closing <code>}</code>.","The kind of a repetition operator.","A repetition operator was applied to a missing …","The repetition operator itself.","A range repetition operator.","A group of flags that is not applied to a particular …","Space, spelled <code>\\\\ </code> (<code>\\\\x20</code>). Note that this can only appear …","Whitespace.","<code>[\\\\t\\\\n\\\\v\\\\f\\\\r ]</code>","Span represents the position information of a single AST …","The literal is written as a specially recognized escape, …","The type of a special literal.","<code>^</code>","<code>\\\\A</code>","<code>U</code>","The symmetric difference of two sets. The symmetric …","Tab, spelled <code>\\\\t</code> (<code>\\\\x09</code>).","A Unicode character class, e.g., <code>\\\\pL</code> or <code>\\\\p{Greek}</code>.","A Unicode character class, e.g., <code>\\\\pL</code> or <code>\\\\p{Greek}</code>.","<code>u</code>","The Unicode class is not valid. This typically occurs when …","A <code>\\\\U</code> prefix. When used without brackets, this form is …","A <code>\\\\u</code> prefix. When used without brackets, this form is …","A union of items.","When octal support is disabled, this error is produced …","When syntax similar to PCRE’s look-around is used, this …","<code>[A-Z]</code>","The literal is written verbatim, e.g., <code>a</code> or <code>☃</code>.","Vertical tab, spelled <code>\\\\v</code> (<code>\\\\x0B</code>).","A trait for visiting an abstract syntax tree (AST) in …","An abstract syntax tree for a singular expression along …","Word characters.","<code>[0-9A-Za-z_]</code>","<code>\\\\b</code>","A <code>\\\\x</code> prefix. When used without brackets, this form is …","<code>[0-9A-Fa-f]</code>","<code>*</code>","<code>?</code>","Add the given item to this sequence of flags.","The actual ast.","The regular expression under repetition.","The regular expression in this group.","The alternate regular expressions.","The concatenation regular expressions.","Return an auxiliary span. This span exists only for some …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If this literal was written as a <code>\\\\x</code> hex escape, then this …","The Unicode scalar value corresponding to this literal.","Returns the capture index of this group, if this is a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The approximate column number, starting at <code>1</code>.","The comment text, starting with the first character …","All comments found in the original regular expression.","","The number of digits that must be used with this literal …","","","The end byte offset.","The end of this range.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","All implementors of <code>Visitor</code> must provide a <code>finish</code> method, …","Returns the state of the given flag in this set.","If this group is non-capturing, then this returns the …","The actual sequence of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return the corresponding ClassAsciiKind variant for the …","Whether this operation was applied greedily or not.","The capture index.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return this alternation as an AST.","Return this concatenation as an AST.","Return this union as a character class set item.","Returns true if and only if this group is capturing.","Returns true if and only if this span is empty. That is, …","Return true if and only if this Ast is empty.","Whether the op is an equality op or not.","Returns true if this class has been negated.","Returns true if and only if this item is a negation …","Returns true if and only if this span occurs on a single …","Returns true if and only if this character class range is …","Returns true if and only if this repetition range is valid.","The sequence of items that make up this union.","A sequence of flag items. Each item is either a flag or a …","Return the type of this error.","The kind of this literal.","The kind of Perl class.","The kind of ASCII class.","The kind of Unicode class.","The type of this set. A set is either a normal union of …","The type of this set operation.","The assertion kind, e.g., <code>\\\\b</code> or <code>^</code>.","The type of operation.","The kind of this group.","The kind of this item.","The left hand side of the operation.","The line number, starting at <code>1</code>.","The capture name.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Whether the class is negated or not. e.g., <code>\\\\d</code> is not …","Whether the class is negated or not. e.g., <code>[[:alpha:]]</code> is …","Whether this class is negated or not.","Whether this class is negated or not. e.g., <code>[a]</code> is not …","Create a new span with the given positions.","Create a new position with the given information.","The absolute offset of this position, starting at <code>0</code> from …","The actual operation.","This module provides a regular expression parser.","","","The original pattern string in which this error occurred.","This module provides a regular expression printer for <code>Ast</code>.","Push a new item in this union.","The right hand side of the operation.","Return the span at which this error occurred.","Return the span of this abstract syntax tree.","Return the span of this character class.","Return the span of this character class set.","Return the span of this character class set item.","The span of this comment, including the beginning <code>#</code> and …","The span of this alternation.","The span of this concatenation.","The span of this literal.","The span of this class.","The span of this class.","The span of this class.","The span of this class.","The span of this range.","The span of the items in this operation. e.g., the <code>a-z0-9</code> …","The span of this operation. e.g., the <code>a-z--[h-p]</code> in …","The span of this assertion.","The span of this operation.","The span of this operator. This includes things like <code>+</code>, <code>*?</code> …","The span of this group.","The span of this capture name.","The span of these flags, including the grouping …","The span of this group of flags.","The span of this item.","Create a new span using the given position as the start …","This method is called before beginning traversal of the …","This method is called before beginning traversal of the …","The start byte offset.","The start of this rangeuild a set from a union.","Executes an implementation of <code>Visitor</code> in constant stack …","This method is called between child nodes of an <code>Alternation</code>…","This method is called between child nodes of an <code>Alternation</code>…","This method is called between the left hand and right hand …","This method is called between the left hand and right hand …","This method is called on every <code>ClassSetBinaryOp</code> after …","This method is called on every <code>ClassSetBinaryOp</code> after …","This method is called on every <code>ClassSetBinaryOp</code> before …","This method is called on every <code>ClassSetBinaryOp</code> before …","This method is called on every <code>ClassSetItem</code> after …","This method is called on every <code>ClassSetItem</code> after …","This method is called on every <code>ClassSetItem</code> before …","This method is called on every <code>ClassSetItem</code> before …","This method is called on an <code>Ast</code> after descending all of …","This method is called on an <code>Ast</code> after descending all of …","This method is called on an <code>Ast</code> before descending into …","This method is called on an <code>Ast</code> before descending into …","Create a new span by replacing the ending the position …","Create a new span by replacing the starting the position …","","","","","","","","","","","","","","","","","","","","","","","","","","The property name (which may be empty).","The type of Unicode op used to associate <code>name</code> with <code>value</code>.","The property value (which may be empty).","","The position of the original flag. The error position …","The position of the original negation operator. The error …","The position of the initial occurrence of the capture …","","","","","","","","","","","","","A regular expression parser.","A builder for a regular expression parser.","","","","","Build a parser from this configuration with the given …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Enable verbose mode in the regular expression.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Set the nesting limit for this parser.","Create a new parser builder with a default configuration.","Create a new parser with a default configuration.","Whether to support octal syntax or not.","Parse the regular expression into an abstract syntax tree.","Parse the regular expression and return an abstract syntax …","","","","","","","","","A printer for a regular expression abstract syntax tree.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new printer.","Print the given <code>Ast</code> to the given writer. The writer must …","","","","An alternation of expressions. An alternation always has …","The high-level intermediate representation for an anchor …","An anchor assertion. An anchor assertion match always has …","Match an ASCII-only word boundary. That is, this matches a …","Match an ASCII-only negation of a word boundary.","Matches a sub-expression at least this many times.","Matches a sub-expression at least <code>m</code> times and at most <code>n</code> …","A single character represented by an arbitrary byte.","A set of characters represented by arbitrary bytes (one …","A normal unnamed capturing group.","A named capturing group.","An error that occurs when Unicode-aware simple case …","The high-level intermediate representation of a character …","A single character class that matches any of the …","A set of characters represented by arbitrary bytes (where …","An iterator over all ranges in a byte character class.","A single range of characters represented by arbitrary …","A set of characters represented by Unicode scalar values.","An iterator over all ranges in a Unicode character class.","A single range of characters represented by Unicode scalar …","A concatenation of expressions. A concatenation always has …","The empty regular expression, which matches everything, …","This occurs when the translator attempts to construct a …","Match the end of a line or the end of text. Specifically, …","Match the end of text. Specifically, this matches at the …","An error that visiting an HIR might return.","An error that can occur while translating an <code>Ast</code> to a <code>Hir</code>.","The type of an error that occurred while building an <code>Hir</code>.","Matches a sub-expression exactly this many times.","The high-level intermediate representation for a group.","A possibly capturing group, which contains a child …","The kind of group.","A high-level intermediate representation (HIR) for a …","The kind of an arbitrary <code>Hir</code> expression.","This error occurs when translating a pattern that could …","The high-level intermediate representation of a literal.","A single literal character that matches exactly this …","A non-capturing group.","Matches a sub-expression one or more times.","The result of visiting an HIR.","Matches a sub-expression within a bounded range of times.","The high-level intermediate representation of a repetition …","A repetition operation applied to a child expression.","The kind of a repetition operator.","The kind of a counted repetition operator.","Match the beginning of a line or the beginning of text. …","Match the beginning of text. Specifically, this matches at …","A single character represented by a Unicode scalar value.","A set of characters represented by Unicode scalar values.","Match a Unicode-aware word boundary. That is, this matches …","This occurs when the Unicode simple case mapping tables …","Match a Unicode-aware negation of a word boundary.","This error occurs when a Unicode feature is used when …","This occurs when a Unicode-aware Perl character class (<code>\\\\w</code>, …","This occurs when an unrecognized Unicode property name …","This occurs when an unrecognized Unicode property value …","A trait for visiting the high-level IR (HIR) in depth …","The high-level intermediate representation for a …","A word boundary assertion, which may or may not be Unicode …","Matches a sub-expression zero or more times.","Matches a sub-expression zero or one times.","Returns the alternation of the given expressions.","Creates an anchor assertion HIR expression.","Build an HIR expression for <code>(?s).</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Apply Unicode simple case folding to this character class, …","Expand this character class such that it contains all case …","Expand this character class such that it contains all case …","Creates a class HIR expression.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the concatenation of the given expressions.","","","","Subtract the given character class from this character …","Subtract the given byte class from this byte class, in …","Build an HIR expression for <code>.</code>.","","Returns an empty HIR expression.","Create a new class with no ranges.","Create a new class with no ranges.","Return the end of this range.","Return the end of this range.","","","","","","","","","","","","","","","","","","All implementors of <code>Visitor</code> must provide a <code>finish</code> method, …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Whether this repetition operator is greedy or not. A …","Creates a group HIR expression.","Returns true if and only if this kind has any (including …","The expression inside the capturing group, which may be …","The expression being repeated.","Intersect this character class with the given character …","Intersect this byte class with the given byte class, in …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Consumes ownership of this HIR expression and returns its …","Returns true if and only if this character class will …","Returns true if and only if this character class will …","Returns true if and only if this entire HIR expression is …","Return true if and only if this HIR is either a simple …","Return true if and only if this HIR will always match …","Returns true if and only if this character class will only …","Return true if and only if this HIR is required to match …","Return true if and only if this HIR is required to match …","Return true if and only if this HIR contains any …","Return true if and only if this HIR contains any …","Return true if and only if this HIR is the empty regular …","Return true if and only if this HIR is required to match …","Return true if and only if this HIR is required to match …","Return true if and only if this HIR is a simple literal. …","Return true if and only if the empty string is part of the …","Returns true if and only if this repetition operator makes …","Returns true if and only if this word boundary assertion …","Returns true if and only if this literal corresponds to a …","Return an iterator over all ranges in this class.","Return an iterator over all ranges in this class.","Return the type of this error.","Returns a reference to the underlying HIR kind.","The kind of this group. If it is a capturing group, then …","The kind of this repetition operator.","Provides routines for extracting literal prefixes and …","Creates a literal HIR expression.","","","","","","","","","","","","","","","Negate this character class in place.","Negate this character class.","Negate this byte class.","Create a new class from a sequence of ranges.","Create a new Unicode scalar value range for a character …","Create a new class from a sequence of ranges.","Create a new byte range for a character class.","","","","","The original pattern string in which this error occurred.","This module provides a regular expression printer for <code>Hir</code>.","Add a new range to this set.","Add a new range to this set.","Return the underlying ranges as a slice.","Return the underlying ranges as a slice.","Creates a repetition HIR expression.","Return the span at which this error occurred.","This method is called before beginning traversal of the …","This method is called before beginning traversal of the …","Return the start of this range.","Return the start of this range.","Compute the symmetric difference of the given character …","Compute the symmetric difference of the given byte …","","","","","","","","","","","","","","","","","","","","","","Defines a translator that converts an <code>Ast</code> to an <code>Hir</code>.","Expand this character class such that it contains all case …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Union this character class with the given character class, …","Union this byte class with the given byte class, in place.","Executes an implementation of <code>Visitor</code> in constant stack …","This method is called between child nodes of an …","This method is called between child nodes of an …","This method is called on an <code>Hir</code> after descending all of …","This method is called on an <code>Hir</code> after descending all of …","This method is called on an <code>Hir</code> before descending into …","This method is called on an <code>Hir</code> before descending into …","Creates a word boundary assertion HIR expression.","","","","The capture index of the group.","The name of the group.","","","","","","","","","","","","","","","","A single member of a set of literals extracted from a …","A set of literal byte strings extracted from a regular …","Adds the given literal to this set.","Extends each literal in this set with the byte class given.","Extends each literal in this set with the character class …","Returns true if all members in this set are complete.","Returns true if any member in this set is complete.","","","","","","Clears this set of all members.","","","","","","Returns true if this set contains an empty literal.","Extends each literal in this set with the bytes given.","Extends this set with another set.","Cuts every member of this set. When a member is cut, it …","Cuts this literal.","","","Returns a new empty set of literals using default limits.","Returns a new complete empty literal.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if this literal was “cut.”","Returns true if this set is empty or if all of its members …","Get the character class size limit for this set.","Get the approximate size limit (in bytes) of this set.","Returns the set of literals as a slice. Its order is …","Returns the longest common prefix of all members in this …","Returns the longest common suffix of all members in this …","Returns the length of the smallest literal.","","Returns a new complete literal with the bytes given.","","Returns a set of literal prefixes extracted from the given …","Reverses all members in place.","Limits the size of character(or byte) classes considered.","Set the approximate size limit (in bytes) of this set.","Returns a set of literal suffixes extracted from the given …","Returns a new empty set of literals using this set’s …","","","Returns a new set of literals with the given number of …","","","","","","","Returns a new set of prefixes of this set of literals that …","Returns a new set of suffixes of this set of literals that …","Unions this set with another set.","Unions the prefixes from the given expression to this set.","Unions the suffixes from the given expression to this set.","A printer for a regular expression’s high-level …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new printer.","Print the given <code>Ast</code> to the given writer. The writer must …","","","","A translator maps abstract syntax to a high level …","A builder for constructing an AST-&gt;HIR translator.","When enabled, translation will permit the construction of …","","","","","Build a translator using the current configuration.","Enable or disable the case insensitive flag (<code>i</code>) by default.","","","","","","Enable or disable the “dot matches any character” flag …","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Enable or disable the multi-line matching flag (<code>m</code>) by …","Create a new translator builder with a default c …","Create a new translator using the default configuration.","Enable or disable the “swap greed” flag (<code>U</code>) by default.","","","Translate the given abstract syntax tree (AST) into a high …","","","","","","","Enable or disable the Unicode flag (<code>u</code>) by default.","Four successive byte ranges.","One byte range.","Three successive byte ranges.","Two successive byte ranges.","A single inclusive range of UTF-8 bytes.","Utf8Sequence represents a sequence of byte ranges.","An iterator over ranges of matching UTF-8 byte sequences.","Returns the underlying sequence of byte ranges as a slice.","","","","","","","","","","","","","End of byte range (inclusive).","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns the number of byte ranges in this sequence.","Returns true if and only if a prefix of <code>bytes</code> matches this …","Returns true if and only if the given byte is in this …","","","Create a new iterator over UTF-8 byte ranges for the …","","","","Reverses the ranges in this sequence.","Start of byte range (inclusive).","","","","","","","","","","","","","","",""],"i":[0,1,0,0,0,1,0,2,0,1,2,3,4,1,2,3,4,2,2,1,2,3,1,2,3,2,1,2,1,0,0,1,1,2,3,4,4,1,1,1,2,3,4,0,2,1,2,3,4,0,0,0,2,1,2,2,3,2,3,2,1,2,3,1,4,1,2,3,4,1,2,3,4,0,1,2,3,4,2,0,5,6,7,7,0,8,7,9,0,8,0,0,10,11,12,7,10,13,9,14,15,0,14,11,16,0,8,0,0,0,15,0,0,15,15,0,0,0,0,0,0,15,0,0,0,7,17,0,0,8,15,15,18,19,7,8,16,8,9,20,20,17,21,0,0,15,15,15,15,15,10,0,22,15,15,15,15,15,0,8,0,0,11,7,0,8,0,15,15,15,15,15,15,23,23,0,16,18,12,11,0,8,9,0,7,16,24,24,22,15,14,17,20,23,24,25,21,13,9,0,7,7,23,9,25,0,8,15,15,15,0,15,0,0,0,11,19,7,0,23,0,20,20,16,18,11,13,9,16,15,26,26,9,15,15,7,23,11,0,0,19,7,20,26,7,25,25,27,28,29,30,31,32,33,33,15,34,35,28,36,8,31,32,37,23,11,26,13,38,19,39,7,40,24,17,41,12,9,42,43,44,18,45,20,29,46,25,10,30,14,47,48,27,49,22,16,33,15,34,35,28,36,8,31,32,37,23,11,26,13,38,19,39,7,40,24,17,41,12,9,42,43,44,18,45,20,29,46,25,10,30,14,47,48,27,49,22,16,37,37,30,33,15,34,35,28,36,8,31,32,37,23,11,26,13,38,19,39,7,40,24,17,41,12,9,42,43,44,18,45,20,29,46,25,10,30,14,47,48,27,49,22,16,33,15,34,35,28,36,8,31,32,37,23,11,26,13,38,19,39,7,40,24,17,41,12,9,42,43,44,18,45,20,29,46,25,10,30,14,47,48,27,49,22,16,34,35,35,36,28,33,26,8,12,34,42,33,15,34,35,28,36,8,31,32,37,23,11,26,13,38,19,39,7,40,24,17,41,12,9,42,43,44,18,45,20,29,46,25,10,30,14,47,48,27,49,22,16,21,27,30,48,33,33,15,15,34,35,28,36,8,8,31,32,37,23,11,26,13,38,19,39,7,40,24,17,41,12,9,42,43,44,18,45,20,29,46,25,10,30,14,47,48,27,49,22,16,33,15,34,35,28,36,8,31,32,37,23,11,26,13,38,19,39,7,40,24,17,41,12,9,42,43,44,18,45,20,29,46,25,10,30,14,47,48,27,49,22,16,7,29,47,33,15,34,35,28,36,8,31,32,37,23,11,26,13,38,19,39,7,40,24,17,41,12,9,42,43,44,18,45,20,29,46,25,10,30,14,47,48,27,49,22,16,31,32,43,30,34,8,17,40,22,34,42,10,43,27,33,37,38,39,40,41,44,45,46,30,49,44,35,47,33,15,34,35,28,36,8,31,32,37,23,13,38,39,40,24,41,12,9,42,43,44,45,29,46,25,10,30,14,47,48,27,49,22,38,39,40,41,34,35,35,29,0,34,35,33,0,43,44,33,8,13,12,9,36,31,32,37,38,39,40,41,42,43,44,45,29,46,30,47,48,27,49,34,21,21,34,42,33,15,34,35,28,36,8,31,32,37,23,11,26,13,38,19,39,7,40,24,17,41,12,9,42,43,44,18,45,20,29,46,25,10,30,14,47,48,27,49,22,16,33,15,8,33,15,34,35,28,36,8,31,32,37,23,11,26,13,38,19,39,7,40,24,17,41,12,9,42,43,44,18,45,20,29,46,25,10,30,14,47,48,27,49,22,16,33,15,34,35,28,36,8,31,32,37,23,11,26,13,38,19,39,7,40,24,17,41,12,9,42,43,44,18,45,20,29,46,25,10,30,14,47,48,27,49,22,16,33,15,34,35,28,36,8,31,32,37,23,11,26,13,38,19,39,7,40,24,17,41,12,9,42,43,44,18,45,20,29,46,25,10,30,14,47,48,27,49,22,16,12,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,34,34,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,75,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,90,0,0,91,92,91,92,91,91,92,91,92,91,91,92,91,92,91,91,92,91,91,92,91,92,92,91,92,91,92,91,92,91,92,0,93,93,93,93,93,93,93,93,93,93,94,0,94,95,95,96,96,97,98,99,99,0,0,94,0,0,0,0,0,0,94,94,100,101,101,102,0,0,96,0,94,0,0,0,100,0,94,99,103,102,103,0,94,0,0,101,101,97,98,95,100,95,100,100,100,100,0,0,94,103,103,104,104,104,105,100,104,94,97,98,106,107,108,109,110,111,101,95,112,99,113,103,96,114,105,100,104,94,97,98,106,107,108,109,110,111,101,95,112,99,113,103,96,114,98,106,109,104,105,100,104,94,97,98,106,108,109,111,101,95,112,99,113,103,96,105,100,104,94,97,98,106,108,109,111,101,95,112,99,113,103,96,108,111,104,108,111,105,106,109,104,104,104,106,109,108,111,105,100,104,94,97,98,106,108,109,111,101,95,112,99,113,103,96,102,105,105,100,100,104,104,94,97,98,106,107,108,109,110,111,101,95,112,99,113,103,96,114,114,105,100,104,94,97,98,106,107,108,109,110,111,101,95,112,99,113,103,96,114,113,104,94,112,113,106,109,105,100,104,94,97,98,106,107,108,109,110,111,101,95,112,99,113,103,96,114,107,110,104,106,109,104,104,104,98,104,104,104,104,94,104,104,104,104,113,95,97,106,109,105,104,112,113,0,104,105,104,94,97,98,106,108,109,111,112,99,113,103,96,98,106,109,106,108,109,111,107,110,108,111,105,0,106,109,106,109,104,105,102,102,108,111,106,109,105,100,104,94,97,98,106,108,109,111,101,95,112,99,113,103,96,105,100,104,114,0,106,105,100,104,94,97,98,106,107,108,109,110,111,101,95,112,99,113,103,96,114,105,100,104,94,97,98,106,107,108,109,110,111,101,95,112,99,113,103,96,114,105,100,104,94,97,98,106,107,108,109,110,111,101,95,112,99,113,103,96,114,106,109,0,102,102,102,102,102,102,104,115,116,117,118,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,132,0,0,133,133,133,133,133,134,133,134,133,134,133,133,134,133,134,134,133,133,133,133,134,134,134,133,134,133,134,133,134,133,134,133,134,134,133,133,133,133,133,133,133,133,134,134,133,133,133,133,133,133,133,134,133,133,134,133,134,133,134,133,133,133,133,133,0,135,135,135,135,135,135,135,135,135,135,0,0,136,136,137,136,137,136,136,136,137,136,137,136,136,136,137,136,137,136,137,136,136,137,136,136,137,137,136,137,136,137,136,137,136,138,138,138,138,0,0,0,138,138,139,140,138,139,140,138,139,138,139,138,139,139,138,139,138,139,140,138,139,140,138,139,140,140,138,138,139,138,139,140,140,138,139,138,139,138,139,138,139,140,138,139,140,138,139,140,141,142,143,144],"f":[null,null,null,null,null,null,null,[[["",0],["bool",0]],["parserbuilder",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["parser",3]],[[["",0],["bool",0]],["parserbuilder",3]],[[["",0]],["error",4]],[[["",0]],["parserbuilder",3]],[[["",0]],["parser",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["parserbuilder",3]],[[["",0]],["str",0]],[[["",0],["bool",0]],["parserbuilder",3]],[[["",0],["error",4]],["bool",0]],[[["str",0]],["string",3]],[[["str",0],["string",3]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["error",3]],["error",4]],[[]],[[["error",3]],["error",4]],[[]],[[]],[[]],null,[[["",0],["bool",0]],["parserbuilder",3]],[[]],[[]],[[]],[[]],[[["char",0]],["bool",0]],[[["u8",0]],["bool",0]],[[["char",0]],["bool",0]],[[["",0],["bool",0]],["parserbuilder",3]],[[["",0],["error",4]],["bool",0]],[[["",0],["u32",0]],["parserbuilder",3]],[[],["parserbuilder",3]],[[],["parser",3]],[[["",0],["bool",0]],["parserbuilder",3]],[[["",0],["str",0]],["result",6,[["hir",3]]]],[[["",0],["bool",0]],["parserbuilder",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["char",0]],["result",4,[["bool",0],["unicodeworderror",3]]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["bool",0]],["parserbuilder",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["flagsitem",3]],["option",4,[["usize",0]]]],null,null,null,null,null,[[["",0]],["option",4,[["spanoption",4,[["u8",0]]]],null,[[["",0]],["option",4,[["u32",0]]]],[[["",0]],["error",3]],[[["",0]],["errorkind",4]],[[["",0]],["span",3]],[[["",0]],["position",3]],[[["",0]],["withcomments",3]],[[["",0]],["comment",3]],[[["",0]],["ast",4]],[[["",0]],["alternation",3]],[[["",0]],["concat",3]],[[["",0]],["literal",3]],[[["",0]],["literalkind",4]],[[["",0]],["specialliteralkind",4]],[[["",0]],["hexliteralkind",4]],[[["",0]],["class",4]],[[["",0]],["classperl",3]],[[["",0]],["classperlkind",4]],[[["",0]],["classascii",3]],[[["",0]],["classasciikind",4]],[[["",0]],["classunicode",3]],[[["",0]],["classunicodekind",4]],[[["",0]],["classunicodeopkind",4]],[[["",0]],["classbracketed",3]],[[["",0]],["classset",4]],[[["",0]],["classsetitem",4]],[[["",0]],["classsetrange",3]],[[["",0]],["classsetunion",3]],[[["",0]],["classsetbinaryop",3]],[[["",0]],["classsetbinaryopkind",4]],[[["",0]],["assertion",3]],[[["",0]],["assertionkind",4]],[[["",0]],["repetition",3]],[[["",0]],["repetitionop",3]],[[["",0]],["repetitionkind",4]],[[["",0]],["repetitionrange",4]],[[["",0]],["group",3]],[[["",0]],["groupkind",4]],[[["",0]],["capturename",3]],[[["",0]],["setflags",3]],[[["",0]],["flags",3]],[[["",0]],["flagsitem",3]],[[["",0]],["flagsitemkind",4]],[[["",0]],["flagspan",3]],["ordering",4]],[[["",0],["position",3]],["ordering",4]],null,null,null,[[["",0]],["str",0]],[[["",0]],["u32",0]],[[["",0]]],[[["",0]]],null,null,[[["",0],["error",3]],["bool",0]],[[["",0],["errorkind",4]],["bool",0]],[[["",0],["span",3]],["bool",0]],[[["",0],["position",3]],["bool",0]],[[["",0],["withcomments",3]],["bool",0]],[[["",0],["comment",3]],["bool",0]],[[["",0],["ast",4]],["bool",0]],[[["",0],["alternation",3]],["bool",0]],[[["",0],["concat",3]],["bool",0]],[[["",0],["literal",3]],["bool",0]],[[["",0],["literalkind",4]],["bool",0]],[[["",0],["specialliteralkind",4]],["bool",0]],[[["",0],["hexliteralkind",4]],["bool",0]],[[["",0],["class",4]],["bool",0]],[[["",0],["classperl",3]],["bool",0]],[[["",0],["classperlkind",4]],["bool",0]],[[["",0],["classascii",3]],["bool",0]],[[["",0],["classasciikind",4]],["bool",0]],[[["",0],["classunicode",3]],["bool",0]],[[["",0],["classunicodekind",4]],["bool",0]],[[["",0],["classunicodeopkind",4]],["bool",0]],[[["",0],["classbracketed",3]],["bool",0]],[[["",0],["classset",4]],["bool",0]],[[["",0],["classsetitem",4]],["bool",0]],[[["",0],["classsetrange",3]],["bool",0]],[[["",0],["classsetunion",3]],["bool",0]],[[["",0],["classsetbinaryop",3]],["bool",0]],[[["",0],["classsetbinaryopkind",4]],["bool",0]],[[["",0],["assertion",3]],["bool",0]],[[["",0],["assertionkind",4]],["bool",0]],[[["",0],["repetition",3]],["bool",0]],[[["",0],["repetitionop",3]],["bool",0]],[[["",0],["repetitionkind",4]],["bool",0]],[[["",0],["repetitionrange",4]],["bool",0]],[[["",0],["group",3]],["bool",0]],[[["",0],["groupkind",4]],["bool",0]],[[["",0],["capturename",3]],["bool",0]],[[["",0],["setflags",3]],["bool",0]],[[["",0],["flags",3]],["bool",0]],[[["",0],["flagsitem",3]],["bool",0]],[[["",0],["flagsitemkind",4]],["bool",0]],[[["",0],["flag",4]],["bool",0]],[[],["result",4]],[[["",0],["flag",4]],["option",4,[["bool",0]]]],[[["",0]],["option",4,[["flags",3]]]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",0]],["option",4,[["classasciikind",4]]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["ast",4]],[[],["ast",4]],[[],["classsetitem",4]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],null,null,[[["",0]],["errorkind",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["error",3]],["bool",0]],[[["",0],["errorkind",4]],["bool",0]],[[["",0],["span",3]],["bool",0]],[[["",0],["position",3]],["bool",0]],[[["",0],["withcomments",3]],["bool",0]],[[["",0],["comment",3]],["bool",0]],[[["",0],["ast",4]],["bool",0]],[[["",0],["alternation",3]],["bool",0]],[[["",0],["concat",3]],["bool",0]],[[["",0],["literal",3]],["bool",0]],[[["",0],["literalkind",4]],["bool",0]],[[["",0],["class",4]],["bool",0]],[[["",0],["classperl",3]],["bool",0]],[[["",0],["classascii",3]],["bool",0]],[[["",0],["classunicode",3]],["bool",0]],[[["",0],["classunicodekind",4]],["bool",0]],[[["",0],["classbracketed",3]],["bool",0]],[[["",0],["classset",4]],["bool",0]],[[["",0],["classsetitem",4]],["bool",0]],[[["",0],["classsetrange",3]],["bool",0]],[[["",0],["classsetunion",3]],["bool",0]],[[["",0],["classsetbinaryop",3]],["bool",0]],[[["",0],["assertion",3]],["bool",0]],[[["",0],["repetition",3]],["bool",0]],[[["",0],["repetitionop",3]],["bool",0]],[[["",0],["repetitionkind",4]],["bool",0]],[[["",0],["repetitionrange",4]],["bool",0]],[[["",0],["group",3]],["bool",0]],[[["",0],["groupkind",4]],["bool",0]],[[["",0],["capturename",3]],["bool",0]],[[["",0],["setflags",3]],["bool",0]],[[["",0],["flags",3]],["bool",0]],[[["",0],["flagsitem",3]],["bool",0]],[[["",0],["flagsitemkind",4]],["bool",0]],null,null,null,null,[[["position",3],["position",3]],["span",3]],[[["usize",0],["usize",0],["usize",0]],["position",3]],null,null,null,[[["",0],["span",3]],["option",4,[["ordering",4]]]],[[["",0],["position",3]],["option",4,[["ordering",4]]]],[[["",0]],["str",0]],null,[[["",0],["classsetitem",4]]],null,[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["position",3]],["span",3]],[[["",0]]],[[["",0]]],null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["classsetunion",3]],["classset",4]],[[["ast",4],["visitor",8]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0],["classsetbinaryop",3]],["result",4]],[[["",0],["classsetbinaryop",3]],["result",4]],[[["",0],["classsetbinaryop",3]],["result",4]],[[["",0],["classsetbinaryop",3]],["result",4]],[[["",0],["classsetbinaryop",3]],["result",4]],[[["",0],["classsetbinaryop",3]],["result",4]],[[["",0],["classsetitem",4]],["result",4]],[[["",0],["classsetitem",4]],["result",4]],[[["",0],["classsetitem",4]],["result",4]],[[["",0],["classsetitem",4]],["result",4]],[[["",0],["ast",4]],["result",4]],[[["",0],["ast",4]],["result",4]],[[["",0],["ast",4]],["result",4]],[[["",0],["ast",4]],["result",4]],[[["position",3]],["span",3]],[[["position",3]],["span",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["parser",3]],[[["",0]],["parserbuilder",3]],[[["",0]],["parser",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["parserbuilder",3]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0],["bool",0]],["parserbuilder",3]],[[]],[[]],[[["",0],["u32",0]],["parserbuilder",3]],[[],["parserbuilder",3]],[[],["parser",3]],[[["",0],["bool",0]],["parserbuilder",3]],[[["",0],["str",0]],["result",4,[["ast",4],["error",3]]]],[[["",0],["str",0]],["result",4,[["withcomments",3],["error",3]]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[],["printer",3]],[[["",0],["ast",4],["write",8]],["result",6]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["vec",3,[["hir",3]]]],["hir",3]],[[["anchor",4]],["hir",3]],[[["bool",0]],["hirclass",4]],["hir",3]],[[["",0]],["error",3]],[[["",0]],["errorkind",4]],[[["",0]],["hir",3]],[[["",0]],["hirkind",4]],[[["",0]],["literal",4]],[[["",0]],["class",4]],[[["",0]],["classunicode",3]],[[["",0]],["classunicoderange",3]],[[["",0]],["classbytes",3]],[[["",0]],["classbytesrange",3]],[[["",0]],["anchor",4]],[[["",0]],["wordboundary",4]],[[["",0]],["group",3]],[[["",0]],["groupkind",4]],[[["",0]],["repetition",3]],[[["",0]],["repetitionkind",4]],[[["",0]],["repetitionrange",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["classunicoderange",3]],["ordering",4]],[[["",0],["classbytesrange",3]],["ordering",4]],[[["vec",3,[["hir",3]]]],["hir",3]],[[],["classunicoderange",3]],[[],["classbytesrange",3]],[[["",0]],["str",0]],[[["",0],["classunicode",3]]],[[["",0],["classbytes",3]]],[[["bool",0]],["hir",3]],[[["",0]]],[[],["hir",3]],[[],["classunicode",3]],[[],["classbytes",3]],[[["",0]],["char",0]],[[["",0]],["u8",0]],[[["",0],["error",3]],["bool",0]],[[["",0],["errorkind",4]],["bool",0]],[[["",0],["hir",3]],["bool",0]],[[["",0],["hirkind",4]],["bool",0]],[[["",0],["literal",4]],["bool",0]],[[["",0],["class",4]],["bool",0]],[[["",0],["classunicode",3]],["bool",0]],[[["",0],["classunicoderange",3]],["bool",0]],[[["",0],["classbytes",3]],["bool",0]],[[["",0],["classbytesrange",3]],["bool",0]],[[["",0],["anchor",4]],["bool",0]],[[["",0],["wordboundary",4]],["bool",0]],[[["",0],["group",3]],["bool",0]],[[["",0],["groupkind",4]],["bool",0]],[[["",0],["repetition",3]],["bool",0]],[[["",0],["repetitionkind",4]],["bool",0]],[[["",0],["repetitionrange",4]],["bool",0]],[[],["result",4]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["group",3]],["hir",3]],[[["",0]],["bool",0]],null,null,[[["",0],["classunicode",3]]],[[["",0],["classbytes",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["hirkind",4]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["classunicodeiter",3]],[[["",0]],["classbytesiter",3]],[[["",0]],["errorkind",4]],[[["",0]],["hirkind",4]],null,null,null,[[["literal",4]],["hir",3]],[[["",0],["error",3]],["bool",0]],[[["",0],["hir",3]],["bool",0]],[[["",0],["hirkind",4]],["bool",0]],[[["",0],["literal",4]],["bool",0]],[[["",0],["class",4]],["bool",0]],[[["",0],["classunicode",3]],["bool",0]],[[["",0],["classunicoderange",3]],["bool",0]],[[["",0],["classbytes",3]],["bool",0]],[[["",0],["classbytesrange",3]],["bool",0]],[[["",0],["group",3]],["bool",0]],[[["",0],["groupkind",4]],["bool",0]],[[["",0],["repetition",3]],["bool",0]],[[["",0],["repetitionkind",4]],["bool",0]],[[["",0],["repetitionrange",4]],["bool",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["classunicode",3]],[[["char",0],["char",0]],["classunicoderange",3]],[[],["classbytes",3]],[[["u8",0],["u8",0]],["classbytesrange",3]],[[["",0]],["option",4,[["classunicoderange",3]]]],[[["",0]],["option",4,[["classbytesrange",3]]]],[[["",0],["classunicoderange",3]],["option",4,[["ordering",4]]]],[[["",0],["classbytesrange",3]],["option",4,[["ordering",4]]]],[[["",0]],["str",0]],null,[[["",0],["classunicoderange",3]]],[[["",0],["classbytesrange",3]]],[[["",0]]],[[["",0]]],[[["repetition",3]],["hir",3]],[[["",0]],["span",3]],[[["",0]]],[[["",0]]],[[["",0]],["char",0]],[[["",0]],["u8",0]],[[["",0],["classunicode",3]]],[[["",0],["classbytes",3]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],null,[[["",0]],["result",4,[["casefolderror",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["classunicode",3]]],[[["",0],["classbytes",3]]],[[["hir",3],["visitor",8]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0],["hir",3]],["result",4]],[[["",0],["hir",3]],["result",4]],[[["",0],["hir",3]],["result",4]],[[["",0],["hir",3]],["result",4]],[[["wordboundary",4]],["hir",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["literal",3]],["bool",0]],[[["",0],["classbytes",3]],["bool",0]],[[["",0],["classunicode",3]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]],["literals",3]],[[["",0]],["literal",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["literal",3]],["ordering",4]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0],["literals",3]],["bool",0]],[[["",0]]],[[["",0]]],[[["",0]],["vec",3]],[[["",0]],["vec",3]],[[],["literals",3]],[[],["literal",3]],[[["",0],["literals",3]],["bool",0]],[[["",0],["literal",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0],["literals",3]],["bool",0]],[[["vec",3,[["u8",0]]]],["literal",3]],[[["",0],["literal",3]],["option",4,[["ordering",4]]]],[[["hir",3]],["literals",3]],[[["",0]]],[[["",0],["usize",0]],["literals",3]],[[["",0],["usize",0]],["literals",3]],[[["hir",3]],["literals",3]],[[["",0]],["literals",3]],[[["",0]]],[[["",0]]],[[["",0],["usize",0]],["option",4,[["literals",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["literals",3]],[[["",0]],["literals",3]],[[["",0],["literals",3]],["bool",0]],[[["",0],["hir",3]],["bool",0]],[[["",0],["hir",3]],["bool",0]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[],["printer",3]],[[["",0],["hir",3],["write",8]],["result",6]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,[[["",0],["bool",0]],["translatorbuilder",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["translator",3]],[[["",0],["bool",0]],["translatorbuilder",3]],[[["",0]],["translatorbuilder",3]],[[["",0]],["translator",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["translatorbuilder",3]],[[["",0],["bool",0]],["translatorbuilder",3]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["",0],["bool",0]],["translatorbuilder",3]],[[],["translatorbuilder",3]],[[],["translator",3]],[[["",0],["bool",0]],["translatorbuilder",3]],[[["",0]]],[[["",0]]],[[["",0],["str",0],["ast",4]],["result",4,[["hir",3],["error",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["bool",0]],["translatorbuilder",3]],null,null,null,null,null,null,null,[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["utf8sequence",4]],[[["",0]],["utf8range",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["utf8sequence",4]],["ordering",4]],[[["",0],["utf8range",3]],["ordering",4]],null,[[["",0],["utf8sequence",4]],["bool",0]],[[["",0],["utf8range",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["usize",0]],[[["",0]],["bool",0]],[[["",0],["u8",0]],["bool",0]],[[["",0],["utf8sequence",4]],["bool",0]],[[["",0],["utf8range",3]],["bool",0]],[[["char",0],["char",0]]],[[["",0]],["option",4]],[[["",0],["utf8sequence",4]],["option",4,[["ordering",4]]]],[[["",0],["utf8range",3]],["option",4,[["ordering",4]]]],[[["",0]]],null,[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null],"p":[[4,"Error"],[3,"ParserBuilder"],[3,"Parser"],[3,"UnicodeWordError"],[13,"Parse"],[13,"Translate"],[4,"ClassAsciiKind"],[4,"Ast"],[4,"ClassSetItem"],[4,"RepetitionRange"],[4,"SpecialLiteralKind"],[4,"ClassSet"],[4,"Class"],[4,"GroupKind"],[4,"ErrorKind"],[4,"Flag"],[4,"ClassUnicodeOpKind"],[4,"ClassSetBinaryOpKind"],[4,"ClassPerlKind"],[4,"AssertionKind"],[8,"Visitor"],[4,"FlagsItemKind"],[4,"LiteralKind"],[4,"ClassUnicodeKind"],[4,"RepetitionKind"],[4,"HexLiteralKind"],[3,"Flags"],[3,"WithComments"],[3,"Repetition"],[3,"Group"],[3,"Alternation"],[3,"Concat"],[3,"Error"],[3,"Span"],[3,"Position"],[3,"Comment"],[3,"Literal"],[3,"ClassPerl"],[3,"ClassAscii"],[3,"ClassUnicode"],[3,"ClassBracketed"],[3,"ClassSetRange"],[3,"ClassSetUnion"],[3,"ClassSetBinaryOp"],[3,"Assertion"],[3,"RepetitionOp"],[3,"CaptureName"],[3,"SetFlags"],[3,"FlagsItem"],[13,"Empty"],[13,"Flags"],[13,"Literal"],[13,"Dot"],[13,"Assertion"],[13,"Class"],[13,"Repetition"],[13,"Group"],[13,"Alternation"],[13,"Concat"],[13,"Unicode"],[13,"Perl"],[13,"Bracketed"],[13,"Item"],[13,"BinaryOp"],[13,"Empty"],[13,"Literal"],[13,"Range"],[13,"Ascii"],[13,"Unicode"],[13,"Perl"],[13,"Bracketed"],[13,"Union"],[13,"OneLetter"],[13,"Named"],[13,"NamedValue"],[13,"NestLimitExceeded"],[13,"FlagDuplicate"],[13,"FlagRepeatedNegation"],[13,"GroupNameDuplicate"],[13,"Flag"],[13,"CaptureIndex"],[13,"CaptureName"],[13,"NonCapturing"],[13,"HexFixed"],[13,"HexBrace"],[13,"Special"],[13,"Range"],[13,"Exactly"],[13,"AtLeast"],[13,"Bounded"],[3,"ParserBuilder"],[3,"Parser"],[3,"Printer"],[4,"HirKind"],[4,"WordBoundary"],[4,"RepetitionRange"],[4,"Literal"],[4,"Class"],[4,"GroupKind"],[4,"ErrorKind"],[4,"Anchor"],[8,"Visitor"],[4,"RepetitionKind"],[3,"Hir"],[3,"Error"],[3,"ClassUnicode"],[3,"ClassUnicodeIter"],[3,"ClassUnicodeRange"],[3,"ClassBytes"],[3,"ClassBytesIter"],[3,"ClassBytesRange"],[3,"Group"],[3,"Repetition"],[3,"CaseFoldError"],[13,"Unicode"],[13,"Bytes"],[13,"CaptureIndex"],[13,"CaptureName"],[13,"Literal"],[13,"Class"],[13,"Anchor"],[13,"WordBoundary"],[13,"Repetition"],[13,"Group"],[13,"Concat"],[13,"Alternation"],[13,"Unicode"],[13,"Byte"],[13,"Range"],[13,"Exactly"],[13,"AtLeast"],[13,"Bounded"],[3,"Literals"],[3,"Literal"],[3,"Printer"],[3,"TranslatorBuilder"],[3,"Translator"],[4,"Utf8Sequence"],[3,"Utf8Range"],[3,"Utf8Sequences"],[13,"One"],[13,"Two"],[13,"Three"],[13,"Four"]]},\
"rust2":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"rustc_serialize":{"doc":"Support code for encoding and decoding types.","t":[8,8,8,8,8,8,16,16,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,13,4,3,8,4,13,13,13,7,4,7,13,8,7,13,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,12,12,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,8,4,13,13,8,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,12,12,13,6,13,13,13,3,3,13,13,13,3,6,13,6,3,4,13,13,13,13,13,6,3,4,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,4,4,13,13,13,13,13,13,13,13,6,13,13,13,13,3,4,3,3,4,13,13,13,8,13,13,13,13,13,13,13,11,11,11,11,11,5,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],"n":["Decodable","Decoder","DecoderHelpers","Encodable","Encoder","EncoderHelpers","Error","Error","base64","decode","emit_bool","emit_char","emit_enum","emit_enum_struct_variant","emit_enum_struct_variant_field","emit_enum_variant","emit_enum_variant_arg","emit_f32","emit_f64","emit_from_vec","emit_i16","emit_i32","emit_i64","emit_i8","emit_isize","emit_map","emit_map_elt_key","emit_map_elt_val","emit_nil","emit_option","emit_option_none","emit_option_some","emit_seq","emit_seq_elt","emit_str","emit_struct","emit_struct_field","emit_tuple","emit_tuple_arg","emit_tuple_struct","emit_tuple_struct_arg","emit_u16","emit_u32","emit_u64","emit_u8","emit_usize","encode","error","hex","json","read_bool","read_char","read_enum","read_enum_struct_variant","read_enum_struct_variant_field","read_enum_variant","read_enum_variant_arg","read_f32","read_f64","read_i16","read_i32","read_i64","read_i8","read_isize","read_map","read_map_elt_key","read_map_elt_val","read_nil","read_option","read_seq","read_seq_elt","read_str","read_struct","read_struct_field","read_to_vec","read_tuple","read_tuple_arg","read_tuple_struct","read_tuple_struct_arg","read_u16","read_u32","read_u64","read_u8","read_usize","CRLF","CharacterSet","Config","FromBase64","FromBase64Error","InvalidBase64Byte","InvalidBase64Length","LF","MIME","Newline","STANDARD","Standard","ToBase64","URL_SAFE","UrlSafe","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","char_set","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","description","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_base64","into","into","into","into","line_length","newline","pad","to_base64","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0","1","FromHex","FromHexError","InvalidHexCharacter","InvalidHexLength","ToHex","borrow","borrow_mut","clone","clone_into","description","fmt","fmt","from","from_hex","into","to_hex","to_owned","to_string","try_from","try_into","type_id","0","1","ApplicationError","Array","Array","ArrayEnd","ArrayStart","AsJson","AsPrettyJson","BadHashmapKey","Boolean","BooleanValue","Builder","BuilderError","ControlCharacterInString","DecodeResult","Decoder","DecoderError","EOF","EOFWhileParsingArray","EOFWhileParsingObject","EOFWhileParsingString","EOFWhileParsingValue","EncodeResult","Encoder","EncoderError","Error","ErrorCode","ExpectedColon","ExpectedError","F64","F64Value","FmtError","I64","I64Value","Index","InvalidEscape","InvalidNumber","InvalidSyntax","InvalidUnicodeCodePoint","IoError","Json","JsonEvent","Key","KeyMustBeAString","LoneLeadingSurrogateInHexEscape","MissingFieldError","NotFourDigit","NotUtf8","Null","NullValue","Object","Object","ObjectEnd","ObjectStart","ParseError","Parser","ParserError","PrettyJson","Stack","StackElement","String","StringValue","SyntaxError","ToJson","TrailingCharacters","TrailingComma","U64","U64Value","UnexpectedEndOfHexEscape","UnknownVariantError","UnrecognizedHex","as_array","as_array_mut","as_boolean","as_f64","as_i64","as_json","as_null","as_object","as_object_mut","as_pretty_json","as_string","as_u64","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","cause","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","decode","description","description","description","emit_bool","emit_char","emit_enum","emit_enum_struct_variant","emit_enum_struct_variant_field","emit_enum_variant","emit_enum_variant_arg","emit_f32","emit_f64","emit_i16","emit_i32","emit_i64","emit_i8","emit_isize","emit_map","emit_map_elt_key","emit_map_elt_val","emit_nil","emit_option","emit_option_none","emit_option_some","emit_seq","emit_seq_elt","emit_str","emit_struct","emit_struct_field","emit_tuple","emit_tuple_arg","emit_tuple_struct","emit_tuple_struct_arg","emit_u16","emit_u32","emit_u64","emit_u8","emit_usize","encode","encode","ends_with","eq","eq","eq","eq","eq","eq","eq","error","error_str","find","find_path","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_reader","from_str","from_str","get","indent","index","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_array","into_iter","into_object","is_array","is_boolean","is_empty","is_equal_to","is_f64","is_i64","is_null","is_number","is_object","is_string","is_u64","len","ne","ne","ne","ne","new","new","new","new","new","new_pretty","next","partial_cmp","pretty","read_bool","read_char","read_enum","read_enum_struct_variant","read_enum_struct_variant_field","read_enum_variant","read_enum_variant_arg","read_f32","read_f64","read_i16","read_i32","read_i64","read_i8","read_isize","read_map","read_map_elt_key","read_map_elt_val","read_nil","read_option","read_seq","read_seq_elt","read_str","read_struct","read_struct_field","read_tuple","read_tuple_arg","read_tuple_struct","read_tuple_struct_arg","read_u16","read_u32","read_u64","read_u8","read_usize","search","set_indent","stack","starts_with","to_json","to_json","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","top","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","2","0","0"],"q":["rustc_serialize","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustc_serialize::base64","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustc_serialize::base64::FromBase64Error","","rustc_serialize::hex","","","","","","","","","","","","","","","","","","","","","rustc_serialize::hex::FromHexError","","rustc_serialize::jsonrustc_serialize::json::DecoderError","","","","","","rustc_serialize::json::EncoderError","rustc_serialize::json::Json","","","","","","","rustc_serialize::json::JsonEvent","","","","","","rustc_serialize::json::ParserError","","","","rustc_serialize::json::StackElement",""],"d":["Trait for deserializing a type.","Trait for reading in an encoding for deserialization.","Trait with helper functions for implementing <code>Decodable</code>.","Trait for serializing a type.","Trait for writing out an encoding when serializing.","Trait with helper functions for implementing <code>Encodable</code>.","The error type for method results.","The error type for method results.","Base64 binary-to-text encoding","Deserialize a value using a <code>Decoder</code>.","Emit a bool value.","Emit a char value.","Emit an enumeration value.","Emit a enumeration variant value with no or named data.","Emit a named data item for an enumeration variant.","Emit a enumeration variant value with no or unnamed data.","Emit an unnamed data item for an enumeration variant.","Emit a f32 value.","Emit a f64 value.","Emit a vector as a sequence.","Emit a i16 value.","Emit a i32 value.","Emit a i64 value.","Emit a i8 value.","Emit a isize value.","Emit an associative container (map).","Emit the key for an entry in a map.","Emit the value for an entry in a map.","Emit a nil value.","Emit an optional value.","Emit the <code>None</code> optional value.","Emit the <code>Some(x)</code> optional value.","Emit a sequence of values.","Emit an element in a sequence.","Emit a string value.","Emit a struct value.","Emit a field item for a struct.","Emit a tuple value.","Emit a data item for a tuple.","Emit a tuple struct value.","Emit a data item for a tuple struct.","Emit a u16 value.","Emit a u32 value.","Emit a u64 value.","Emit a u8 value.","Emit a usize value.","Serialize a value using an <code>Encoder</code>.","Record a decoding error.","Hex binary-to-text encoding","JSON parsing and serialization","Read a bool value.","Read a char value.","Read an enumeration value.","Read an enumeration value.","Read a named data item for an enumeration variant.","Read an enumeration value.","Read an unnamed data item for an enumeration variant.","Read a f32 value.","Read a f64 value.","Read a i16 value.","Read a i32 value.","Read a i64 value.","Read a i8 value.","Read a isize value.","Read an associative container (map).","Read the key for an entry in a map.","Read the value for an entry in a map.","Read a nil value.","Read an optional value.","Read a sequence of values.","Read an element in the sequence.","Read a string value.","Read an struct value.","Read a field for a struct value.","Read a sequence into a vector.","Read a tuple value.","Read a data item for a tuple.","Read a tuple struct value.","Read a data item for a tuple struct.","Read a u16 value.","Read a u32 value.","Read a u64 value.","Read a u8 value.","Read a usize value.","A carriage return and a linefeed (i.e. Windows-style …","Available encoding character sets","Contains configuration parameters for <code>to_base64</code>.","A trait for converting from base64 encoded values.","Errors that can occur when decoding a base64 encoded string","The input contained a character not part of the base64 …","The input had an invalid length","A linefeed (i.e. Unix-style newline)","Configuration for RFC 2045 MIME base64 encoding","Available newline types","Configuration for RFC 4648 standard base64 encoding","The standard character set (uses <code>+</code> and <code>/</code>)","A trait for converting a value to base64 encoding.","Configuration for RFC 4648 base64url encoding","The URL safe character set (uses <code>-</code> and <code>_</code>)","","","","","","","","","Character set to use","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts the value of <code>self</code>, interpreted as base64 encoded …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<code>Some(len)</code> to wrap lines at <code>len</code>, <code>None</code> to disable line …","Newline to use","True to pad output with <code>=</code> characters","Converts the value of <code>self</code> to a base64 value following the …","","","","","","","","","","","","","","","","","","","","A trait for converting hexadecimal encoded values","Errors that can occur when decoding a hex encoded string","The input contained a character not part of the hex format","The input had an invalid length","A trait for converting a value to hexadecimal encoding","","","","","","","","Returns the argument unchanged.","Converts the value of <code>self</code>, interpreted as hexadecimal …","Calls <code>U::from(self)</code>.","Converts the value of <code>self</code> to a hex value, returning the …","","","","","","","","","","","","","","","","","","A Builder consumes a json::Parser to create a generic Json …","","","","A structure to decode JSON to values in rust.","","","","","","","","A structure for implementing serialization to JSON.","","","The errors that can arise while parsing a JSON stream.","","","","","","","","","","","","","","Represents a json value","The output of the streaming parser.","","","","","","","","","","","","","","A streaming JSON parser implemented as an iterator of …","","","A Stack represents the current position of the parser in …","StackElements compose a Stack. For example, Key(“foo”…","","","msg, line, col","A trait for converting values to JSON","","","","","","","","If the Json value is an Array, returns a reference to the …","If the Json value is an Array, returns a mutable reference …","If the Json value is a Boolean, returns the associated …","If the Json value is a number, return or cast it to a f64. …","If the Json value is a number, return or cast it to a i64. …","Create an <code>AsJson</code> wrapper which can be used to print a …","If the Json value is a Null, returns (). Returns None …","If the Json value is an Object, returns a reference to the …","If the Json value is an Object, returns a mutable …","Create an <code>AsPrettyJson</code> wrapper which can be used to print …","If the Json value is a String, returns the associated str. …","If the Json value is a number, return or cast it to a u64. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Shortcut function to decode a JSON <code>&amp;str</code> into an object","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Shortcut function to encode a <code>T</code> into a JSON <code>String</code>","","Returns true if the top-most elements of this stack are …","","","","","","","","","Returns a readable error string for a given error code.","If the Json value is an Object, returns the value …","Attempts to get a nested Json Object for each key in <code>keys</code>. …","Encodes a json value into a string","Encodes a json value into a string","Encodes a json value into a string","Encodes a json value into a string","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Decodes a json value from an <code>&amp;mut io::Read</code>","Decodes a json value from a string","","Provides access to the StackElement at a given index. …","Set the indentation level for the emitted JSON","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If the Json value is an Array, returns the associated …","","If the Json value is an Object, returns the associated …","Returns true if the Json value is an Array. Returns false …","Returns true if the Json value is a Boolean. Returns false …","Returns true if the stack is empty.","Compares this stack with an array of StackElements.","Returns true if the Json value is a f64. Returns false …","Returns true if the Json value is a i64. Returns false …","Returns true if the Json value is a Null. Returns false …","Returns true if the Json value is a Number. Returns false …","Returns true if the Json value is an Object. Returns false …","Returns true if the Json value is a String. Returns false …","Returns true if the Json value is a u64. Returns false …","Returns The number of elements in the Stack.","","","","","Creates a new encoder whose output will be written in …","","Creates the JSON parser.","Create a JSON Builder.","Creates a new decoder instance for decoding the specified …","Creates a new encoder whose output will be written in …","","","Borrow this json object as a pretty object to generate a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If the Json value is an Object, performs a depth-first …","Set the number of spaces to indent for each level. This is …","Provides access to the current position in the logical …","Returns true if the bottom-most elements of this stack are …","Converts the value of <code>self</code> to an instance of JSON","","","","","","","","","","","","","Returns the top-most element (if any).","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,1,2,0,3,1,1,1,1,1,1,1,1,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,2,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6,2,2,2,2,2,2,2,2,2,7,0,0,0,0,8,8,7,0,0,0,9,0,0,9,9,7,10,8,9,7,10,8,10,9,7,10,8,9,7,10,8,8,9,7,10,8,8,9,7,10,8,11,9,7,10,8,10,10,10,12,9,7,10,8,8,9,7,10,8,9,7,10,8,9,7,10,8,13,13,0,0,14,14,0,14,14,14,14,14,14,14,14,15,14,16,14,14,14,14,14,17,17,18,0,19,20,20,0,0,21,19,20,0,0,22,0,0,0,18,22,22,22,22,0,0,0,20,0,22,18,19,20,21,19,20,23,22,22,22,22,24,0,0,23,22,22,18,22,22,19,20,0,19,20,20,18,0,0,0,0,0,19,20,24,0,22,22,19,20,22,18,22,19,19,19,19,19,0,19,19,19,0,19,19,25,26,27,28,29,30,31,32,19,22,24,18,21,20,23,25,26,27,28,29,30,31,32,19,22,24,18,21,20,23,31,18,19,22,21,23,19,22,21,23,0,24,18,21,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,0,19,29,19,22,24,18,21,20,23,32,0,19,19,25,26,27,19,19,22,24,24,18,18,21,21,20,23,25,26,27,28,29,30,31,32,19,22,24,24,18,18,21,21,20,23,19,19,19,29,27,19,19,25,26,27,28,29,30,31,32,19,22,24,18,21,20,23,19,30,19,19,19,29,29,19,19,19,19,19,19,19,29,19,18,20,23,28,29,30,31,32,28,30,19,19,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,19,28,30,29,33,19,19,22,21,23,25,26,27,19,24,18,21,29,25,26,27,28,29,30,31,32,19,22,24,18,21,20,23,25,26,27,28,29,30,31,32,19,22,24,18,21,20,23,25,26,27,28,29,30,31,32,19,22,24,18,21,20,23,34,35,36,37,38,35,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,53,53,55,56],"f":[null,null,null,null,null,null,null,null,null,[[["",0]],["result",4]],[[["",0],["bool",0]],["result",4]],[[["",0],["char",0]],["result",4]],[[["",0],["str",0]],["result",4]],[[["",0],["str",0],["usize",0],["usize",0]],["result",4]],[[["",0],["str",0],["usize",0]],["result",4]],[[["",0],["str",0],["usize",0],["usize",0]],["result",4]],[[["",0],["usize",0]],["result",4]],[[["",0],["f32",0]],["result",4]],[[["",0],["f64",0]],["result",4]],[[["",0]],["result",4]],[[["",0],["i16",0]],["result",4]],[[["",0],["i32",0]],["result",4]],[[["",0],["i64",0]],["result",4]],[[["",0],["i8",0]],["result",4]],[[["",0],["isize",0]],["result",4]],[[["",0],["usize",0]],["result",4]],[[["",0],["usize",0]],["result",4]],[[["",0],["usize",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0],["usize",0]],["result",4]],[[["",0],["usize",0]],["result",4]],[[["",0],["str",0]],["result",4]],[[["",0],["str",0],["usize",0]],["result",4]],[[["",0],["str",0],["usize",0]],["result",4]],[[["",0],["usize",0]],["result",4]],[[["",0],["usize",0]],["result",4]],[[["",0],["str",0],["usize",0]],["result",4]],[[["",0],["usize",0]],["result",4]],[[["",0],["u16",0]],["result",4]],[[["",0],["u32",0]],["result",4]],[[["",0],["u64",0]],["result",4]],[[["",0],["u8",0]],["result",4]],[[["",0],["usize",0]],["result",4]],[[["",0],["",0]],["result",4]],[[["",0],["str",0]]],null,null,[[["",0]],["result",4,[["bool",0]]]],[[["",0]],["result",4,[["char",0]]]],[[["",0],["str",0]],["result",4]],[[["",0]],["result",4]],[[["",0],["str",0],["usize",0]],["result",4]],[[["",0]],["result",4]],[[["",0],["usize",0]],["result",4]],[[["",0]],["result",4,[["f32",0]]]],[[["",0]],["result",4,[["f64",0]]]],[[["",0]],["result",4,[["i16",0]]]],[[["",0]],["result",4,[["i32",0]]]],[[["",0]],["result",4,[["i64",0]]]],[[["",0]],["result",4,[["i8",0]]]],[[["",0]],["result",4,[["isize",0]]]],[[["",0]],["result",4]],[[["",0],["usize",0]],["result",4]],[[["",0],["usize",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0],["usize",0]],["result",4]],[[["",0]],["result",4,[["string",3]]]],[[["",0],["str",0],["usize",0]],["result",4]],[[["",0],["str",0],["usize",0]],["result",4]],[[["",0]],["result",4,[["vec",3]]]],[[["",0],["usize",0]],["result",4]],[[["",0],["usize",0]],["result",4]],[[["",0],["str",0],["usize",0]],["result",4]],[[["",0],["usize",0]],["result",4]],[[["",0]],["result",4,[["u16",0]]]],[[["",0]],["result",4,[["u32",0]]]],[[["",0]],["result",4,[["u64",0]]]],[[["",0]],["result",4,[["u8",0]]]],[[["",0]],["result",4,[["usize",0]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["characterset",4]],[[["",0]],["newline",4]],[[["",0]],["config",3]],[[["",0]],["frombase64error",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]],["str",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["",0]],["result",4,[["vec",3,[["u8",0]]],["frombase64error",4]]]],[[]],[[]],[[]],[[]],null,null,null,[[["",0],["config",3]],["string",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["fromhexerror",4]],[[["",0],["",0]]],[[["",0]],["str",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["",0]],["result",4,[["vec",3,[["u8",0]]],["fromhexerror",4]]]],[[]],[[["",0]],["string",3]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["option",4,[["array",6]]]],[[["",0]],["option",4,[["array",6]]]],[[["",0]],["option",4,[["bool",0]]]],[[["",0]],["option",4,[["f64",0]]]],[[["",0]],["option",4,[["i64",0]]]],[[["",0]],["asjson",3,[["encodable",8]]]],[[["",0]],["option",4]],[[["",0]],["option",4,[["object",6]]]],[[["",0]],["option",4,[["object",6]]]],[[["",0]],["asprettyjson",3,[["encodable",8]]]],[[["",0]],["option",4,[["str",0]]]],[[["",0]],["option",4,[["u64",0]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["result",4,[["json",4],["buildererror",6]]]],[[["",0]],["option",4,[["stderror",8]]]],[[["",0]],["json",4]],[[["",0]],["errorcode",4]],[[["",0]]],[[["",0]],["stackelement",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["str",0]],["decoderesult",6,[["decodable",8]]]],[[["",0]],["str",0]],[[["",0]],["str",0]],[[["",0]],["str",0]],[[["",0],["bool",0]],["encoderesult",6]],[[["",0],["char",0]],["encoderesult",6]],[[["",0],["str",0]],["encoderesult",6]],[[["",0],["str",0],["usize",0],["usize",0]],["encoderesult",6]],[[["",0],["str",0],["usize",0]],["encoderesult",6]],[[["",0],["str",0],["usize",0],["usize",0]],["encoderesult",6]],[[["",0],["usize",0]],["encoderesult",6]],[[["",0],["f32",0]],["encoderesult",6]],[[["",0],["f64",0]],["encoderesult",6]],[[["",0],["i16",0]],["encoderesult",6]],[[["",0],["i32",0]],["encoderesult",6]],[[["",0],["i64",0]],["encoderesult",6]],[[["",0],["i8",0]],["encoderesult",6]],[[["",0],["isize",0]],["encoderesult",6]],[[["",0],["usize",0]],["encoderesult",6]],[[["",0],["usize",0]],["encoderesult",6]],[[["",0],["usize",0]],["encoderesult",6]],[[["",0]],["encoderesult",6]],[[["",0]],["encoderesult",6]],[[["",0]],["encoderesult",6]],[[["",0]],["encoderesult",6]],[[["",0],["usize",0]],["encoderesult",6]],[[["",0],["usize",0]],["encoderesult",6]],[[["",0],["str",0]],["encoderesult",6]],[[["",0],["str",0],["usize",0]],["encoderesult",6]],[[["",0],["str",0],["usize",0]],["encoderesult",6]],[[["",0],["usize",0]],["encoderesult",6]],[[["",0],["usize",0]],["encoderesult",6]],[[["",0],["str",0],["usize",0]],["encoderesult",6]],[[["",0],["usize",0]],["encoderesult",6]],[[["",0],["u16",0]],["encoderesult",6]],[[["",0],["u32",0]],["encoderesult",6]],[[["",0],["u64",0]],["encoderesult",6]],[[["",0],["u8",0]],["encoderesult",6]],[[["",0],["usize",0]],["encoderesult",6]],[[["",0]],["encoderesult",6,[["string",3]]]],[[["",0],["",0]],["result",4]],[[["",0]],["bool",0]],[[["",0],["json",4]],["bool",0]],[[["",0],["errorcode",4]],["bool",0]],[[["",0],["parsererror",4]],["bool",0]],[[["",0],["decodererror",4]],["bool",0]],[[["",0],["encodererror",4]],["bool",0]],[[["",0],["jsonevent",4]],["bool",0]],[[["",0],["stackelement",4]],["bool",0]],[[["",0],["str",0]],["decodererror",4]],[[["errorcode",4]],["str",0]],[[["",0],["str",0]],["option",4,[["json",4]]]],[[["",0]],["option",4,[["json",4]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["error",3]],["parsererror",4]],[[]],[[]],[[["parsererror",4]],["decodererror",4]],[[["error",3]],["encodererror",4]],[[]],[[]],[[]],[[["read",8]],["result",4,[["buildererror",6]]]],[[["str",0]],["result",4,[["buildererror",6]]]],[[["str",0]],["result",4,[["json",4],["parsererror",4]]]],[[["",0],["usize",0]],["stackelement",4]],[[["u32",0]],["asprettyjson",3]],[[["",0],["str",0]],["json",4]],[[["",0],["usize",0]],["json",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4,[["array",6]]]],[[]],[[],["option",4,[["object",6]]]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["usize",0]],[[["",0],["json",4]],["bool",0]],[[["",0],["decodererror",4]],["bool",0]],[[["",0],["jsonevent",4]],["bool",0]],[[["",0],["stackelement",4]],["bool",0]],[[["write",8]],["encoder",3]],[[],["stack",3]],[[],["parser",3]],[[],["builder",3]],[[["json",4]],["decoder",3]],[[["write",8]],["encoder",3]],[[["",0]],["option",4,[["jsonevent",4]]]],[[["",0],["json",4]],["option",4,[["ordering",4]]]],[[["",0]],["prettyjson",3]],[[["",0]],["decoderesult",6,[["bool",0]]]],[[["",0]],["decoderesult",6,[["char",0]]]],[[["",0],["str",0]],["decoderesult",6]],[[["",0]],["decoderesult",6]],[[["",0],["str",0],["usize",0]],["decoderesult",6]],[[["",0]],["decoderesult",6]],[[["",0],["usize",0]],["decoderesult",6]],[[["",0]],["decoderesult",6,[["f32",0]]]],[[["",0]],["decoderesult",6,[["f64",0]]]],[[["",0]],["decoderesult",6,[["i16",0]]]],[[["",0]],["decoderesult",6,[["i32",0]]]],[[["",0]],["decoderesult",6,[["i64",0]]]],[[["",0]],["decoderesult",6,[["i8",0]]]],[[["",0]],["decoderesult",6,[["isize",0]]]],[[["",0]],["decoderesult",6]],[[["",0],["usize",0]],["decoderesult",6]],[[["",0],["usize",0]],["decoderesult",6]],[[["",0]],["decoderesult",6]],[[["",0]],["decoderesult",6]],[[["",0]],["decoderesult",6]],[[["",0],["usize",0]],["decoderesult",6]],[[["",0]],["decoderesult",6,[["string",3]]]],[[["",0],["str",0],["usize",0]],["decoderesult",6]],[[["",0],["str",0],["usize",0]],["decoderesult",6]],[[["",0],["usize",0]],["decoderesult",6]],[[["",0],["usize",0]],["decoderesult",6]],[[["",0],["str",0],["usize",0]],["decoderesult",6]],[[["",0],["usize",0]],["decoderesult",6]],[[["",0]],["decoderesult",6,[["u16",0]]]],[[["",0]],["decoderesult",6,[["u32",0]]]],[[["",0]],["decoderesult",6,[["u64",0]]]],[[["",0]],["decoderesult",6,[["u8",0]]]],[[["",0]],["decoderesult",6,[["usize",0]]]],[[["",0],["str",0]],["option",4,[["json",4]]]],[[["",0],["u32",0]],["result",4]],[[["",0]],["stack",3]],[[["",0]],["bool",0]],[[["",0]],["json",4]],[[["",0]],["json",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["option",4,[["stackelement",4]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[[8,"Encoder"],[8,"Decoder"],[8,"Decodable"],[8,"EncoderHelpers"],[8,"Encodable"],[8,"DecoderHelpers"],[4,"Newline"],[4,"FromBase64Error"],[4,"CharacterSet"],[3,"Config"],[8,"FromBase64"],[8,"ToBase64"],[13,"InvalidBase64Byte"],[4,"FromHexError"],[8,"FromHex"],[8,"ToHex"],[13,"InvalidHexCharacter"],[4,"DecoderError"],[4,"Json"],[4,"JsonEvent"],[4,"EncoderError"],[4,"ErrorCode"],[4,"StackElement"],[4,"ParserError"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[8,"ToJson"],[13,"ParseError"],[13,"ExpectedError"],[13,"MissingFieldError"],[13,"UnknownVariantError"],[13,"ApplicationError"],[13,"FmtError"],[13,"I64"],[13,"U64"],[13,"F64"],[13,"String"],[13,"Boolean"],[13,"Array"],[13,"Object"],[13,"BooleanValue"],[13,"I64Value"],[13,"U64Value"],[13,"F64Value"],[13,"StringValue"],[13,"Error"],[13,"SyntaxError"],[13,"IoError"],[13,"Index"],[13,"Key"]]},\
"ryu":{"doc":"github crates-io docs-rs","t":[3,8,11,11,11,11,11,11,11,11,11,0,11,11,11,5,5],"n":["Buffer","Float","borrow","borrow_mut","clone","default","format","format_finite","from","into","new","raw","try_from","try_into","type_id","format32","format64"],"q":["ryu","","","","","","","","","","","","","","","ryu::raw",""],"d":["Safe API for formatting floating point numbers to text.","A floating point number, f32 or f64, that can be written …","","","","","Print a floating point number into this buffer and return …","Print a floating point number into this buffer and return …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","This is a cheap operation; you don’t need to worry about …","Unsafe functions that mirror the API of the C …","","","","Print f32 to the given buffer and return number of bytes …","Print f64 to the given buffer and return number of bytes …"],"i":[0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0],"f":[null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[]],[[["",0],["float",8]],["str",0]],[[["",0],["float",8]],["str",0]],[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["f32",0]],["usize",0]],[[["f64",0]],["usize",0]]],"p":[[3,"Buffer"]]},\
"same_file":{"doc":"This crate provides a safe and simple <strong>cross platform</strong> way …","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11],"n":["Handle","as_file","as_file_mut","as_raw_fd","borrow","borrow_mut","dev","eq","fmt","from","from_file","from_path","hash","ino","into","into_raw_fd","is_same_file","ne","stderr","stdin","stdout","try_from","try_into","type_id"],"q":["same_file","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A handle to a file that can be tested for equality with …","Return a reference to the underlying file.","Return a mutable reference to the underlying file.","","","","Return the underlying device number of this handle.","","","Returns the argument unchanged.","Construct a handle from a file.","Construct a handle from a path.","","Return the underlying inode number of this handle.","Calls <code>U::from(self)</code>.","","Returns true if the two file paths may correspond to the …","","Construct a handle from stderr.","Construct a handle from stdin.","Construct a handle from stdout.","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1],"f":[null,[[["",0]],["file",3]],[[["",0]],["file",3]],[[["",0]],["rawfd",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["u64",0]],[[["",0],["handle",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[["file",3]],["result",6,[["handle",3]]]],[[["asref",8,[["path",3]]]],["result",6,[["handle",3]]]],[[["",0],["",0]]],[[["",0]],["u64",0]],[[]],[[],["rawfd",6]],[[],["result",6,[["bool",0]]]],[[["",0],["handle",3]],["bool",0]],[[],["result",6,[["handle",3]]]],[[],["result",6,[["handle",3]]]],[[],["result",6,[["handle",3]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[3,"Handle"]]},\
"scopeguard":{"doc":"A scope guard will run a given closure when it goes out of …","t":[4,3,8,11,11,11,11,14,11,11,11,11,11,11,11,5,11,11,11,10,11,11,11,11,11,11,11,11],"n":["Always","ScopeGuard","Strategy","borrow","borrow","borrow_mut","borrow_mut","defer","deref","deref_mut","drop","fmt","fmt","from","from","guard","into","into","into_inner","should_run","should_run","try_from","try_from","try_into","try_into","type_id","type_id","with_strategy"],"q":["scopeguard","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Always run on scope exit.","<code>ScopeGuard</code> is a scope guard that may own a protected value.","Controls in which cases the associated code should be run","","","","","Macro to create a <code>ScopeGuard</code> (always run).","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Create a new <code>ScopeGuard</code> owning <code>v</code> and with deferred closure …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","“Defuse” the guard and extract the value without …","Return <code>true</code> if the guard’s associated code should run …","","","","","","","","Create a <code>ScopeGuard</code> that owns <code>v</code> (accessible through deref) …"],"i":[0,0,0,1,2,1,2,0,1,1,1,1,2,1,2,0,1,2,1,3,2,1,2,1,2,1,2,1],"f":[null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[],["scopeguard",3,[["always",4]]]],[[]],[[]],[[]],[[],["bool",0]],[[],["bool",0]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["scopeguard",3]]],"p":[[3,"ScopeGuard"],[4,"Always"],[8,"Strategy"]]},\
"serde":{"doc":"Serde","t":[8,8,16,16,16,8,16,16,16,16,16,16,16,8,11,11,11,0,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,14,11,11,0,14,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,13,13,13,8,8,8,8,16,13,8,8,16,16,16,16,16,8,13,3,8,13,8,13,13,13,13,13,8,13,2,13,13,13,4,13,13,13,16,16,16,8,8,11,11,11,11,11,11,11,11,10,11,10,10,11,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,11,11,10,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,10,11,11,11,10,11,10,11,11,10,11,11,11,11,11,11,11,10,11,11,10,11,11,0,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,16,16,16,16,16,16,16,16,3,16,16,16,16,16,16,16,16,8,8,16,8,16,8,16,8,16,8,16,8,16,8,16,8,2,11,11,11,11,11,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,11,11,11,10,10,10,10,10,10,11,11,11,11,11,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,11,11,11,11,11,11],"n":["Deserialize","Deserializer","Error","Error","Ok","Serialize","SerializeMap","SerializeSeq","SerializeStruct","SerializeStructVariant","SerializeTuple","SerializeTupleStruct","SerializeTupleVariant","Serializer","collect_map","collect_seq","collect_str","de","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","forward_to_deserialize_any","is_human_readable","is_human_readable","ser","serde_if_integer128","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","Bool","Bytes","Char","Deserialize","DeserializeOwned","DeserializeSeed","Deserializer","Deserializer","Enum","EnumAccess","Error","Error","Error","Error","Error","Error","Expected","Float","IgnoredAny","IntoDeserializer","Map","MapAccess","NewtypeStruct","NewtypeVariant","Option","Other","Seq","SeqAccess","Signed","StdError","Str","StructVariant","TupleVariant","Unexpected","Unit","UnitVariant","Unsigned","Value","Value","Variant","VariantAccess","Visitor","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","custom","default","deserialize","deserialize","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","duplicate_field","eq","expecting","expecting","fmt","fmt","fmt","fmt","fmt","fmt","from","from","into","into","into_deserializer","invalid_length","invalid_type","invalid_value","is_human_readable","missing_field","ne","newtype_variant","newtype_variant_seed","next_element","next_element_seed","next_entry","next_entry_seed","next_key","next_key_seed","next_value","next_value_seed","size_hint","size_hint","struct_variant","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","tuple_variant","type_id","type_id","unit_variant","unknown_field","unknown_variant","value","variant","variant_seed","visit_bool","visit_bool","visit_borrowed_bytes","visit_borrowed_str","visit_byte_buf","visit_bytes","visit_bytes","visit_char","visit_enum","visit_enum","visit_f32","visit_f64","visit_f64","visit_i128","visit_i128","visit_i16","visit_i32","visit_i64","visit_i64","visit_i8","visit_map","visit_map","visit_newtype_struct","visit_newtype_struct","visit_none","visit_none","visit_seq","visit_seq","visit_some","visit_some","visit_str","visit_str","visit_string","visit_u128","visit_u128","visit_u16","visit_u32","visit_u64","visit_u64","visit_u8","visit_unit","visit_unit","0","0","0","0","0","0","0","0","BoolDeserializer","BorrowedBytesDeserializer","BorrowedStrDeserializer","BytesDeserializer","CharDeserializer","CowStrDeserializer","Error","F32Deserializer","F64Deserializer","I128Deserializer","I16Deserializer","I32Deserializer","I64Deserializer","I8Deserializer","IsizeDeserializer","MapAccessDeserializer","MapDeserializer","SeqAccessDeserializer","SeqDeserializer","StrDeserializer","StringDeserializer","U128Deserializer","U16Deserializer","U32Deserializer","U64Deserializer","U8Deserializer","UnitDeserializer","UsizeDeserializer","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","custom","custom","description","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","end","end","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","ne","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","next_element_seed","next_element_seed","next_entry_seed","next_key_seed","next_value_seed","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","variant_seed","variant_seed","variant_seed","variant_seed","variant_seed","variant_seed","Error","Error","Error","Error","Error","Error","Error","Error","Error","Impossible","Ok","Ok","Ok","Ok","Ok","Ok","Ok","Ok","Serialize","SerializeMap","SerializeMap","SerializeSeq","SerializeSeq","SerializeStruct","SerializeStruct","SerializeStructVariant","SerializeStructVariant","SerializeTuple","SerializeTuple","SerializeTupleStruct","SerializeTupleStruct","SerializeTupleVariant","SerializeTupleVariant","Serializer","StdError","borrow","borrow_mut","collect_map","collect_seq","collect_str","custom","end","end","end","end","end","end","end","end","end","end","end","end","end","end","from","into","is_human_readable","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_element","serialize_element","serialize_element","serialize_element","serialize_entry","serialize_f32","serialize_f64","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_key","serialize_key","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_value","serialize_value","skip_field","skip_field","try_from","try_into","type_id"],"q":["serde","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde::deserde::de::Unexpected","","","","","","","","serde::de::valueserde::ser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A <strong>data structure</strong> that can be deserialized from any data …","A <strong>data format</strong> that can deserialize any data structure …","The error type that can be returned if some error occurs …","The error type when some error occurs during serialization.","The output type produced by this <code>Serializer</code> during …","A <strong>data structure</strong> that can be serialized into any data …","Type returned from <code>serialize_map</code> for serializing the …","Type returned from <code>serialize_seq</code> for serializing the …","Type returned from <code>serialize_struct</code> for serializing the …","Type returned from <code>serialize_struct_variant</code> for …","Type returned from <code>serialize_tuple</code> for serializing the …","Type returned from <code>serialize_tuple_struct</code> for serializing …","Type returned from <code>serialize_tuple_variant</code> for serializing …","A <strong>data format</strong> that can serialize any data structure …","Collect an iterator as a map.","Collect an iterator as a sequence.","Serialize a string produced by an implementation of <code>Display</code>…","Generic data structure deserialization framework.","Deserialize this value from the given Serde deserializer.","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple struct …","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Helper macro when implementing the <code>Deserializer</code> part of a …","Determine whether <code>Deserialize</code> implementations should …","Determine whether <code>Serialize</code> implementations should …","Generic data structure serialization framework.","Conditional compilation depending on whether Serde is …","Serialize this value into the given Serde serializer.","Serialize a <code>bool</code> value.","Serialize a chunk of raw byte data.","Serialize a character.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize an <code>i128</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i8</code> value.","Begin to serialize a map. This call must be followed by …","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Serialize a <code>None</code> value.","Begin to serialize a variably sized sequence. This call …","Serialize a <code>Some(T)</code> value.","Serialize a <code>&amp;str</code>.","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Serialize a <code>u128</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData&lt;T&gt;</code>.","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","The input contained a boolean value that was not expected.","The input contained a <code>&amp;[u8]</code> or <code>Vec&lt;u8&gt;</code> that was not …","The input contained a <code>char</code> that was not expected.","A <strong>data structure</strong> that can be deserialized from any data …","A data structure that can be deserialized without …","<code>DeserializeSeed</code> is the stateful form of the <code>Deserialize</code> …","A <strong>data format</strong> that can deserialize any data structure …","The type of the deserializer being converted into.","The input contained an enum that was not expected.","Provides a <code>Visitor</code> access to the data of an enum in the …","The <code>Error</code> trait allows <code>Deserialize</code> implementations to …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","<code>Expected</code> represents an explanation of what data a <code>Visitor</code> …","The input contained a floating point <code>f32</code> or <code>f64</code> that was …","An efficient way of discarding data from a deserializer.","Converts an existing value into a <code>Deserializer</code> from which …","The input contained a map that was not expected.","Provides a <code>Visitor</code> access to each entry of a map in the …","The input contained a newtype struct that was not expected.","The input contained a newtype variant that was not …","The input contained an <code>Option&lt;T&gt;</code> that was not expected.","A message stating what uncategorized thing the input …","The input contained a sequence that was not expected.","Provides a <code>Visitor</code> access to each element of a sequence in …","The input contained a signed integer <code>i8</code>, <code>i16</code>, <code>i32</code> or <code>i64</code> …","","The input contained a <code>&amp;str</code> or <code>String</code> that was not expected.","The input contained a struct variant that was not expected.","The input contained a tuple variant that was not expected.","<code>Unexpected</code> represents an unexpected invocation of any one …","The input contained a unit <code>()</code> that was not expected.","The input contained a unit variant that was not expected.","The input contained an unsigned integer <code>u8</code>, <code>u16</code>, <code>u32</code> or <code>u64</code>…","The type produced by using this seed.","The value produced by this visitor.","The <code>Visitor</code> that will be used to deserialize the content …","<code>VariantAccess</code> is a visitor that is created by the …","This trait represents a visitor that walks through a …","","","","","","","","","Raised when there is general error when deserializing a …","","Deserialize this value from the given Serde deserializer.","Equivalent to the more common <code>Deserialize::deserialize</code> …","","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple struct …","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Raised when a <code>Deserialize</code> struct type received more than …","","Format a message stating what data this Visitor expects to …","","Format an explanation of what data was being expected. …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert this value into a deserializer.","Raised when deserializing a sequence or map and the input …","Raised when a <code>Deserialize</code> receives a type different from …","Raised when a <code>Deserialize</code> receives a value of the right …","Determine whether <code>Deserialize</code> implementations should …","Raised when a <code>Deserialize</code> struct type expected to receive …","","Called when deserializing a variant with a single value.","Called when deserializing a variant with a single value.","This returns <code>Ok(Some(value))</code> for the next value in the …","This returns <code>Ok(Some(value))</code> for the next value in the …","This returns <code>Ok(Some((key, value)))</code> for the next …","This returns <code>Ok(Some((key, value)))</code> for the next …","This returns <code>Ok(Some(key))</code> for the next key in the map, or …","This returns <code>Ok(Some(key))</code> for the next key in the map, or …","This returns a <code>Ok(value)</code> for the next value in the map.","This returns a <code>Ok(value)</code> for the next value in the map.","Returns the number of elements remaining in the sequence, …","Returns the number of entries remaining in the map, if …","Called when deserializing a struct-like variant.","","","","","","","","Called when deserializing a tuple-like variant.","","","Called when deserializing a variant with no values.","Raised when a <code>Deserialize</code> struct type received a field …","Raised when a <code>Deserialize</code> enum type received a variant …","Building blocks for deserializing basic values using the …","<code>variant</code> is called to identify which variant to deserialize.","<code>variant</code> is called to identify which variant to deserialize.","The input contains a boolean.","","The input contains a byte array that lives at least as …","The input contains a string that lives at least as long as …","The input contains a byte array and ownership of the byte …","The input contains a byte array. The lifetime of the byte …","","The input contains a <code>char</code>.","The input contains an enum.","","The input contains an <code>f32</code>.","The input contains an <code>f64</code>.","","The input contains a <code>i128</code>.","","The input contains an <code>i16</code>.","The input contains an <code>i32</code>.","The input contains an <code>i64</code>.","","The input contains an <code>i8</code>.","The input contains a key-value map.","","The input contains a newtype struct.","","The input contains an optional that is absent.","","The input contains a sequence of elements.","","The input contains an optional that is present.","","The input contains a string. The lifetime of the string is …","","The input contains a string and ownership of the string is …","The input contains a <code>u128</code>.","","The input contains a <code>u16</code>.","The input contains a <code>u32</code>.","The input contains a <code>u64</code>.","","The input contains a <code>u8</code>.","The input contains a unit <code>()</code>.","","","","","","","","","","A deserializer holding a <code>bool</code>.","A deserializer holding a <code>&amp;[u8]</code> with a lifetime tied to …","A deserializer holding a <code>&amp;str</code> with a lifetime tied to …","A deserializer holding a <code>&amp;[u8]</code>. Always calls …","A deserializer holding a <code>char</code>.","A deserializer holding a <code>Cow&lt;str&gt;</code>.","A minimal representation of all possible errors that can …","A deserializer holding an <code>f32</code>.","A deserializer holding an <code>f64</code>.","A deserializer holding an <code>i128</code>.","A deserializer holding an <code>i16</code>.","A deserializer holding an <code>i32</code>.","A deserializer holding an <code>i64</code>.","A deserializer holding an <code>i8</code>.","A deserializer holding an <code>isize</code>.","A deserializer holding a <code>MapAccess</code>.","A deserializer that iterates over a map.","A deserializer holding a <code>SeqAccess</code>.","A deserializer that iterates over a sequence.","A deserializer holding a <code>&amp;str</code>.","A deserializer holding a <code>String</code>.","A deserializer holding a <code>u128</code>.","A deserializer holding a <code>u16</code>.","A deserializer holding a <code>u32</code>.","A deserializer holding a <code>u64</code>.","A deserializer holding a <code>u8</code>.","A deserializer holding a <code>()</code>.","A deserializer holding a <code>usize</codeheck for remaining elements after passing a …","Check for remaining elements after passing a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Create a new borrowed deserializer from the given string.","","","Create a new deserializer from the given bytes.","Create a new borrowed deserializer from the given borrowed …","Construct a new <code>MapDeserializer&lt;I, E&gt;</code>.","","","","","","","","","","","","","","","","Construct a new <code>SeqDeserializer&lt;I, E&gt;</code>.","Construct a new <code>SeqAccessDeserializer&lt;A&gt;</code>.","Construct a new <code>MapAccessDeserializer&lt;A&gt;</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait used by <code>Serialize</code> implementations to generically …","The error type when some error occurs during serialization.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Helper type for implementing a <code>Serializer</code> that does not …","The output type produced by this <code>Serializer</code> during …","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","A <strong>data structure</strong> that can be serialized into any data …","Returned from <code>Serializer::serialize_map</code>.","Type returned from <code>serialize_map</code> for serializing the …","Returned from <code>Serializer::serialize_seq</code>.","Type returned from <code>serialize_seq</code> for serializing the …","Returned from <code>Serializer::serialize_struct</code>.","Type returned from <code>serialize_struct</code> for serializing the …","Returned from <code>Serializer::serialize_struct_variant</code>.","Type returned from <code>serialize_struct_variant</code> for …","Returned from <code>Serializer::serialize_tuple</code>.","Type returned from <code>serialize_tuple</code> for serializing the …","Returned from <code>Serializer::serialize_tuple_struct</code>.","Type returned from <code>serialize_tuple_struct</code> for serializing …","Returned from <code>Serializer::serialize_tuple_variant</code>.","Type returned from <code>serialize_tuple_variant</code> for serializing …","A <strong>data format</strong> that can serialize any data structure …","","","","Collect an iterator as a map.","Collect an iterator as a sequence.","Serialize a string produced by an implementation of <code>Display</code>…","Used when a <code>Serialize</code> implementation encounters any error …","Finish serializing a sequence.","Finish serializing a tuple.","Finish serializing a tuple struct.","Finish serializing a tuple variant.","Finish serializing a map.","Finish serializing a struct.","Finish serializing a struct variant.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Determine whether <code>Serialize</code> implementations should …","Serialize this value into the given Serde serializer.","Serialize a <code>bool</code> value.","Serialize a chunk of raw byte data.","Serialize a character.","Serialize a sequence element.","Serialize a tuple element.","","","Serialize a map entry consisting of a key and a value.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize a tuple struct field.","Serialize a tuple variant field.","Serialize a struct field.","Serialize a struct variant field.","","","","","Serialize an <code>i128</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i8</code> value.","Serialize a map key.","","Begin to serialize a map. This call must be followed by …","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Serialize a <code>None</code> value.","Begin to serialize a variably sized sequence. This call …","Serialize a <code>Some(T)</code> value.","Serialize a <code>&amp;str</code>.","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Serialize a <code>u128</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData&lt;T&gt;</code>.","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","Serialize a map value.","","Indicate that a struct field has been skipped.","Indicate that a struct variant field has been skipped.","","",""],"i":[0,0,1,2,2,0,2,2,2,2,2,2,2,0,2,2,2,0,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,2,0,0,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5,5,5,0,0,0,0,6,5,0,0,1,7,8,9,10,0,5,0,0,5,0,5,5,5,5,5,0,5,0,5,5,5,0,5,5,5,11,12,9,0,0,13,5,13,5,13,5,13,5,14,13,3,11,13,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,5,12,13,15,15,13,13,5,5,13,5,13,5,6,14,14,14,1,14,5,10,10,7,7,8,8,8,8,8,8,7,8,10,13,5,5,13,5,13,5,10,13,5,10,14,14,0,9,9,12,13,12,12,12,12,13,12,12,13,12,12,13,12,13,12,12,12,13,12,12,13,12,13,12,13,12,13,12,13,12,13,12,12,13,12,12,12,13,12,12,13,16,17,18,19,20,21,22,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,33,33,33,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,32,49,33,24,25,26,27,28,29,30,31,32,33,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,33,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,32,49,32,32,32,32,32,49,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,33,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,25,26,27,28,29,51,0,2,52,53,54,55,56,57,58,0,2,52,53,54,55,56,57,58,0,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,0,59,59,2,2,2,60,52,53,54,55,56,57,58,59,59,59,59,59,59,59,59,59,2,4,2,2,2,52,53,59,59,56,2,2,54,55,57,58,59,59,59,59,2,2,2,2,2,56,59,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,56,59,57,58,59,59,59],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[["",0]],["result",4]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",0]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",0]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",0]],["result",4]],[[["usize",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",0]],["result",4]],null,[[["",0]],["bool",0]],[[["",0]],["bool",0]],null,null,[[["",0]],["result",4]],[[["bool",0]],["result",4]],[[],["result",4]],[[["char",0]],["result",4]],[[["f32",0]],["result",4]],[[["f64",0]],["result",4]],[[["i128",0]],["result",4]],[[["i16",0]],["result",4]],[[["i32",0]],["result",4]],[[["i64",0]],["result",4]],[[["i8",0]],["result",4]],[[["option",4,[["usize",0]]]],["result",4]],[[["str",0],["",0]],["result",4]],[[["str",0],["u32",0],["str",0],["",0]],["result",4]],[[],["result",4]],[[["option",4,[["usize",0]]]],["result",4]],[[["",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[["str",0],["u32",0],["str",0],["usize",0]],["result",4]],[[["usize",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[["str",0],["u32",0],["str",0],["usize",0]],["result",4]],[[["u128",0]],["result",4]],[[["u16",0]],["result",4]],[[["u32",0]],["result",4]],[[["u64",0]],["result",4]],[[["u8",0]],["result",4]],[[],["result",4]],[[["str",0]],["result",4]],[[["str",0],["u32",0],["str",0]],["result",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["ignoredany",3]],[[["",0]],["unexpected",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[],["ignoredany",3]],[[],["result",4]],[[],["result",4]],[[],["result",4,[["ignoredany",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",0]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",0]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",0]],["result",4]],[[["usize",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",0]],["result",4]],[[["str",0]]],[[["",0],["unexpected",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["usize",0],["expected",8]]],[[["unexpected",4],["expected",8]]],[[["unexpected",4],["expected",8]]],[[["",0]],["bool",0]],[[["str",0]]],[[["",0],["unexpected",4]],["bool",0]],[[],["result",4]],[[],["result",4]],[[["",0]],["result",4,[["option",4]]]],[[["",0]],["result",4,[["option",4]]]],[[["",0]],["result",4,[["option",4]]]],[[["",0]],["result",4,[["option",4]]]],[[["",0]],["result",4,[["option",4]]]],[[["",0]],["result",4,[["option",4]]]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[],["result",4]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",0]],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["result",4]],[[["str",0]]],[[["str",0]]],null,[[],["result",4]],[[],["result",4]],[[["bool",0]],["result",4]],[[["bool",0]],["result",4]],[[],["result",4]],[[["str",0]],["result",4]],[[["vec",3,[["u8",0]]]],["result",4]],[[],["result",4]],[[],["result",4]],[[["char",0]],["result",4]],[[],["result",4]],[[],["result",4]],[[["f32",0]],["result",4]],[[["f64",0]],["result",4]],[[["f64",0]],["result",4]],[[["i128",0]],["result",4]],[[["i128",0]],["result",4]],[[["i16",0]],["result",4]],[[["i32",0]],["result",4]],[[["i64",0]],["result",4]],[[["i64",0]],["result",4]],[[["i8",0]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["string",3]],["result",4]],[[["u128",0]],["result",4]],[[["u128",0]],["result",4]],[[["u16",0]],["result",4]],[[["u32",0]],["result",4]],[[["u64",0]],["result",4]],[[["u64",0]],["result",4]],[[["u8",0]],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullerror",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["seqdeserializer",3]],[[["",0]],["seqaccessdeserializer",3]],[[["",0]],["mapaccessdeserializer",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[]],[[["",0]],["str",0]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["usize",0]],["result",4]],[[["usize",0]],["result",4]],[[["usize",0]],["result",4]],[[["usize",0]],["result",4]],[[["usize",0]],["result",4]],[[["usize",0]],["result",4]],[[["usize",0]],["result",4]],[[["usize",0]],["result",4]],[[["usize",0]],["result",4]],[[["usize",0]],["result",4]],[[["usize",0]],["result",4]],[[["usize",0]],["result",4]],[[["usize",0]],["result",4]],[[["usize",0]],["result",4]],[[["usize",0]],["result",4]],[[["usize",0]],["result",4]],[[["usize",0]],["result",4]],[[["usize",0]],["result",4]],[[["usize",0]],["result",4]],[[["usize",0]],["result",4]],[[["usize",0]],["result",4]],[[["usize",0]],["result",4]],[[["usize",0]],["result",4]],[[["usize",0]],["result",4]],[[["usize",0]],["result",4]],[[["usize",0]],["result",4]],[[["usize",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0],["error",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["error",3]],["bool",0]],[[]],[[["u32",0]]],[[["str",0]]],[[["str",0]],["borrowedstrdeserializer",3]],[[["string",3]]],[[["cow",4,[["str",0]]]]],[[]],[[]],[[]],[[["bool",0]]],[[["i8",0]]],[[["i16",0]]],[[["i32",0]]],[[["i64",0]]],[[["isize",0]]],[[["u8",0]]],[[["u16",0]]],[[["u64",0]]],[[["usize",0]]],[[["f32",0]]],[[["f64",0]]],[[["char",0]]],[[["i128",0]]],[[["u128",0]]],[[]],[[]],[[]],[[["",0]],["result",4,[["option",4]]]],[[["",0]],["result",4,[["option",4]]]],[[["",0]],["result",4,[["option",4]]]],[[["",0]],["result",4,[["option",4]]]],[[["",0]],["result",4]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[],["result",4]],[[],["result",4]],[[["",0]],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["result",4]],[[["bool",0]],["result",4]],[[],["result",4]],[[["char",0]],["result",4]],[[["",0],["",0]],["result",4]],[[["",0],["",0]],["result",4]],[[["",0],["",0]],["result",4]],[[["",0],["",0]],["result",4]],[[["",0],["",0],["",0]],["result",4]],[[["f32",0]],["result",4]],[[["f64",0]],["result",4]],[[["",0],["",0]],["result",4]],[[["",0],["",0]],["result",4]],[[["",0],["str",0],["",0]],["result",4]],[[["",0],["str",0],["",0]],["result",4]],[[["",0],["str",0],["",0]],["result",4]],[[["",0],["str",0],["",0]],["result",4]],[[["",0],["",0]],["result",4]],[[["",0],["",0]],["result",4]],[[["i128",0]],["result",4]],[[["i16",0]],["result",4]],[[["i32",0]],["result",4]],[[["i64",0]],["result",4]],[[["i8",0]],["result",4]],[[["",0],["",0]],["result",4]],[[["",0],["",0]],["result",4]],[[["option",4,[["usize",0]]]],["result",4]],[[["str",0],["",0]],["result",4]],[[["str",0],["u32",0],["str",0],["",0]],["result",4]],[[],["result",4]],[[["option",4,[["usize",0]]]],["result",4]],[[["",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[["str",0],["u32",0],["str",0],["usize",0]],["result",4]],[[["usize",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[["str",0],["u32",0],["str",0],["usize",0]],["result",4]],[[["u128",0]],["result",4]],[[["u16",0]],["result",4]],[[["u32",0]],["result",4]],[[["u64",0]],["result",4]],[[["u8",0]],["result",4]],[[],["result",4]],[[["str",0]],["result",4]],[[["str",0],["u32",0],["str",0]],["result",4]],[[["",0],["",0]],["result",4]],[[["",0],["",0]],["result",4]],[[["",0],["str",0]],["result",4]],[[["",0],["str",0]],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[8,"Deserializer"],[8,"Serializer"],[8,"Deserialize"],[8,"Serialize"],[4,"Unexpected"],[8,"IntoDeserializer"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"DeserializeSeed"],[8,"Visitor"],[3,"IgnoredAny"],[8,"Error"],[8,"Expected"],[13,"Bool"],[13,"Unsigned"],[13,"Signed"],[13,"Float"],[13,"Char"],[13,"Str"],[13,"Bytes"],[13,"Other"],[3,"UnitDeserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BytesDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"MapDeserializer"],[3,"Error"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapAccessDeserializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"],[3,"Impossible"],[8,"Error"]]},\
"serde_cbor":{"doc":"CBOR and serialization.","t":[13,13,13,3,3,13,13,13,13,6,3,3,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,0,11,11,0,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,12,12,12,12,12,12,12,3,3,3,8,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,11,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,13,3,13,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,3,11,11,5,11,11,11,11,11,12,11,11,11,12,13,13,13,13,13,13,13,13,13,4,5,5,12,12,12,12,12,12,12,12,12],"n":["Array","Bool","Bytes","Deserializer","Error","Float","Integer","Map","Null","Result","Serializer","StreamDeserializer","Tag","Text","Value","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","custom","custom","de","deserialize","eq","error","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_reader","from_slice","into","into","into","into","into","into_iter","invalid_type","next","partial_cmp","ser","serialize","source","tags","to_owned","to_string","to_vec","to_writer","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","value","0","0","0","0","0","0","0","0","1","Deserializer","IoRead","MutSliceRead","Read","SliceRead","SliceReadFixed","StreamDeserializer","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_offset","byte_offset","disable_legacy_enums","disable_named_format","disable_packed_format","disable_standard_enums","end","fmt","fmt","fmt","fmt","from","from","from","from","from_mut_slice","from_mut_slice","from_reader","from_reader","from_slice","from_slice","from_slice_with_scratch","into","into","into","into","into_iter","new","new","new","new","new","new","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Category","Data","Eof","Error","Io","Result","Syntax","borrow","borrow_mut","classify","clone","clone_into","eq","fmt","from","into","is_data","is_eof","is_io","is_scratch_too_small","is_syntax","offset","to_owned","try_from","try_into","type_id","IoWrite","Serializer","SliceWrite","Write","borrow","borrow","borrow_mut","borrow_mut","bytes_written","fmt","fmt","from","from","into","into","into_inner","into_inner","legacy_enums","new","new","new","packed_format","self_describe","to_vec","to_vec_packed","to_writer","try_from","try_from","try_into","try_into","type_id","type_id","Tagged","borrow","borrow_mut","current_cbor_tag","deserialize","from","into","new","serialize","tag","try_from","try_into","type_id","value","Array","Bool","Bytes","Float","Integer","Map","Null","Tag","Text","Value","from_value","to_value","0","0","0","0","0","0","0","0","1"],"q":["serde_cbor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde_cbor::Value","","","","","","","","","serde_cbor::de","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde_cbor::error","","","","","","","","","","","","","","","","","","","","","","","","","","serde_cbor::ser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde_cbor::tags","","","","","","","","","","","","","","serde_cbor::value","","","","","","","","","","","","serde_cbor::value::Value","","","","","","","",""],"d":["Represents an array of values.","Represents a boolean value.","Represents a byte string.","A Serde <code>Deserialize</code>r of CBOR data.","This type represents all possible errors that can occur …","Represents a floating point value.","Integer CBOR numbers.","Represents a map.","Represents the absence of a value or the value undefined.","Alias for a <code>Result</code> with the error type <code>serde_cbor::Error</code>.","A structure for serializing Rust values to CBOR.","Iterator that deserializes a stream into multiple CBOR …","Represents a tagged value","Represents an UTF-8 encoded string.","The <code>Value</code> enum, a loosely typed way of representing any …","","","","","","","","","","","","","","","","Deserialization.","","","When serializing or deserializing CBOR goes wrong.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Returns the argument unchanged.","","","","Decodes a value from CBOR data in a reader.","Decodes a value from CBOR data in a slice.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Serialize a Rust data structure to CBOR data.","","","Support for cbor tags","","","Serializes a value to a vector.","Serializes a value to a writer.","","","","","","","","","","","","","","","","CBOR values, keys and serialization routines.","","","","","","","","","","A Serde <code>Deserialize</code>r of CBOR data.","CBOR input source that reads from a std::io input stream.","A CBOR input source that reads from a slice of bytes, and …","Trait used by the deserializer for iterating over input.","A CBOR input source that reads from a slice of bytes.","A CBOR input source that reads from a slice of bytes using …","Iterator that deserializes a stream into multiple CBOR …","","","","","","","","","Return the current offset in the reader","Return the current offset in the reader","Don’t accept the old enum format used by <code>serde_cbor</code> …","Don’t accept named variants and fields.","Don’t accept numbered variants and fields.","Don’t accept the new enum format used by <code>serde_cbor</code> …","This method should be called after a value has been …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Decode a value from CBOR data in a mutable slice.","Constructs a <code>Deserializer</code> which reads from a mutable slice …","Decodes a value from CBOR data in a reader.","Constructs a <code>Deserializer</code> which reads from a <code>Read</code>er.","Decodes a value from CBOR data in a slice.","Constructs a <code>Deserializer</code> which reads from a slice.","Decode a value from CBOR data using a scratch buffer.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Turn a CBOR deserializer into an iterator over values of …","Constructs a <code>Deserializer</code> from one of the possible …","Create a new CBOR stream deserializer from one of the …","Creates a new CBOR input source to read from a std::io …","Creates a CBOR input source to read from a slice of bytes.","Creates a CBOR input source to read from a slice of bytes, …","Creates a CBOR input source to read from a slice of bytes.","","","","","","","","","","","","","Categorizes the cause of a <code>serde_cbor::Error</code>.","The error was caused by input data that was semantically …","The error was caused by prematurely reaching the end of …","This type represents all possible errors that can occur …","The error was caused by a failure to read or write bytes …","Alias for a <code>Result</code> with the error type <code>serde_cbor::Error</code>.","The error was caused by input that was not syntactically …","","","Categorizes the cause of this error.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns true if this error was caused by data that was …","Returns true if this error was caused by prematurely …","Returns true if this error was caused by a failure to read …","Returns true if this error was caused by the scratch …","Returns true if this error was caused by input that was …","The byte offset at which the error occurred.","","","","","A wrapper for types that implement <code>std::io::Write</code> to …","A structure for serializing Rust values to CBOR.","Implements <code>Write</code> for mutable byte slices (<code>&amp;mut [u8]</code>).","A sink for serialized CBOR.","","","","","Returns the number of bytes written to the underlying …","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Unwrap the <code>Writer</code> from the <code>Serializer</code>.","Returns the underlying slice.","Enable old enum format used by <code>serde_cbor</code> versions &lt;= v0.9.","Creates a new CBOR serializer.","Wraps an <code>io::Write</code> writer to make it compatible with <code>Write</code>","Wraps a mutable slice so it can be used as a <code>Write</code>.","Choose concise/packed format for serializer.","Writes a CBOR self-describe tag to the stream.","Serializes a value to a vector.","Serializes a value to a vector in packed format.","Serializes a value to a writer.","","","","","","","A value that is optionally tagged with a cbor tag","","","function to get the current cbor tag","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new tagged value","","cbor tag","","","","value","Represents an array of values.","Represents a boolean value.","Represents a byte string.","Represents a floating point value.","Integer CBOR numbers.","Represents a map.","Represents the absence of a value or the value undefined.","Represents a tagged value","Represents an UTF-8 encoded string.","The <code>Value</code> enum, a loosely typed way of representing any …","Convert a <code>serde_cbor::Value</code> into a type <code>T</code>","Convert a <code>T</code> into <code>serde_cbor::Value</code> which is an enum that …","","","","","","","","",""],"i":[1,1,1,0,0,1,1,1,1,0,0,0,1,1,0,2,3,4,5,1,2,3,4,5,1,1,1,1,2,2,0,1,1,0,2,2,3,4,5,1,2,2,3,4,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,2,3,4,5,1,4,2,4,1,0,1,2,0,1,2,0,0,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,0,6,7,8,9,10,11,12,13,13,0,0,0,0,0,0,0,14,15,16,17,14,15,16,17,3,4,3,3,3,3,3,14,15,16,17,14,15,16,17,0,3,0,3,0,3,0,14,15,16,17,3,3,4,14,15,16,17,14,15,16,17,14,15,16,17,14,15,16,17,0,18,18,0,18,0,18,18,18,2,18,18,18,18,18,18,2,2,2,2,2,2,18,18,18,18,0,0,0,0,19,20,19,20,20,19,20,19,20,19,20,5,20,5,5,19,20,5,5,0,0,0,19,20,19,20,19,20,0,21,21,0,21,21,21,21,21,21,21,21,21,21,1,1,1,1,1,1,1,1,1,0,0,0,6,7,8,9,10,11,12,13,13],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["value",4]],[[["",0],["",0]]],[[["",0],["value",4]],["ordering",4]],[[["display",8]],["error",3]],[[["display",8]],["error",3]],null,[[],["result",4,[["value",4]]]],[[["",0],["value",4]],["bool",0]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["error",3]],["error",3]],[[]],[[]],[[]],[[]],[[["u16",0]],["value",4]],[[["btreemap",3,[["value",4],["value",4]]]],["value",4]],[[["vec",3,[["value",4]]]],["value",4]],[[["string",3]],["value",4]],[[["vec",3,[["u8",0]]]],["value",4]],[[["f64",0]],["value",4]],[[["u64",0]],["value",4]],[[["i8",0]],["value",4]],[[["u32",0]],["value",4]],[[["i64",0]],["value",4]],[[["f32",0]],["value",4]],[[["u8",0]],["value",4]],[[]],[[["i16",0]],["value",4]],[[["bool",0]],["value",4]],[[["i32",0]],["value",4]],[[],["result",6]],[[],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["unexpected",4],["expected",8]],["error",3]],[[["",0]],["option",4,[["result",6]]]],[[["",0],["value",4]],["option",4,[["ordering",4]]]],null,[[["",0]],["result",4]],[[["",0]],["option",4,[["error",8]]]],null,[[["",0]]],[[["",0]],["string",3]],[[["",0]],["result",6,[["vec",3,[["u8",0]]]]]],[[["",0]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[]],[[]],[[]],[[]],[[["",0]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["result",6]],[[],["deserializer",3,[["mutsliceread",3]]]],[[],["result",6]],[[],["deserializer",3,[["ioread",3]]]],[[],["result",6]],[[],["deserializer",3,[["sliceread",3]]]],[[],["result",6]],[[]],[[]],[[]],[[]],[[],["streamdeserializer",3]],[[]],[[],["streamdeserializer",3]],[[],["ioread",3]],[[],["sliceread",3]],[[],["slicereadfixed",3]],[[],["mutsliceread",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["category",4]],[[["",0]],["category",4]],[[["",0],["",0]]],[[["",0],["category",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["u64",0]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["usize",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["iowrite",3]],[[],["slicewrite",3]],[[]],[[["",0]],["result",6]],[[["",0]],["result",6,[["vec",3,[["u8",0]]]]]],[[["",0]],["result",6,[["vec",3,[["u8",0]]]]]],[[["",0]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[],["option",4,[["u64",0]]]],[[["deserializer",8]],["result",4]],[[]],[[]],[[["option",4,[["u64",0]]]]],[[["",0],["serializer",8]],["result",4]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,[[["value",4]],["result",4,[["error",3]]]],[[],["result",4,[["value",4],["error",3]]]],null,null,null,null,null,null,null,null,null],"p":[[4,"Value"],[3,"Error"],[3,"Deserializer"],[3,"StreamDeserializer"],[3,"Serializer"],[13,"Bool"],[13,"Integer"],[13,"Float"],[13,"Bytes"],[13,"Text"],[13,"Array"],[13,"Map"],[13,"Tag"],[3,"IoRead"],[3,"SliceRead"],[3,"SliceReadFixed"],[3,"MutSliceRead"],[4,"Category"],[3,"IoWrite"],[3,"SliceWrite"],[3,"Tagged"]]},\
"serde_derive":{"doc":"This crate provides Serde’s two derive macros.","t":[24,24],"n":["Deserialize","Serialize"],"q":["serde_derive",""],"d":["",""],"i":[0,0],"f":[null,null],"p":[]},\
"serde_json":{"doc":"Serde JSON","tn":["Array","Bool","Deserializer","Error","Map","Null","Number","Number","Object","Result","Serializer","StreamDeserializer","String","Value","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","custom","custom","de","default","default","deserialize","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","error","extend","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_reader","from_slice","from_str","from_str","from_value","index","index","index_mut","index_mut","into","into","into","into","into","into","into_deserializer","into_iter","into_iter","invalid_type","json","map","ne","next","ser","serialize","serialize","source","to_owned","to_owned","to_string","to_string","to_string","to_string_pretty","to_value","to_vec","to_vec_pretty","to_writer","to_writer_pretty","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","value","0","0","0","0","0","Deserializer","IoRead","Read","SliceRead","StrRead","StreamDeserializer","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","byte_offset","end","from","from","from","from_reader","from_reader","from_slice","from_slice","from_str","from_str","into","into","into","into_iter","new","new","new","new","new","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Category","Data","Eof","Error","Io","Result","Syntax","borrow","borrow_mut","classify","clone","clone_into","column","eq","fmt","from","into","is_data","is_eof","is_io","is_syntax","line","to_owned","try_from","try_into","type_id","Entry","IntoIter","Iter","IterMut","Keys","Map","Occupied","OccupiedEntry","Vacant","VacantEntry","Values","ValuesMut","and_modify","append","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","contains_key","entry","from","from","from","from","from","from","from","from","from","get","get","get_key_value","get_mut","get_mut","insert","insert","insert","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_mut","is_empty","iter","iter_mut","key","key","key","keys","len","len","len","len","len","len","len","new","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","or_insert","or_insert_with","remove","remove","remove_entry","retain","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values_mut","with_capacity","0","0","AsciiControl","Backspace","CarriageReturn","CharEscape","CompactFormatter","FormFeed","Formatter","LineFeed","PrettyFormatter","Quote","ReverseSolidus","Serializer","Solidus","Tab","begin_array","begin_array","begin_array_value","begin_array_value","begin_object","begin_object","begin_object_key","begin_object_key","begin_object_value","begin_object_value","begin_string","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","end_array","end_array","end_array_value","end_array_value","end_object","end_object","end_object_key","end_object_value","end_object_value","end_string","fmt","fmt","from","from","from","into","into","into","into_inner","new","new","pretty","to_owned","to_owned","to_string","to_string_pretty","to_vec","to_vec_pretty","to_writer","to_writer_pretty","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_formatter","with_indent","write_bool","write_char_escape","write_f32","write_f64","write_i16","write_i32","write_i64","write_i8","write_null","write_number_str","write_raw_fragment","write_string_fragment","write_u16","write_u32","write_u64","write_u8","0","Array","Bool","Index","Map","Null","Number","Number","Object","Serializer","String","Value","as_array","as_array_mut","as_bool","as_f64","as_f64","as_i64","as_i64","as_null","as_object","as_object_mut","as_str","as_u64","as_u64","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","collect_str","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","eq","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_f64","from_str","from_value","get","get_mut","hash","into","into","is_array","is_boolean","is_f64","is_f64","is_i64","is_i64","is_null","is_number","is_object","is_string","is_u64","is_u64","ne","pointer","pointer_mut","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","take","to_owned","to_string","to_value","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","0","0"],"q":["serde_jsonserde_json::Value","","","","","serde_json::de","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde_json::error","","","","","","","","","","","","","","","","","","","","","","","","","","serde_json::map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde_json::map::Entry","","serde_json::ser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde_json::ser::CharEscape","serde_json::value","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde_json::value::Value","","","",""],"d":["Represents a JSON array.","Represents a JSON boolean.","A structure that deserializes JSON into Rust values.","This type represents all possible errors that can occur …","Represents a JSON key/value type.","Represents a JSON null value.","Represents a JSON number, whether integer or floating …","Represents a JSON number, whether integer or floating …","Represents a JSON object.","Alias for a <code>Result</code> with the error type <code>serde_json::Error</code>.","A structure for serializing Rust values into JSON.","Iterator that deserializes a stream into multiple JSON …","Represents a JSON string.","Represents any valid JSON value.","","","","","","","","","","","","","","","","","","","Deserialize JSON data to a Rust data structure.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","When serializing or deserializing JSON goes wrong.","","","","","Display a JSON value as a string.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert string slice to <code>Value</code>","","Convert <code>()</code> to <code>Value</code>","Convert a <code>Vec</code> to <code>Value</code>","Convert map (with string keys) to <code>Value</code>","Convert <code>Number</code> to <code>Value</code>","Convert copy-on-write string to <code>Value</code>","Returns the argument unchanged.","Convert <code>String</code> to <code>Value</code>","Convert boolean to <code>Value</code>","Convert 64-bit floating point number to <code>Value</code>","Convert a slice to <code>Value</code>","","","","","","","Convert 32-bit floating point number to <code>Value</code>","","","","","","Convert an iteratable type to a <code>Value</code>","Convert an iteratable type to a <code>Value</code>","Deserialize an instance of type <code>T</code> from an IO stream of …","Deserialize an instance of type <code>T</code> from bytes of JSON text.","Deserialize an instance of type <code>T</code> from a string of JSON …","","Interpret a <code>serde_json::Value</code> as an instance of type <code>T</code>.","","Index into a <code>serde_json::Value</code> using the syntax <code>value[0]</code> or","","Write into a <code>serde_json::Value</code> using the syntax …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Construct a <code>serde_json::Value</code> from a JSON literal.","A map of String to serde_json::Value.","","","Serialize a Rust data structure into JSON data.","","","","","","Serialize the given data structure as a String of JSON.","","","Serialize the given data structure as a pretty-printed …","Convert a <code>T</code> into <code>serde_json::Value</code> which is an enum that …","Serialize the given data structure as a JSON byte vector.","Serialize the given data structure as a pretty-printed …","Serialize the given data structure as JSON into the IO …","Serialize the given data structure as pretty-printed JSON …","","","","","","","","","","","","","","","","","","","The Value enum, a loosely typed way of representing any …","","","","","","A structure that deserializes JSON into Rust values.","JSON input source that reads from a std::io input stream.","Trait used by the deserializer for iterating over input. …","JSON input source that reads from a slice of bytes.","JSON input source that reads from a UTF-8 string.","Iterator that deserializes a stream into multiple JSON …","","","","","","","Returns the number of bytes so far deserialized into a …","The <code>Deserializer::end</code> method should be called after a …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserialize an instance of type <code>T</code> from an IO stream of …","Creates a JSON deserializer from an <code>io::Read</code>.","Deserialize an instance of type <code>T</code> from bytes of JSON text.","Creates a JSON deserializer from a <code>&amp;[u8]</code>.","Deserialize an instance of type <code>T</code> from a string of JSON …","Creates a JSON deserializer from a <code>&amp;str</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Turn a JSON deserializer into an iterator over values of …","Create a JSON deserializer from one of the possible …","Create a JSON stream deserializer from one of the possible …","Create a JSON input source to read from a std::io input …","Create a JSON input source to read from a slice of bytes.","Create a JSON input source to read from a UTF-8 string.","","","","","","","","","","Categorizes the cause of a <code>serde_json::Error</code>.","The error was caused by input data that was semantically …","The error was caused by prematurely reaching the end of …","This type represents all possible errors that can occur …","The error was caused by a failure to read or write bytes …","Alias for a <code>Result</code> with the error type <code>serde_json::Error</code>.","The error was caused by input that was not syntactically …","","","Categorizes the cause of this error.","","","One-based column number at which the error was detected.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns true if this error was caused by input data that …","Returns true if this error was caused by prematurely …","Returns true if this error was caused by a failure to read …","Returns true if this error was caused by input that was not","One-based line number at which the error was detected.","","","","","A view into a single entry in a map, which may either be …","An owning iterator over a serde_json::Map’s entries.","An iterator over a serde_json::Map’s entries.","A mutable iterator over a serde_json::Map’s entries.","An iterator over a serde_json::Map’s keys.","Represents a JSON key/value type.","An occupied Entry.","An occupied Entry. It is part of the <code>Entry</code> enum.","A vacant Entry.","A vacant Entry. It is part of the <code>Entry</code> enum.","An iterator over a serde_json::Map’s values.","A mutable iterator over a serde_json::Map’s values.","Provides in-place mutable access to an occupied entry …","Moves all elements from other into self, leaving other …","","","","","","","","","","","","","","","","","","","Clears the map, removing all values.","Returns true if the map contains a value for the specified …","Gets the given key’s corresponding entry in the map for …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a reference to the value corresponding to the key.","Gets a reference to the value in the entry.","Returns the key-value pair matching the given key.","Returns a mutable reference to the value corresponding to …","Gets a mutable reference to the value in the entry.","Inserts a key-value pair into the map.","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry with the <code>OccupiedEntry</code>’s …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Converts the entry into a mutable reference to its value.","Returns true if the map contains no elements.","Gets an iterator over the entries of the map.","Gets a mutable iterator over the entries of the map.","Returns a reference to this entry’s key.","Gets a reference to the key that would be used when …","Gets a reference to the key in the entry.","Gets an iterator over the keys of the map.","Returns the number of elements in the map.","","","","","","","Makes a new empty Map.","","","","","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result of …","Removes a key from the map, returning the value at the key …","Takes the value of the entry out of the map, and returns …","Removes a key from the map, returning the stored key and …","Retains only the elements specified by the predicate.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets an iterator over the values of the map.","Gets an iterator over mutable values of the map.","Makes a new empty Map with the given initial capacity.","","","An escaped ASCII plane control character (usually escaped …","An escaped backspace character (usually escaped as <code>\\\\b</code>)","An escaped carriage return character (usually escaped as <code>\\\\r</code>…","Represents a character escape code in a type-safe manner.","This structure compacts a JSON value with no extra …","An escaped form feed character (usually escaped as <code>\\\\f</code>)","This trait abstracts away serializing the JSON control …","An escaped line feed character (usually escaped as <code>\\\\n</code>)","This structure pretty prints a JSON value to make it human …","An escaped quote <code>&quot;</code>","An escaped reverse solidus <code>\\\\</code>","A structure for serializing Rust values into JSON.","An escaped solidus <code>/</code>","An escaped tab character (usually escaped as <code>\\\\t</code>)","Called before every array.  Writes a <code>[</code> to the specified …","","Called before every array value.  Writes a <code>,</code> if needed to …","","Called before every object.  Writes a <code>{</code> to the specified …","","Called before every object key.","","Called before every object value.  A <code>:</code> should be written to","","Called before each series of <code>write_string_fragment</code> and …","","","","","","","","","","","","Called after every array.  Writes a <code>]</code> to the specified …","","Called after every array value.","","Called after every object.  Writes a <code>}</code> to the specified …","","Called after every object key.  A <code>:</code> should be written to …","Called after every object value.","","Called after each series of <code>write_string_fragment</code> and …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Unwrap the <code>Writer</code> from the <code>Serializer</code>.","Creates a new JSON serializer.","Construct a pretty printer formatter that defaults to …","Creates a new JSON pretty print serializer.","","","Serialize the given data structure as a String of JSON.","Serialize the given data structure as a pretty-printed …","Serialize the given data structure as a JSON byte vector.","Serialize the given data structure as a pretty-printed …","Serialize the given data structure as JSON into the IO …","Serialize the given data structure as pretty-printed JSON …","","","","","","","","","","Creates a new JSON visitor whose output will be written to …","Construct a pretty printer formatter that uses the <code>indent</code> …","Writes a <code>true</code> or <code>false</code> value to the specified writer.","Writes a character escape code to the specified writer.","Writes a floating point value like <code>-31.26e+12</code> to the …","Writes a floating point value like <code>-31.26e+12</code> to the …","Writes an integer value like <code>-123</code> to the specified writer.","Writes an integer value like <code>-123</code> to the specified writer.","Writes an integer value like <code>-123</code> to the specified writer.","Writes an integer value like <code>-123</code> to the specified writer.","Writes a <code>null</code> value to the specified writer.","Writes a number that has already been rendered to a string.","Writes a raw JSON fragment that doesn’t need any …","Writes a string fragment that doesn’t need any escaping …","Writes an integer value like <code>123</code> to the specified writer.","Writes an integer value like <code>123</code> to the specified writer.","Writes an integer value like <code>123</code> to the specified writer.","Writes an integer value like <code>123</code> to the specified writer.","","Represents a JSON array.","Represents a JSON boolean.","A type that can be used to index into a <code>serde_json::Value</code>.","","Represents a JSON null value.","Represents a JSON number, whether integer or floating …","Represents a JSON number, whether integer or floating …","Represents a JSON object.","Serializer whose output is a <code>Value</code>.","Represents a JSON string.","Represents any valid JSON value.","If the <code>Value</code> is an Array, returns the associated vector. …","If the <code>Value</code> is an Array, returns the associated mutable …","If the <code>Value</code> is a Boolean, returns the associated bool. …","If the <code>Value</code> is a number, represent it as f64 if possible. …","Represents the number as f64 if possible. Returns None …","If the <code>Value</code> is an integer, represent it as i64 if …","If the <code>Number</code> is an integer, represent it as i64 if …","If the <code>Value</code> is a Null, returns (). Returns None otherwise.","If the <code>Value</code> is an Object, returns the associated Map. …","If the <code>Value</code> is an Object, returns the associated mutable …","If the <code>Value</code> is a String, returns the associated str. …","If the <code>Value</code> is an integer, represent it as u64 if …","If the <code>Number</code> is an integer, represent it as u64 if …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","Converts a finite <code>f64</code> to a <code>Number</code>. Infinite or NaN values …","","Interpret a <code>serde_json::Value</code> as an instance of type <code>T</code>.","Index into a JSON array or map. A string index can be used …","Mutably index into a JSON array or map. A string index can …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if the <code>Value</code> is an Array. Returns false …","Returns true if the <code>Value</code> is a Boolean. Returns false …","Returns true if the <code>Value</code> is a number that can be …","Returns true if the <code>Number</code> can be represented by f64.","Returns true if the <code>Value</code> is an integer between <code>i64::MIN</code> …","Returns true if the <code>Number</code> is an integer between <code>i64::MIN</code> …","Returns true if the <code>Value</code> is a Null. Returns false …","Returns true if the <code>Value</code> is a Number. Returns false …","Returns true if the <code>Value</code> is an Object. Returns false …","Returns true if the <code>Value</code> is a String. Returns false …","Returns true if the <code>Value</code> is an integer between zero and …","Returns true if the <code>Number</code> is an integer between zero and …","","Looks up a value by a JSON Pointer.","Looks up a value by a JSON Pointer and returns a mutable …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Takes the value out of the <code>Value</code>, leaving a <code>Null</code> in its …","","","Convert a <code>T</code> into <code>serde_json::Value</code> which is an enum that …","","","","","","","","","","",""],"i":[1,1,0,0,0,1,0,1,1,0,0,0,1,0,2,3,4,5,6,1,2,3,4,5,6,1,5,1,5,1,4,4,0,5,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,5,4,4,5,1,1,2,3,4,5,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,0,0,0,1,0,5,1,5,1,2,3,4,5,6,1,1,3,5,4,0,0,1,3,0,5,1,4,5,1,0,4,1,0,0,0,0,0,0,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,0,7,8,9,10,11,0,0,0,0,0,0,12,13,14,12,13,14,3,2,12,13,14,0,2,0,2,0,2,12,13,14,2,2,3,12,13,14,12,13,14,12,13,14,12,13,14,0,15,15,0,15,0,15,15,15,4,15,15,4,15,15,15,15,4,4,4,4,4,15,15,15,15,0,0,0,0,0,0,16,0,16,0,0,0,16,5,16,17,18,19,20,21,22,23,24,16,17,18,19,20,21,22,23,24,5,5,5,16,17,18,19,20,21,22,23,24,5,18,5,5,18,5,17,18,16,17,18,19,20,21,22,23,24,19,20,21,22,23,24,18,5,5,5,16,17,18,5,5,19,20,21,22,23,24,5,19,20,21,22,23,24,19,20,21,22,23,24,16,16,5,18,5,5,19,20,21,22,23,24,16,17,18,19,20,21,22,23,24,16,17,18,19,20,21,22,23,24,16,17,18,19,20,21,22,23,24,5,5,5,25,26,27,27,27,0,0,27,0,27,0,27,27,0,27,27,28,29,28,29,28,29,28,29,28,29,28,27,30,29,27,30,29,30,29,30,29,29,28,29,28,29,28,29,28,28,29,28,30,29,27,30,29,27,30,29,6,6,29,6,30,29,0,0,0,0,0,0,27,30,29,27,30,29,27,30,29,6,29,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,31,1,1,0,0,1,0,1,1,0,1,0,1,1,1,1,32,1,32,1,1,1,1,1,32,33,32,33,32,32,32,33,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,32,32,32,32,32,32,32,32,32,32,32,32,32,0,1,1,32,33,32,1,1,1,32,1,32,1,1,1,1,1,32,32,1,1,32,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,1,32,32,0,33,32,33,32,33,32,7,8,9,10,11],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]],["value",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["display",8]],["error",3]],[[["display",8]],["error",3]],null,[[]],[[],["value",4]],[[],["result",4]],[[],["result",4,[["value",4]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[["str",0]],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[["str",0]],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[["str",0]],["result",4,[["error",3]]]],[[["usize",0]],["result",4,[["error",3]]]],[[["str",0],["usize",0]],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[["str",0]],["result",4,[["error",3]]]],[[["",0],["",0]],["bool",0]],[[["",0],["str",0]],["bool",0]],[[["",0],["str",0]],["bool",0]],[[["",0],["u8",0]],["bool",0]],[[["",0],["i64",0]],["bool",0]],[[["",0],["u64",0]],["bool",0]],[[["",0],["u32",0]],["bool",0]],[[["",0],["isize",0]],["bool",0]],[[["",0],["value",4]],["bool",0]],[[["",0],["bool",0]],["bool",0]],[[["",0],["f64",0]],["bool",0]],[[["",0],["usize",0]],["bool",0]],[[["",0],["u16",0]],["bool",0]],[[["",0],["i16",0]],["bool",0]],[[["",0],["f32",0]],["bool",0]],[[["",0],["i32",0]],["bool",0]],[[["",0],["string",3]],["bool",0]],[[["",0],["i8",0]],["bool",0]],null,[[["",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["str",0]]],[[["option",4]]],[[]],[[["vec",3]]],[[["map",3,[["string",3],["value",4]]]]],[[["number",3]]],[[["cow",4,[["str",0]]]]],[[]],[[["string",3]]],[[["bool",0]]],[[["f64",0]]],[[]],[[["i8",0]]],[[["i16",0]]],[[["i32",0]]],[[["i64",0]]],[[["isize",0]]],[[["u8",0]]],[[["f32",0]]],[[["usize",0]]],[[["u64",0]]],[[["u32",0]]],[[["u16",0]]],[[]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[],["result",6]],[[],["result",6]],[[["str",0]],["result",6]],[[["str",0]],["result",4,[["value",4],["error",3]]]],[[["value",4]],["result",4,[["error",3]]]],[[["",0],["",0]],["value",4]],[[["",0]],["value",4]],[[["",0],["",0]],["value",4]],[[["",0]],["value",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["unexpected",4],["expected",8]]],null,null,[[["",0],["value",4]],["bool",0]],[[["",0]],["option",4,[["result",6]]]],null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["option",4,[["error",8]]]],[[["",0]]],[[["",0]]],[[["",0]],["result",6,[["string",3]]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["result",6,[["string",3]]]],[[],["result",4,[["value",4],["error",3]]]],[[["",0]],["result",6,[["vec",3,[["u8",0]]]]]],[[["",0]],["result",6,[["vec",3,[["u8",0]]]]]],[[["",0]],["result",6]],[[["",0]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["usize",0]],[[["",0]],["result",6]],[[]],[[]],[[]],[[],["result",6]],[[]],[[],["result",6]],[[]],[[["str",0]],["result",6]],[[["str",0]]],[[]],[[]],[[]],[[],["streamdeserializer",3]],[[]],[[]],[[]],[[]],[[["str",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["category",4]],[[["",0]],["category",4]],[[["",0],["",0]]],[[["",0]],["usize",0]],[[["",0],["category",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["usize",0]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["",0],["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0],["",0]],["bool",0]],[[["",0]],["entry",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["",0]],["option",4,[["value",4]]]],[[["",0]],["value",4]],[[["",0],["",0]],["option",4]],[[["",0],["",0]],["option",4,[["value",4]]]],[[["",0]],["value",4]],[[["",0],["string",3],["value",4]],["option",4,[["value",4]]]],[[["value",4]],["value",4]],[[["",0],["value",4]],["value",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["value",4]],[[["",0]],["bool",0]],[[["",0]],["iter",3]],[[["",0]],["itermut",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["keys",3]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["value",4]],["value",4]],[[],["value",4]],[[["",0],["",0]],["option",4,[["value",4]]]],[[],["value",4]],[[["",0],["",0]],["option",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["values",3]],[[["",0]],["valuesmut",3]],[[["usize",0]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["",0]],["result",6]],[[["",0],["",0]],["result",6]],[[["",0],["",0],["bool",0]],["result",6]],[[["",0],["",0],["bool",0]],["result",6]],[[["",0],["",0]],["result",6]],[[["",0],["",0]],["result",6]],[[["",0],["",0],["bool",0]],["result",6]],[[["",0],["",0],["bool",0]],["result",6]],[[["",0],["",0]],["result",6]],[[["",0],["",0]],["result",6]],[[["",0],["",0]],["result",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["compactformatter",3]],[[["",0]],["prettyformatter",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[["",0],["",0]],["result",6]],[[["",0],["",0]],["result",6]],[[["",0],["",0]],["result",6]],[[["",0],["",0]],["result",6]],[[["",0],["",0]],["result",6]],[[["",0],["",0]],["result",6]],[[["",0],["",0]],["result",6]],[[["",0],["",0]],["result",6]],[[["",0],["",0]],["result",6]],[[["",0],["",0]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]]],[[["",0]]],[[["",0]],["result",6,[["string",3]]]],[[["",0]],["result",6,[["string",3]]]],[[["",0]],["result",6,[["vec",3,[["u8",0]]]]]],[[["",0]],["result",6,[["vec",3,[["u8",0]]]]]],[[["",0]],["result",6]],[[["",0]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[["",0],["",0],["bool",0]],["result",6]],[[["",0],["",0],["charescape",4]],["result",6]],[[["",0],["",0],["f32",0]],["result",6]],[[["",0],["",0],["f64",0]],["result",6]],[[["",0],["",0],["i16",0]],["result",6]],[[["",0],["",0],["i32",0]],["result",6]],[[["",0],["",0],["i64",0]],["result",6]],[[["",0],["",0],["i8",0]],["result",6]],[[["",0],["",0]],["result",6]],[[["",0],["",0],["str",0]],["result",6]],[[["",0],["",0],["str",0]],["result",6]],[[["",0],["",0],["str",0]],["result",6]],[[["",0],["",0],["u16",0]],["result",6]],[[["",0],["",0],["u32",0]],["result",6]],[[["",0],["",0],["u64",0]],["result",6]],[[["",0],["",0],["u8",0]],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["option",4,[["vec",3]]]],[[["",0]],["option",4,[["vec",3]]]],[[["",0]],["option",4,[["bool",0]]]],[[["",0]],["option",4,[["f64",0]]]],[[["",0]],["option",4,[["f64",0]]]],[[["",0]],["option",4,[["i64",0]]]],[[["",0]],["option",4,[["i64",0]]]],[[["",0]],["option",4]],[[["",0]],["option",4,[["map",3]]]],[[["",0]],["option",4,[["map",3]]]],[[["",0]],["option",4,[["str",0]]]],[[["",0]],["option",4,[["u64",0]]]],[[["",0]],["option",4,[["u64",0]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["number",3]],[[["",0],["",0]]],[[["",0]],["result",6,[["value",4]]]],[[],["result",4,[["number",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",0]],["result",4]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",0]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",0]],["result",4]],[[["usize",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4]],[[["str",0]],["result",4]],[[["",0],["number",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["isize",0]]],[[["i64",0]]],[[["i32",0]]],[[["u16",0]]],[[["i16",0]]],[[["u8",0]]],[[["u32",0]]],[[]],[[["i8",0]]],[[["usize",0]]],[[["u64",0]]],[[["f64",0]],["option",4,[["number",3]]]],[[["str",0]],["result",4]],[[["value",4]],["result",4,[["error",3]]]],[[["",0],["index",8]],["option",4,[["value",4]]]],[[["",0],["index",8]],["option",4,[["value",4]]]],[[["",0],["",0]]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0],["number",3]],["bool",0]],[[["",0],["str",0]],["option",4,[["value",4]]]],[[["",0],["str",0]],["option",4,[["value",4]]]],[[["",0]],["result",4]],[[["bool",0]],["result",6,[["value",4]]]],[[],["result",6,[["value",4]]]],[[["char",0]],["result",6,[["value",4]]]],[[["f32",0]],["result",6,[["value",4]]]],[[["f64",0]],["result",6,[["value",4]]]],[[["i16",0]],["result",6,[["value",4]]]],[[["i32",0]],["result",6,[["value",4]]]],[[["i64",0]],["result",6,[["value",4]]]],[[["i8",0]],["result",6,[["value",4]]]],[[["option",4,[["usize",0]]]],["result",6]],[[["str",0],["",0]],["result",6,[["value",4]]]],[[["str",0],["u32",0],["str",0],["",0]],["result",6,[["value",4]]]],[[],["result",6,[["value",4]]]],[[["option",4,[["usize",0]]]],["result",6]],[[["",0]],["result",6,[["value",4]]]],[[["str",0]],["result",6,[["value",4]]]],[[["str",0],["usize",0]],["result",6]],[[["str",0],["u32",0],["str",0],["usize",0]],["result",6]],[[["usize",0]],["result",6]],[[["str",0],["usize",0]],["result",6]],[[["str",0],["u32",0],["str",0],["usize",0]],["result",6]],[[["u16",0]],["result",6,[["value",4]]]],[[["u32",0]],["result",6,[["value",4]]]],[[["u64",0]],["result",6,[["value",4]]]],[[["u8",0]],["result",6,[["value",4]]]],[[],["result",6,[["value",4]]]],[[["str",0]],["result",6,[["value",4]]]],[[["str",0],["u32",0],["str",0]],["result",6,[["value",4]]]],[[["",0]],["value",4]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4,[["value",4],["error",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null],"p":[[4,"Value"],[3,"Deserializer"],[3,"StreamDeserializer"],[3,"Error"],[3,"Map"],[3,"Serializer"],[13,"Bool"],[13,"Number"],[13,"String"],[13,"Array"],[13,"Object"],[3,"IoRead"],[3,"SliceRead"],[3,"StrRead"],[4,"Category"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[13,"Vacant"],[13,"Occupied"],[4,"CharEscape"],[8,"Formatter"],[3,"PrettyFormatter"],[3,"CompactFormatter"],[13,"AsciiControl"],[3,"Number"],[3,"Serializer"]]},\
"syn":{"doc":"github crates-io docs-rs","t":[3,13,13,13,13,3,13,13,13,13,13,4,3,6,13,13,3,4,13,3,13,13,13,13,13,13,13,13,13,3,13,13,13,13,13,13,13,13,13,13,13,13,3,3,13,13,13,13,4,3,3,3,13,13,3,13,13,13,13,13,3,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,13,4,3,3,13,13,13,4,4,3,13,13,13,3,13,3,13,3,13,13,13,13,13,13,13,3,13,13,13,13,3,13,4,13,13,3,3,3,3,3,3,3,13,13,3,13,13,4,13,13,4,4,13,3,3,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,3,3,13,13,13,4,3,3,3,3,13,13,3,13,13,13,13,13,13,13,13,6,13,4,13,13,13,13,13,13,4,13,13,13,13,14,13,3,4,13,13,13,13,13,3,4,13,13,13,13,13,3,3,3,3,3,3,3,3,3,4,3,3,3,3,3,3,3,4,13,13,13,13,13,13,3,3,13,13,13,3,3,3,4,3,4,13,13,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,14,12,12,12,12,14,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,12,12,12,14,14,12,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,12,12,12,12,12,12,12,12,12,0,12,12,12,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,12,12,12,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,12,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,14,0,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,14,11,11,11,11,14,14,5,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,0,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,0,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,18,10,3,3,3,16,8,3,6,8,8,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,13,3,3,3,3,4,3,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,8,10,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,8,3,3,3,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Abi","Add","AddEq","And","AngleBracketed","AngleBracketedGenericArguments","Array","Array","Assign","AssignOp","Async","AttrStyle","Attribute","AttributeArgs","Await","BareFn","BareFnArg","BinOp","Binary","Binding","Binding","BitAnd","BitAndEq","BitOr","BitOrEq","BitXor","BitXorEq","Block","Bool","BoundLifetimes","Box","Brace","Bracket","Break","Byte","ByteStr","Call","Cast","Char","Closure","Const","Const","ConstParam","Constraint","Constraint","Continue","Cooked","Crate","Data","DataEnum","DataStruct","DataUnion","Default","Deref","DeriveInput","Div","DivEq","Enum","Eq","Eq","Error","Expr","ExprArray","ExprAssign","ExprAssignOp","ExprAsync","ExprAwait","ExprBinary","ExprBlock","ExprBox","ExprBreak","ExprCall","ExprCast","ExprClosure","ExprContinue","ExprField","ExprForLoop","ExprGroup","ExprIf","ExprIndex","ExprLet","ExprLit","ExprLoop","ExprMacro","ExprMatch","ExprMethodCall","ExprParen","ExprPath","ExprRange","ExprReference","ExprRepeat","ExprReturn","ExprStruct","ExprTry","ExprTryBlock","ExprTuple","ExprType","ExprUnary","ExprUnsafe","ExprWhile","ExprYield","Field","Field","Fields","FieldsNamed","FieldsUnnamed","Float","ForLoop","Ge","GenericArgument","GenericParam","Generics","Group","Group","Gt","Ident","If","ImplGenerics","ImplTrait","Index","Index","Infer","Inherited","Inner","Int","Le","Let","Lifetime","Lifetime","Lifetime","Lifetime","Lifetime","LifetimeDef","List","Lit","Lit","Lit","LitBool","LitByte","LitByteStr","LitChar","LitFloat","LitInt","LitStr","Loop","Lt","Macro","Macro","Macro","MacroDelimiter","Match","Maybe","Member","Meta","Meta","MetaList","MetaNameValue","MethodCall","Mul","MulEq","NameValue","Named","Named","Ne","Neg","NestedMeta","Never","None","None","Not","Or","Outer","Paren","Paren","Paren","Parenthesized","ParenthesizedGenericArguments","Path","Path","Path","Path","PathArguments","PathSegment","PredicateEq","PredicateLifetime","PredicateType","Ptr","Public","QSelf","Range","Raw","Reference","Reference","Rem","RemEq","Repeat","Restricted","Result","Return","ReturnType","Shl","ShlEq","Shr","ShrEq","Slice","Str","StrStyle","Struct","Struct","Sub","SubEq","Token","Trait","TraitBound","TraitBoundModifier","TraitObject","Try","TryBlock","Tuple","Tuple","Turbofish","Type","Type","Type","Type","Type","Type","TypeArray","TypeBareFn","TypeGenerics","TypeGroup","TypeImplTrait","TypeInfer","TypeMacro","TypeNever","TypeParam","TypeParamBound","TypeParen","TypePath","TypePtr","TypeReference","TypeSlice","TypeTraitObject","TypeTuple","UnOp","Unary","Union","Unit","Unnamed","Unnamed","Unsafe","Variadic","Variant","Verbatim","Verbatim","Verbatim","VisCrate","VisPublic","VisRestricted","Visibility","WhereClause","WherePredicate","While","Yield","abi","and_token","apostrophe","args","args","arguments","as_token","as_token","as_turbofish","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","bang_token","bang_token","base","base10_digits","base10_digits","base10_parse","base10_parse","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounded_ty","bounds","bounds","bounds","bounds","bounds","bounds","bounds","brace_token","brace_token","braced","bracket_token","bracket_token","bracket_token","bracket_token","bracketed","buffer","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","colon2_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","const_params","const_params_mut","const_token","const_token","crate_token","custom_keyword","custom_punctuation","data","default","default","default","default","default","delimiter","discriminant","dot_token","dots","dyn_token","elem","elem","elem","elem","elem","elem","elems","enum_token","eq","eq","eq","eq","eq","eq_token","eq_token","eq_token","eq_token","eq_token","expr","expr","expr","expr","ext","extern_token","fields","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fn_token","for_token","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","func","generics","get_ident","group_token","gt_token","gt_token","gt_token","gt_token","hash","hash","hash","hash","ident","ident","ident","ident","ident","ident","ident","ident","ident","impl_token","in_token","index","index","inputs","inputs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","is_empty","is_empty","is_ident","iter","iter_mut","leading_colon","left","len","len","lhs_ty","lifetime","lifetime","lifetime","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes_mut","lit","lit","lt_token","lt_token","lt_token","lt_token","mac","make_where_clause","member","modifier","mutability","mutability","name","name","named","nested","new","new","new","new","new","new","new","new","new","new","new","new_raw","op","op","output","output","params","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","parenthesized","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse2","parse_any","parse_args","parse_args_with","parse_body","parse_body_with","parse_inner","parse_macro_input","parse_meta","parse_mod_style","parse_named","parse_outer","parse_quote","parse_quote_spanned","parse_str","parse_unnamed","parse_with","partial_cmp","partial_cmp","path","path","path","path","path","path","path","path","path","position","pound_token","predicates","pub_token","pub_token","punctuated","qself","qself","rhs_ty","right","segments","semi_token","semi_token","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spanned","split_for_impl","star_token","struct_token","style","suffix","suffix","suffix","suffix","suffix","suffix","suffix","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","token","token","token","token","token","token","token","token","tokens","tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","ty","ty","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_params","type_params_mut","underscore_token","union_token","unnamed","unraw","unsafety","value","value","value","value","value","value","variadic","variants","vis","vis","where_clause","where_token","without_plus","without_plus","without_plus","without_plusursor","TokenBuffer","begin","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","drop","empty","eof","eq","from","from","group","ident","into","into","lifetime","literal","new","new2","punct","span","to_owned","token_stream","token_tree","try_from","try_from","try_into","try_into","type_id","type_id","IdentExt","parse_any","peek_any","unraw","Error","Lookahead1","Nothing","Output","Parse","ParseBuffer","ParseStream","Parser","Peek","Result","StepCursor","advance_to","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone_into","clone_into","combine","cursor","deref","discouraged","drop","error","error","error","extend","fmt","fmt","fmt","fmt","fork","from","from","from","from","from","from","into","into","into","into","into","into_compile_error","into_iter","is_empty","lookahead1","new","new_spanned","parse","parse","parse","parse","parse2","parse_str","parse_terminated","peek","peek","peek2","peek3","span","span","step","to_compile_error","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Speculative","advance_to","End","IntoIter","IntoPairs","Iter","IterMut","Pair","Pairs","PairsMut","Punctuated","Punctuated","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","empty_or_trailing","extend","extend","first","first_mut","from","from","from","from","from","from","from","from","from_iter","from_iter","index","index_mut","insert","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_pairs","into_tuple","into_value","is_empty","iter","iter_mut","last","last_mut","len","len","len","len","len","len","len","new","new","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","pairs","pairs_mut","parse_separated_nonempty","parse_separated_nonempty_with","parse_terminated","parse_terminated_with","pop","punct","punct_mut","push","push_punct","push_value","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","trailing_punct","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value_mut","0","0","1","Spanned","span","Abstract","Add","AddEq","And","AndAnd","AndEq","As","Async","At","Auto","Await","Bang","Become","Box","Brace","Bracket","Break","Caret","CaretEq","Colon","Colon2","Comma","Const","Continue","Crate","Default","Div","DivEq","Do","Dollar","Dot","Dot2","Dot3","DotDotEq","Dyn","Else","Enum","Eq","EqEq","Extern","FatArrow","Final","Fn","For","Ge","Group","Gt","If","Impl","In","LArrow","Le","Let","Loop","Lt","Macro","Match","Mod","Move","MulEq","Mut","Ne","Or","OrEq","OrOr","Override","Paren","Pound","Priv","Pub","Question","RArrow","Ref","Rem","RemEq","Return","SelfType","SelfValue","Semi","Shl","ShlEq","Shr","ShrEq","Star","Static","Struct","Sub","SubEq","Super","Tilde","Token","Trait","Try","Type","Typeof","Underscore","Union","Unsafe","Unsized","Use","Virtual","Where","While","Yield","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","surround","surround","surround","surround","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["synsyn::AttrStyle","syn::BinOp","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::Data","","","syn::Expr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::Fields","","syn::GenericArgument","","","","","syn::GenericParam","","","syn::Lit","","","","","","","","syn::MacroDelimiter","","","syn::Member","","syn::Meta","","","syn::NestedMeta","","syn::PathArguments","","syn::ReturnType","","syn::StrStyle","syn::TraitBoundModifier","syn::Type","","","","","","","","","","","","","","","syn::TypeParamBound","","syn::UnOp","","","syn::Visibility","","","syn::WherePredicate","","","syn::buffer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::ext","","","","syn::parse","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::parse::discouraged","","syn::punctuated","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::punctuated::Pair","","","syn::spanned","","syn::tokend":["The binary interface of a function: <code>extern &quot;C&quot;</code>.","The <code>+</code> operator (addition)","The <code>+=</code> operator","The <code>&amp;&amp;</code> operator (logical and)","The <code>&lt;&#39;a, T&gt;</code> in <code>std::slice::iter&lt;&#39;a, T&gt;</code>.","Angle bracketed arguments of a path segment: the <code>&lt;K, V&gt;</code> in …","A slice literal expression: <code>[a, b, c, d]</code>.","A fixed size array type: <code>[T; n]</code>.","An assignment expression: <code>a = compute()</code>.","A compound assignment expression: <code>counter += 1</code>.","An async block: <code>async { ... }</code>.","Distinguishes between attributes that decorate an item and …","An attribute like <code>#[repr(transparent)]</code>.","Conventional argument type associated with an invocation …","An await expression: <code>fut.await</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","An argument in a function type: the <code>usize</code> in …","A binary operator: <code>+</code>, <code>+=</code>, <code>&amp;</code>.","A binary operation: <code>a + b</code>, <code>a * b</code>.","A binding (equality constraint) on an associated type: …","A binding (equality constraint) on an associated type: the …","The <code>&amp;</code> operator (bitwise and)","The <code>&amp;=</code> operator","The <code>|</code> operator (bitwise or)","The <code>|=</code> operator","The <code>^</code> operator (bitwise xor)","The <code>^=</code> operator","A blocked scope: <code>{ ... }</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A set of bound lifetimes: <code>for&lt;&#39;a, &#39;b, &#39;c&gt;</code>.","A box expression: <code>box f</code>.","","","A <code>break</code>, with an optional label to break and an optional …","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A character literal: <code>&#39;a&#39;</code>.","A closure expression: <code>|a, b| a + b</code>.","A const generic parameter: <code>const LENGTH: usize</code>.","A const expression. Must be inside of a block.","A const generic parameter: <code>const LENGTH: usize</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","A <code>continue</code>, with an optional label.","An ordinary string like <code>&quot;data&quot;</code>.","A crate-level visibility: <code>crate</code>.","The storage of a struct, enum or union data structure.","An enum input to a <code>proc_macro_derive</code> macro.","A struct input to a <code>proc_macro_derive</code> macro.","An untagged union input to a <code>proc_macro_derive</code> macro.","Return type is not specified.","The <code>*</code> operator for dereferencing","Data structure sent to a <code>proc_macro_derive</code> macro.","The <code>/</code> operator (division)","The <code>/=</code> operator","An enum input to a <code>proc_macro_derive</code> macro.","An equality predicate in a <code>where</code> clause (unsupported).","The <code>==</code> operator (equality)","Error returned when a Syn parser cannot parse the input …","A Rust expression.","A slice literal expression: <code>[a, b, c, d]</code>.","An assignment expression: <code>a = compute()</code>.","A compound assignment expression: <code>counter += 1</code>.","An async block: <code>async { ... }</code>.","An await expression: <code>fut.await</code>.","A binary operation: <code>a + b</code>, <code>a * b</code>.","A blocked scope: <code>{ ... }</code>.","A box expression: <code>box f</code>.","A <code>break</code>, with an optional label to break and an optional …","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A closure expression: <code>|a, b| a + b</code>.","A <code>continue</code>, with an optional label.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A for loop: <code>for pat in expr { ... }</code>.","An expression contained within invisible delimiters.","An <code>if</code> expression with an optional <code>else</code> block: …","A square bracketed indexing expression: <code>vector[2]</code>.","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","Conditionless loop: <code>loop { ... }</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","A parenthesized expression: <code>(a + b)</code>.","A path like <code>std::mem::replace</code> possibly containing generic …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","An array literal constructed from one repeated element: …","A <code>return</code>, with an optional value to be returned.","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A type ascription expression: <code>foo: f64</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","An unsafe block: <code>unsafe { ... }</code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","A field of a struct or enum variant.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","Data stored within an enum variant or struct.","Named fields of a struct or struct variant such as …","Unnamed fields of a tuple struct or tuple variant such as …","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","A for loop: <code>for pat in expr { ... }</code>.","The <code>&gt;=</code> operator (greater than or equal to)","An individual generic argument, like <code>&#39;a</code>, <code>T</code>, or <code>Item = T</code>.","A generic type parameter, lifetime, or const generic: …","Lifetimes and type parameters attached to a declaration of …","An expression contained within invisible delimiters.","A type contained within invisible delimiters.","The <code>&gt;</code> operator (greater than)","A word of Rust code, which may be a keyword or legal …","An <code>if</code> expression with an optional <code>else</code> block: …","Returned by <code>Generics::split_for_impl</code>.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","The index of an unnamed tuple struct field.","A square bracketed indexing expression: <code>vector[2]</code>.","Indication that a type should be inferred by the compiler: …","An inherited visibility, which usually means private.","","An integer literal: <code>1</code> or <code>1u16</code>.","The <code>&lt;=</code> operator (less than or equal to)","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A Rust lifetime: <code>&#39;a</code>.","A lifetime definition: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A lifetime argument.","A lifetime definition: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","A structured list within an attribute, like …","A Rust literal such as a string or integer or boolean.","A Rust literal, like the <code>&quot;new_name&quot;</code> in …","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A character literal: <code>&#39;a&#39;</code>.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","An integer literal: <code>1</code> or <code>1u16</code>.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","Conditionless loop: <code>loop { ... }</code>.","The <code>&lt;</code> operator (less than)","A macro invocation: <code>println!(&quot;{}&quot;, mac)</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A macro in the type position.","A grouping token that surrounds a macro body: <code>m!(...)</code> or …","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","","A struct or tuple struct field accessed in a struct …","Content of a compile-time structured attribute.","A structured meta item, like the <code>Copy</code> in <code>#[derive(Copy)]</code> …","A structured list within an attribute, like …","A name-value pair within an attribute, like …","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","The <code>*</code> operator (multiplication)","The <code>*=</code> operator","A name-value pair within an attribute, like …","Named fields of a struct or struct variant such as …","A named field like <code>self.x</code>.","The <code>!=</code> operator (not equal to)","The <code>-</code> operator for negation","Element of a compile-time attribute list.","The never type: <code>!</code>.","","","The <code>!</code> operator for logical inversion","The <code>||</code> operator (logical or)","","A parenthesized expression: <code>(a + b)</code>.","","A parenthesized type equivalent to the inner type.","The <code>(A, B) -&gt; C</code> in <code>Fn(A, B) -&gt; C</code>.","Arguments of a function path segment: the <code>(A, B) -&gt; C</code> in …","A path at which a named item is exported (e.g. …","","A path like <code>std::mem::replace</code> possibly containing generic …","A path like <code>std::slice::Iter</code>, optionally qualified with a …","Angle bracketed or parenthesized arguments of a path …","A segment of a path together with any path arguments on …","An equality predicate in a <code>where</code> clause (unsupported).","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A type predicate in a <code>where</code> clause: …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A public visibility level: <code>pub</code>.","The explicit Self type in a qualified path: the <code>T</code> in …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A raw string like <code>r##&quot;data&quot;##</code>.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","The <code>%</code> operator (modulus)","The <code>%=</code> operator","An array literal constructed from one repeated element: …","A visibility level restricted to some path: <code>pub(self)</code> or …","The result of a Syn parser.","A <code>return</code>, with an optional value to be returned.","Return type of a function signature.","The <code>&lt;&lt;</code> operator (shift left)","The <code>&lt;&lt;=</code> operator","The <code>&gt;&gt;</code> operator (shift right)","The <code>&gt;&gt;=</code> operator","A dynamically sized slice type: <code>[T]</code>.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","The style of a string literal, either plain quoted or a …","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A struct input to a <code>proc_macro_derive</code> macro.","The <code>-</code> operator (subtraction)","The <code>-=</code> operator","A type-macro that expands to the name of the Rust type …","","A trait used as a bound on a type parameter.","A modifier on a trait bound, currently only used for the <code>?</code> …","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A tuple type: <code>(A, B, C, String)</code>.","Returned by <code>TypeGenerics::as_turbofish</code>.","The possible types that a Rust value could have.","A type ascription expression: <code>foo: f64</code>.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A type predicate in a <code>where</code> clause: …","A particular type is returned.","A type argument.","A fixed size array type: <code>[T; n]</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","Returned by <code>Generics::split_for_impl</code>.","A type contained within invisible delimiters.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","Indication that a type should be inferred by the compiler: …","A macro in the type position.","The never type: <code>!</code>.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A trait or lifetime used as a bound on a type parameter.","A parenthesized type equivalent to the inner type.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","A dynamically sized slice type: <code>[T]</code>.","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A tuple type: <code>(A, B, C, String)</code>.","A unary operator: <code>*</code>, <code>!</code>, <code>-</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","An untagged union input to a <code>proc_macro_derive</code> macro.","Unit struct or unit variant such as <code>None</code>.","Unnamed fields of a tuple struct or tuple variant such as …","An unnamed field like <code>self.0</code>.","An unsafe block: <code>unsafe { ... }</code>.","The variadic argument of a foreign function.","An enum variant.","Tokens in expression position not interpreted by Syn.","A raw token literal not interpreted by Syn.","Tokens in type position not interpreted by Syn.","A crate-level visibility: <code>crate</code>.","A public visibility level: <code>pub</code>.","A visibility level restricted to some path: <code>pub(self)</code> or …","The visibility level of an item: inherited or <code>pub</code> or …","A <code>where</code> clause in a definition: …","A single predicate in a <code>where</code> clause: <code>T: Deserialize&lt;&#39;de&gt;</code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","","","","","","","","","Turn a type’s generics like <code>&lt;X, Y&gt;</code> into a turbofish like …","Attributes tagged on the variant.","Attributes tagged on the field.","","","","","","","","","","","","","Attributes tagged on the whole struct or enum.","","","","","","","","Parses the literal into a selected number typehe type being bounded","","","Trait and lifetime bounds (<code>Clone+Send+&#39;static</code>)","","","","","","","Parse a set of curly braces and expose their content to …","","","","","Parse a set of square brackets and expose their content to …","A stably addressed token buffer supporting efficient …eturns an Iterator&lt;Item = &amp;ConstParam&gt; over the constant …","Returns an Iterator&lt;Item = &amp;mut ConstParam&gt; over the …","","","","Define a type that supports parsing and printing a given …","Define a type that supports parsing and printing a …","Data within the struct or enum.","","","","","","","Explicit discriminant: <code>Variant = 1</code>","","","","","","","","","","","","","","","","","","","","","","","","","","Extension traits to provide parsing methods on foreign …","","Content stored in the variant.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Generics required to complete the definition.","If this path consists of a single ident, returns the ident.","","","","","","","","","","","Name of the variant.","Name of the field, if any.","","","Name of the struct or enum.","","","","","","","","","<code>(A, B)</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if there are zero fields.","","Determines whether this is a path of length 1 equal to the …","Get an iterator over the borrowed <code>Field</code> items in this …","Get an iterator over the mutably borrowed <code>Field</code> items in …","","","Returns the number of fields.","","","","","","Returns an Iterator&lt;Item = &amp;LifetimeDef&gt; over the lifetime …","","The <code>for&lt;&#39;a&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","Any lifetimes from a <code>for</code> binding","","Returns an Iterator&lt;Item = &amp;mut LifetimeDef&gt; over the …","","","","","","","","Initializes an empty <code>where</code>-clause if there is not one …","","","","","","","","","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Panics","","Interpret a Syn literal from a proc-macro2 literal.","","","","","","","","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","","","<code>C</code>","","","","","","","","","","","","Parse a set of parentheses and expose their content to …","Parsing interface for parsing a token stream into a syntax …","Parse tokens of source code into the chosen syntax tree …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a syntax tree node from the content of this string …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a proc-macro2 token stream into the chosen syntax …","","Parse the arguments to the attribute as a syntax tree.","Parse the arguments to the attribute using the given …","Parse the tokens within the macro invocation’s …","Parse the tokens within the macro invocation’s …","Parses zero or more inner attributes from the stream.","Parse the input TokenStream of a macro, triggering a …","Parses the content of the attribute, consisting of the …","Parse a <code>Path</code> containing no path arguments on any of its …","Parses a named (braced struct) field.","Parses zero or more outer attributes from the stream.","Quasi-quotation macro that accepts input like the <code>quote!</code> …","This macro is <code>parse_quote!</code> + <code>quote_spanned!</code>.","Parse a string of Rust code into the chosen syntax tree …","Parses an unnamed (tuple struct) field.","Invoke parser on the content of this string literal.","","","Returns the identifier that begins this structured meta …","","","","","","The <code>Foo&lt;&amp;&#39;a T&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","","","","","","","","A punctuated sequence of syntax tree nodes separated by …","","","","","","","","Configures the span of this <code>Ident</code>, possibly changing its …","","","","","","","","","","","","","","","Returns the span of this <code>Ident</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A trait that can provide the <code>Span</code> of the complete contents …","Split a type’s generics into the pieces required for impl…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tokens representing Rust punctuation, keywords, and …ype of the field.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an Iterator&lt;Item = &amp;TypeParam&gt; over the type …","Returns an Iterator&lt;Item = &amp;mut TypeParam&gt; over the type …","","","","","","","","","","","","","","Visibility of the field.","Visibility of the struct or enum.","","","In some positions, types may not contain the <code>+</code> character, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A cheaply copyable cursor into a <code>TokenBuffer</code>.","A buffer that can be efficiently traversed multiple times, …","Creates a cursor referencing the first token in the buffer …","","","","","","","","Creates a cursor referencing a static empty TokenStream.","Checks whether the cursor is currently pointing at the end …","","Returns the argument unchanged.","Returns the argument unchanged.","If the cursor is pointing at a <code>Group</code> with the given …","If the cursor is pointing at a <code>Ident</code>, returns it along …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If the cursor is pointing at a <code>Lifetime</code>, returns it along …","If the cursor is pointing at a <code>Literal</code>, return it along …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","If the cursor is pointing at a <code>Punct</code>, returns it along …","Returns the <code>Span</code> of the current token, or <code>Span::call_site()</code>…","","Copies all remaining tokens visible from this cursor into a","If the cursor is pointing at a <code>TokenTree</code>, returns it along …","","","","","","","Additional methods for <code>Ident</code> not provided by proc-macro2 …","Parses any identifier including keywords.","Peeks any identifier including keywords. Usage: …","Strips the raw marker <code>r#</code>, if any, from the beginning of an …","Error returned when a Syn parser cannot parse the input …","Support for checking the next token in a stream to decide …","An empty syntax tree node that consumes no tokens when …","","Parsing interface implemented by all types that can be …","Cursor position within a buffered token stream.","Input to a Syn parser function.","Parser that can parse Rust tokens into a particular syntax …","Types that can be parsed by looking at just one token.","The result of a Syn parser.","Cursor state associated with speculative parsing.","","","","","","","","","","","","Calls the given parser function to parse a syntax tree …","","","","","Add another error message to self such that when …","Provides low-level access to the token representation …","","Extensions to the parsing API with niche applicability.","","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","","","","","","Forks a parse stream so that parsing tokens out of either …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Render the error as an invocation of <code>compile_error!</code>.","","Returns whether there are tokens remaining in this stream.","Constructs a helper for peeking at the next token in this …","Usually the <code>ParseStream::error</code> method will be used …","Creates an error with the specified message spanning the …","","Parses a syntax tree node of type <code>T</code>, advancing the …","Parse tokens of source code into the chosen syntax tree …","","Parse a proc-macro2 token stream into the chosen syntax …","Parse a string of Rust code into the chosen syntax tree …","Parses zero or more occurrences of <code>T</code> separated by …","Looks at the next token in the parse stream to determine …","Looks at the next token in the parse stream to determine …","Looks at the second-next token in the parse stream.","Looks at the third-next token in the parse stream.","Returns the <code>Span</code> of the next token in the parse stream, or …","The source location of the error.","Speculatively parses tokens from this parse stream, …","Render the error as an invocation of <code>compile_error!</code>.","","","","","","","","","","","","","","","","","","","","Extensions to the <code>ParseStream</code> API to support speculative …","Advance this parse stream to the position of a forked …","","An iterator over owned values of type <code>T</code>.","An iterator over owned pairs of type <code>Pair&lt;T, P&gt;</code>.","An iterator over borrowed values of type <code>&amp;T</code>.","An iterator over mutably borrowed values of type <code>&amp;mut T</code>.","A single syntax tree node of type <code>T</code> followed by its …","An iterator over borrowed pairs of type <code>Pair&lt;&amp;T, &amp;P&gt;</code>.","An iterator over mutably borrowed pairs of type …","A punctuated sequence of syntax tree nodes of type <code>T</code> …","","","","","","","","","","","","","","","","","","Clears the sequence of all values and punctuation, making …","","","","","","","","","","","","","","Returns true if either this <code>Punctuated</code> is empty, or it has …","","","Borrows the first element in this sequence.","Mutably borrows the first element in this sequence.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Inserts an element at position <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Returns an iterator over the contents of this sequence as …","Produces this punctuated pair as a tuple of syntax tree …","Extracts the syntax tree node from this punctuated pair, …","Determines whether this punctuated sequence is empty, …","Returns an iterator over borrowed syntax tree nodes of …","Returns an iterator over mutably borrowed syntax tree …","Borrows the last element in this sequence.","Mutably borrows the last element in this sequence.","Returns the number of syntax tree nodes in this punctuated …","","","","","","","Creates an empty punctuated sequence.","Creates a punctuated pair out of a syntax tree node and an …","","","","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Returns an iterator over the contents of this sequence as …","Parses one or more occurrences of <code>T</code> separated by …","Parses one or more occurrences of <code>T</code> using the given parse …","Parses zero or more occurrences of <code>T</code> separated by …","Parses zero or more occurrences of <code>T</code> using the given parse …","Removes the last punctuated pair from this sequence, or …","Borrows the punctuation from this punctuated pair, unless …","Mutably borrows the punctuation from this punctuated pair, …","Appends a syntax tree node onto the end of this punctuated …","Appends a trailing punctuation onto the end of this …","Appends a syntax tree node onto the end of this punctuated …","","","","","","","","","","","","","","","","","Determines whether this punctuated sequence ends with a …","","","","","","","","","","","","","","","","","","","","","","","","","Borrows the syntax tree node from this punctuated pair.","Mutably borrows the syntax tree node from this punctuated …","","","","A trait that can provide the <code>Span</code> of the complete contents …","Returns a <code>Span</code> covering the complete contents of this …","<code>abstract</code>","<code>+</code>","<code>+=</code>","<code>&amp;</code>","<code>&amp;&amp;</code>","<code>&amp;=</code>","<code>as</code>","<code>async</code>","<code>@</code>","<code>auto</code>","<code>await</code>","<code>!</code>","<code>become</code>","<code>box</code>","<code>{...}</code>","<code>[...]</code>","<code>break</code>","<code>^</code>","<code>^=</code>","<code>:</code>","<code>::</code>","<code>,</code>","<code>const</code>","<code>continue</code>","<code>crate</code>","<code>default</code>","<code>/</code>","<code>/=</code>","<code>do</code>","<code>$</code>","<code>.</code>","<code>..</code>","<code>...</code>","<code>..=</code>","<code>dyn</code>","<code>else</code>","<code>enum</code>","<code>=</code>","<code>==</code>","<code>extern</code>","<code>=&gt;</code>","<code>final</code>","<code>fn</code>","<code>for</code>","<code>&gt;=</code>","None-delimited group","<code>&gt;</code>","<code>if</code>","<code>impl</code>","<code>in</code>","<code>&lt;-</code>","<code>&lt;=</code>","<code>let</code>","<code>loop</code>","<code>&lt;</code>","<code>macro</code>","<code>match</code>","<code>mod</code>","<code>move</code>","<code>*=</code>","<code>mut</code>","<code>!=</code>","<code>|</code>","<code>|=</code>","<code>||</code>","<code>override</code>","<code>(...)</code>","<code>#</code>","<code>priv</code>","<code>pub</code>","<code>?</code>","<code>-&gt;</code>","<code>ref</code>","<code>%</code>","<code>%=</code>","<code>return</code>","<code>Self</code>","<code>self</code>","<code>;</code>","<code>&lt;&lt;</code>","<code>&lt;&lt;=</code>","<code>&gt;&gt;</code>","<code>&gt;&gt;=</code>","<code>*</code>","<code>static</code>","<code>struct</code>","<code>-</code>","<code>-=</code>","<code>super</code>","<code>~</code>","Marker trait for types that represent single tokens.","<code>trait</code>","<code>try</code>","<code>type</code>","<code>typeof</code>","<code>_</code>","<code>union</code>","<code>unsafe</code>","<code>unsized</code>","<code>use</code>","<code>virtual</code>","<code>where</code>","<code>while</code>","<code>yield</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codei":[0,1,1,1,2,0,3,4,3,3,3,0,0,0,3,4,0,0,3,0,5,1,1,1,1,1,1,3,6,0,3,7,7,3,6,6,3,3,6,3,8,5,0,0,5,3,9,10,0,0,0,0,11,12,0,1,1,13,14,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,6,3,1,0,0,0,3,4,1,0,3,0,4,0,3,4,10,15,6,1,3,0,8,16,14,5,0,17,0,18,3,0,0,0,0,0,0,0,3,1,0,3,4,0,3,19,0,0,18,0,0,3,1,1,17,20,21,1,12,0,4,19,2,12,1,15,3,7,4,2,0,0,17,3,4,0,0,0,0,0,4,10,0,3,9,3,4,1,1,3,10,0,3,0,1,1,1,1,4,6,0,3,13,1,1,0,16,0,0,4,3,3,3,4,0,0,3,8,14,11,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,13,20,20,21,3,0,0,3,6,4,0,0,0,0,0,0,3,3,22,23,24,25,26,27,28,29,30,31,32,33,25,28,34,35,36,37,38,39,40,41,42,43,44,45,46,47,34,48,49,48,49,50,30,51,52,24,53,15,17,54,55,18,31,20,56,57,32,10,58,59,60,3,61,62,63,64,65,33,66,67,68,25,28,69,70,34,71,72,73,35,74,36,75,76,77,78,37,38,79,80,81,82,83,84,85,86,87,39,88,89,90,21,91,92,8,40,41,42,93,16,94,19,95,14,96,97,98,6,99,100,101,102,48,49,103,9,46,7,43,13,104,105,106,1,12,4,107,22,108,109,110,111,47,112,113,114,23,115,116,117,118,44,45,11,119,27,2,5,26,120,121,122,29,50,30,51,52,24,53,15,17,54,55,18,31,20,56,57,32,10,58,59,60,3,61,62,63,64,65,33,66,67,68,25,28,69,70,34,71,72,73,35,74,36,75,76,77,78,37,38,79,80,81,82,83,84,85,86,87,39,88,89,90,21,91,92,8,40,41,42,93,16,94,19,95,14,96,97,98,6,99,100,101,102,48,49,103,9,46,7,43,13,104,105,106,1,12,4,107,22,108,109,110,111,47,112,113,114,23,115,116,117,118,44,45,11,119,27,2,5,26,120,121,122,29,96,40,41,96,97,109,116,121,56,105,0,53,35,107,115,0,0,50,30,51,52,24,53,15,17,54,55,18,31,20,56,57,32,10,58,59,60,3,33,25,28,34,35,36,37,38,39,21,91,92,8,40,41,42,93,16,94,19,95,14,96,97,98,6,99,100,101,102,48,49,103,46,7,43,13,104,105,106,1,12,4,107,22,108,109,110,111,47,112,113,114,23,115,116,117,118,44,45,11,119,27,2,5,26,120,121,122,29,50,30,51,52,24,53,15,17,54,55,18,31,20,56,57,32,10,58,59,60,3,33,25,28,34,35,36,37,38,39,21,91,92,8,40,41,42,93,16,94,19,95,14,96,97,98,6,99,100,101,102,48,49,103,46,7,43,13,104,105,106,1,12,4,107,22,108,109,110,111,47,112,113,114,23,115,116,117,118,44,45,11,119,27,2,5,26,120,121,122,29,52,24,26,32,40,41,42,96,97,121,92,92,42,114,59,0,0,43,92,93,2,40,42,46,31,34,45,116,107,108,112,114,23,115,117,105,52,52,24,21,91,55,40,42,98,120,28,35,37,39,0,118,31,104,106,52,52,52,24,21,91,48,49,22,93,50,30,51,52,52,52,52,52,52,52,24,53,15,17,17,17,17,54,55,18,18,18,31,20,20,20,56,57,32,10,10,10,10,58,59,60,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,61,62,63,64,65,33,66,67,68,25,28,69,70,34,71,72,73,35,74,36,75,76,77,78,37,38,79,80,81,82,83,84,85,86,87,39,88,89,90,21,21,21,21,91,91,92,8,8,8,8,40,40,41,42,93,16,16,16,94,19,95,14,14,14,14,96,97,98,6,6,6,6,6,6,6,6,99,100,101,102,48,48,49,49,103,9,46,7,43,13,13,13,13,104,105,106,1,12,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,107,22,108,109,110,111,47,112,113,114,23,115,116,117,118,44,45,11,119,119,27,27,2,5,26,120,121,122,29,25,43,119,108,92,93,26,29,52,24,21,91,24,31,32,40,42,43,27,120,121,109,60,35,91,22,122,50,30,51,52,24,53,15,17,54,55,18,31,20,56,57,32,10,58,59,60,3,61,62,63,64,65,33,66,67,68,25,28,69,70,34,71,72,73,35,74,36,75,76,77,78,37,38,79,80,81,82,83,84,85,86,87,39,88,89,90,21,91,92,8,40,41,42,93,16,94,19,95,14,96,97,98,6,99,100,101,102,48,49,103,9,46,7,43,13,104,105,106,1,12,4,107,22,108,109,110,111,47,112,113,114,23,115,116,117,118,44,45,11,119,27,2,5,26,120,121,122,29,20,20,2,119,20,20,119,33,20,107,98,41,97,23,92,93,94,96,22,92,55,36,92,93,26,29,111,92,34,94,114,23,118,44,56,54,52,24,41,6,99,100,101,102,48,49,103,52,33,39,22,122,92,54,57,60,25,37,94,22,112,117,122,0,0,0,52,24,17,54,55,18,31,56,57,10,3,36,38,21,91,92,8,40,41,42,93,16,94,19,95,14,6,99,99,100,101,102,48,49,103,46,43,1,12,4,107,22,108,109,110,111,47,112,113,114,23,115,116,117,118,44,11,119,27,5,26,120,122,0,52,53,53,46,46,53,0,53,119,32,53,0,0,0,32,99,52,24,17,53,54,55,60,38,94,46,113,29,53,95,58,60,0,38,113,98,33,119,104,107,52,24,6,99,100,101,102,48,49,103,50,30,51,52,52,52,24,24,53,17,54,55,18,31,20,56,57,32,10,58,59,60,3,61,62,63,64,65,33,66,67,68,25,28,69,70,34,71,72,73,35,74,36,75,76,77,78,37,38,79,80,81,82,83,84,85,86,87,39,88,89,90,21,21,91,91,92,8,40,41,42,93,16,94,19,95,14,96,97,98,6,6,99,99,100,100,101,101,102,102,48,48,49,49,103,103,46,43,1,12,4,107,22,108,109,110,111,47,112,113,114,23,115,116,117,118,44,45,11,119,27,2,5,26,120,121,122,91,103,0,92,114,104,53,6,99,100,101,102,48,49,50,30,51,52,24,53,15,17,54,55,18,31,20,56,57,32,10,58,59,60,3,33,25,28,34,35,36,37,38,39,21,91,92,8,40,41,42,93,16,94,19,95,14,96,97,98,6,99,100,101,102,48,49,103,46,7,43,13,104,105,106,1,12,4,107,22,108,109,110,111,47,112,113,114,23,115,116,117,118,44,45,11,119,27,2,5,26,120,121,122,29,52,24,48,49,50,30,51,52,24,53,17,54,55,18,31,20,56,57,32,10,58,59,60,3,61,62,63,64,65,33,66,67,68,25,28,69,70,34,71,72,73,35,74,36,75,76,77,78,37,38,79,80,81,82,83,84,85,86,87,39,88,89,90,21,91,92,8,40,41,42,93,16,94,19,95,14,96,97,98,6,99,100,101,102,48,49,103,46,43,1,12,4,107,22,108,109,110,111,47,112,113,114,23,115,116,117,118,44,45,11,119,27,2,5,26,120,121,122,0,99,100,101,102,48,49,103,53,46,50,30,51,52,24,53,15,17,54,55,18,31,20,56,57,32,10,58,59,60,3,61,62,63,64,65,33,66,67,68,25,28,69,70,34,71,72,73,35,74,36,75,76,77,78,37,38,79,80,81,82,83,84,85,86,87,39,88,89,90,21,91,92,8,40,41,42,93,16,94,19,95,14,96,97,98,6,99,100,101,102,48,49,103,9,46,7,43,13,104,105,106,1,12,4,107,22,108,109,110,111,47,112,113,114,23,115,116,117,118,44,45,11,119,27,2,5,26,120,121,122,29,50,30,51,52,24,53,15,17,54,55,18,31,20,56,57,32,10,58,59,60,3,61,62,63,64,65,33,66,67,68,25,28,69,70,34,71,72,73,35,74,36,75,76,77,78,37,38,79,80,81,82,83,84,85,86,87,39,88,89,90,21,91,92,8,40,41,42,93,16,94,19,95,14,96,97,98,6,99,100,101,102,48,49,103,9,46,7,43,13,104,105,106,1,12,4,107,22,108,109,110,111,47,112,113,114,23,115,116,117,118,44,45,11,119,27,2,5,26,120,121,122,29,32,28,42,44,120,29,50,30,51,52,24,53,15,17,54,55,18,31,20,56,57,32,10,58,59,60,3,61,62,63,64,65,33,66,67,68,25,28,69,70,34,71,72,73,35,74,36,75,76,77,78,37,38,79,80,81,82,83,84,85,86,87,39,88,89,90,21,91,92,8,40,41,42,93,16,94,19,95,14,96,97,98,6,99,100,101,102,48,49,103,9,46,7,43,13,104,105,106,1,12,4,107,22,108,109,110,111,47,112,113,114,23,115,116,117,118,44,45,11,119,27,2,5,26,120,121,122,29,92,92,110,106,57,52,22,99,100,101,102,103,103,22,105,32,43,92,95,4,109,116,11,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,0,0,254,254,255,254,255,255,255,254,255,255,255,254,255,255,255,254,255,255,255,254,254,255,255,255,255,255,254,255,254,255,254,255,0,256,256,256,0,0,0,257,0,0,0,0,0,0,0,258,259,258,260,261,262,259,258,260,261,262,258,260,262,260,262,262,258,260,0,258,259,258,260,262,258,258,262,262,258,259,258,260,261,262,262,259,258,260,261,262,262,262,258,258,262,262,263,258,257,261,257,257,258,259,258,258,258,258,262,258,262,260,262,258,262,259,258,260,261,262,259,258,260,261,262,259,258,260,261,262,0,264,265,0,0,0,0,0,0,0,0,265,266,267,268,269,270,271,272,265,266,267,268,269,270,271,272,265,266,266,267,269,270,271,265,266,267,269,270,271,265,266,266,266,266,266,266,266,267,268,269,270,271,272,265,266,266,266,266,266,266,267,268,269,270,271,272,265,266,267,268,269,270,271,272,266,265,265,266,266,266,266,266,266,267,268,269,270,271,272,266,265,267,268,269,270,271,272,267,268,269,270,271,272,266,266,266,266,266,266,266,265,265,266,266,266,267,268,269,270,271,272,266,265,266,267,269,270,271,265,266,265,266,266,267,268,269,270,271,272,265,266,267,268,269,270,271,272,265,266,267,268,269,270,271,272,265,265,265,273,274,273,0,275,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,276,329,331,334,335,336,338,340,341,343,344,348,351,353,356,359,360,363,366,371,372,374,276,329,331,334,335,336,338,340,341,343,344,348,351,353,356,359,360,363,366,371,372,374,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,375,376,377,378,276,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["turbofish",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["str",0]],[[["",0]],["str",0]],[[["",0]],["result",6]],[[["",0]],["resultnull,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["identident",3]],["ordering",4]],[[["",0],["lifetime",3]],["ordering",4]],null,null,null,null,null,null,null,null,[[["",0]],["constparams",3]],[[["",0]],["constparamsmut",3]],null,null,null,null,null,null,[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["",0]],["bool",0]],[[["",0],["ident",3]],["bool",0]],[[["",0],["lifetime",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],null,null,[[]],[[]],[[]],[[["selfvalue",3]],["ident",3]],[[["selftype",3]],["ident",3]],[[["super",3]],["ident",3]],[[["crate",3]],["ident",3]],[[]],[[["extern",3]],["ident",3]],[[["underscore",3]],["ident",3]],[[]],[[]],[[]],[[["metanamevalue",3]],["meta",4]],[[["path",3]],["meta",4]],[[["metalist",3]],["meta",4]],[[]],[[]],[[]],[[["lit",4]],["nestedmeta",4]],[[["meta",4]],["nestedmeta",4]],[[]],[[]],[[["fieldsunnamed",3]],["fields",4]],[[]],[[["fieldsnamed",3]],["fields",4]],[[]],[[]],[[]],[[["vispublic",3]],["visibility",4]],[[["viscrate",3]],["visibility",4]],[[["visrestricted",3]],["visibility",4]],[[]],[[]],[[]],[[]],[[["exprforloop",3]],["expr",4]],[[["exprtry",3]],["expr",4]],[[["exprwhile",3]],["expr",4]],[[["exprmacro",3]],["expr",4]],[[["expryield",3]],["expr",4]],[[["exprmatch",3]],["expr",4]],[[]],[[["exprloop",3]],["expr",4]],[[["exprarray",3]],["expr",4]],[[["exprmethodcall",3]],["expr",4]],[[["exprassign",3]],["expr",4]],[[["exprassignop",3]],["expr",4]],[[["exprlit",3]],["expr",4]],[[["exprasync",3]],["expr",4]],[[["exprawait",3]],["expr",4]],[[["exprbinary",3]],["expr",4]],[[["exprblock",3]],["expr",4]],[[["exprunsafe",3]],["expr",4]],[[["exprbox",3]],["expr",4]],[[["exprbreak",3]],["expr",4]],[[["exprcall",3]],["expr",4]],[[["exprcast",3]],["expr",4]],[[["exprclosure",3]],["expr",4]],[[["exprcontinue",3]],["expr",4]],[[["exprfield",3]],["expr",4]],[[["exprgroup",3]],["expr",4]],[[["exprparen",3]],["expr",4]],[[["exprif",3]],["expr",4]],[[["exprindex",3]],["expr",4]],[[["exprunary",3]],["expr",4]],[[["exprtype",3]],["expr",4]],[[["exprtuple",3]],["expr",4]],[[["exprtryblock",3]],["expr",4]],[[["exprpath",3]],["expr",4]],[[["exprstruct",3]],["expr",4]],[[["exprreturn",3]],["expr",4]],[[["exprlet",3]],["expr",4]],[[["exprrepeat",3]],["expr",4]],[[["exprrange",3]],["expr",4]],[[["exprreference",3]],["expr",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["ident",3]],["member",4]],[[["index",3]],["member",4]],[[["usize",0]],["member",4]],[[]],[[["usize",0]],["index",3]],[[]],[[["constparam",3]],["genericparam",4]],[[]],[[["typeparam",3]],["genericparam",4]],[[["lifetimedef",3]],["genericparam",4]],[[["ident",3]]],[[]],[[]],[[]],[[]],[[]],[[["traitbound",3]],["typeparambound",4]],[[["lifetime",3]],["typeparambound",4]],[[]],[[]],[[]],[[["predicateeq",3]],["wherepredicate",4]],[[["predicatelifetime",3]],["wherepredicate",4]],[[["predicatetype",3]],["wherepredicate",4]],[[]],[[]],[[]],[[]],[[["litbyte",3]],["lit",4]],[[["litfloat",3]],["lit",4]],[[["litchar",3]],["lit",4]],[[["litint",3]],["lit",4]],[[["litbytestr",3]],["lit",4]],[[]],[[["litstr",3]],["lit",4]],[[["litbool",3]],["lit",4]],[[]],[[]],[[]],[[]],[[["literal",3]]],[[]],[[]],[[["literal",3]]],[[]],[[]],[[]],[[]],[[]],[[["datastruct",3]],["data",4]],[[["dataenum",3]],["data",4]],[[["dataunion",3]],["data",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[["typeptr",3]],["type",4]],[[["typepath",3]],["type",4]],[[["typenever",3]],["type",4]],[[["typemacro",3]],["type",4]],[[["typeinfer",3]],["type",4]],[[["typeimpltrait",3]],["type",4]],[[]],[[["typegroup",3]],["type",4]],[[["typeparen",3]],["type",4]],[[["typebarefn",3]],["type",4]],[[["typearray",3]],["type",4]],[[["typetuple",3]],["type",4]],[[["typetraitobject",3]],["type",4]],[[["typeslice",3]],["type",4]],[[["typereference",3]],["type",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["",0]],["option",4,[["ident",3]]]],null,null,null,null,null,[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0]],["iter",3,[["field",3]]]],[[["",0]],["itermut",3,[["field",3]]]],null,null,[[["",0]],["usize",0]],null,null,null,null,null,[[["",0]],["lifetimes",3]],null,null,null,null,[[["",0]],["lifetimesmut",3]],null,null,null,null,null,null,null,[[["",0]],["whereclause",3]],null,null,null,null,null,null,null,null,[[["str",0],["span",3]],["ident",3]],[[["str",0],["span",3]]],[[["lifetime",3]]],[[["literal",3]]],[[["str",0],["span",3]]],[[["span",3]]],[[["u8",0],["span",3]]],[[["char",0],["span",3]]],[[["str",0],["span",3]]],[[["str",0],["span",3]]],[[["bool",0],["span",3]]],[[["str",0],["span",3]],["ident",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["tokenstream",3]],["result",6,[["parse",8]]]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["",0]],["result",6,[["parse",8]]]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["tokenstream",3]],["result",6,[["parse",8]]]],[[["parsestream",6]],["result",6]],[[["",0]],["result",6,[["parse",8]]]],[[["",0],["parser",8]],["result",6]],[[["",0]],["result",6,[["parse",8]]]],[[["",0],["parser",8]],["result",6]],[[["parsestream",6]],["result",6,[["vec",3]]]],null,[[["",0]],["result",6,[["meta",4]]]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6,[["vec",3]]]],null,null,[[["str",0]],["result",6,[["parse",8]]]],[[["parsestream",6]],["result",6]],[[["",0],["parser",8]],["result",6]],[[["",0],["ident",3]],["option",4,[["ordering",4]]]],[[["",0],["lifetime",3]],["option",4,[["ordering",4]]]],[[["",0]],["path",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["span",3]]],[[["",0],["span",3]]],[[["",0],["span",3]]],[[["",0],["span",3]]],[[["",0],["span",3]]],[[["",0],["span",3]]],[[["",0],["span",3]]],[[["",0],["span",3]]],[[["",0],["span",3]]],[[["",0],["span",3]]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["option",4,[["span",3]]]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["option",4,[["span",3]]]],[[["",0]],["span",3]],[[["",0]],["option",4,[["span",3]]]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],null,null,null,[[["",0]]],null,null,null,[[["",0]],["str",0]],[[["",0]],["str",0]],[[["",0]],["str",0]],[[["",0]],["str",0]],[[["",0]],["str",0]],[[["",0]],["str",0]],[[["",0]],["strstring",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],null,[[["",0]],["literal",3]],[[["",0]],["literal",3]],[[["",0]],["literal",3]],[[["",0]],["literal",3]],[[["",0]],["literal",3]],[[["",0]],["literal",3]],[[["",0]],["ident",3]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeparams",3]],[[["",0]],["typeparamsmut",3]],null,null,null,[[["",0]],["ident",3]],null,[[["",0]],["string",3]],[[["",0]],["vec",3,[["u8",0]]]],[[["",0]],["u8",0]],[[["",0]],["char",0]],[[["",0]],["bool",0]],null,null,null,null,null,null,null,[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["cursor",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0],["",0]]],[[["",0]]],[[]],[[],["bool",0]],[[["",0],["",0]],["bool",0]],[[]],[[]],[[["delimiter",4]],["option",4]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[],["option",4]],[[],["span",3]],[[["",0]]],[[],["tokenstream",3]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[["parsestream",6]],["result",6]],null,[[["",0]],["ident",3]],null,null,null,null,null,null,null,null,null,null,null,[[["",0],["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["result",6]],[[["",0]]],[[["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["error",3]]],[[["",0]],["cursor",3]],[[["",0]]],null,[[["",0]]],[[],["error",3]],[[["",0],["display",8]],["error",3]],[[["display",8]],["error",3]],[[["",0],["intoiterator",8]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0]]],[[]],[[]],[[]],[[]],[[]],[[["lexerror",3]]],[[]],[[]],[[]],[[]],[[]],[[],["tokenstream",3]],[[]],[[["",0]],["bool",0]],[[["",0]],["lookahead1",3]],[[["span",3],["display",8]]],[[["totokens",8],["display",8]]],[[["parsestream",6]],["result",6]],[[["",0]],["result",6,[["parse",8]]]],[[["tokenstream",3]],["result",6]],[[["parsestream",6]],["result",6]],[[["tokenstream",3]],["result",6]],[[["str",0]],["result",6]],[[["",0]],["result",6,[["punctuated",3,[["parse",8]]]]]],[[["",0],["peek",8]],["bool",0]],[[["",0],["peek",8]],["bool",0]],[[["",0],["peek",8]],["bool",0]],[[["",0],["peek",8]],["bool",0]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["result",6]],[[["",0]],["tokenstream",3]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[["",0],["",0]]],null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[["",0]],["bool",0]],[[["",0],["intoiterator",8]]],[[["",0],["intoiterator",8]]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intopairs",3]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["iter",3]],[[["",0]],["itermut",3]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[]],[[["option",4]]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["pairs",3]],[[["",0]],["pairsmut",3]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["",0]],["option",4,[["pair",4]]]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0]],["bool",0]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,null,null,[[["",0]],["span",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstreamtokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[["",0],["tokenstream",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[4,"BinOp"],[4,"PathArguments"],[4,"Expr"],[4,"Type"],[4,"GenericArgument"],[4,"Lit"],[4,"MacroDelimiter"],[4,"GenericParam"],[4,"StrStyle"],[4,"Visibility"],[4,"ReturnType"],[4,"UnOp"],[4,"Data"],[4,"WherePredicate"],[4,"AttrStyle"],[4,"TypeParamBound"],[4,"Meta"],[4,"NestedMeta"],[4,"TraitBoundModifier"],[4,"Fields"],[4,"Member"],[3,"TypeBareFn"],[3,"TypeReference"],[3,"Lifetime"],[3,"ExprCall"],[3,"AngleBracketedGenericArguments"],[3,"PathSegment"],[3,"ExprCast"],[3,"QSelf"],[3,"TypeGenerics"],[3,"Variant"],[3,"Field"],[3,"ExprBinary"],[3,"ExprField"],[3,"ExprIndex"],[3,"ExprLit"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprUnary"],[3,"TypeParam"],[3,"LifetimeDef"],[3,"ConstParam"],[3,"DeriveInput"],[3,"BareFnArg"],[3,"Variadic"],[3,"Macro"],[3,"TypeNever"],[3,"LitInt"],[3,"LitFloat"],[3,"ImplGenerics"],[3,"Turbofish"],[3,"Ident"],[3,"Attribute"],[3,"MetaList"],[3,"MetaNameValue"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"VisPublic"],[3,"VisCrate"],[3,"VisRestricted"],[3,"ExprArray"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprAsync"],[3,"ExprAwait"],[3,"ExprBlock"],[3,"ExprBox"],[3,"ExprBreak"],[3,"ExprClosure"],[3,"ExprContinue"],[3,"ExprForLoop"],[3,"ExprGroup"],[3,"ExprIf"],[3,"ExprLet"],[3,"ExprLoop"],[3,"ExprMacro"],[3,"ExprMatch"],[3,"ExprMethodCall"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprRepeat"],[3,"ExprReturn"],[3,"ExprStruct"],[3,"ExprTry"],[3,"ExprTryBlock"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprUnsafe"],[3,"ExprWhile"],[3,"ExprYield"],[3,"Index"],[3,"Generics"],[3,"BoundLifetimes"],[3,"TraitBound"],[3,"WhereClause"],[3,"PredicateType"],[3,"PredicateLifetime"],[3,"PredicateEq"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitBool"],[3,"DataStruct"],[3,"DataEnum"],[3,"DataUnion"],[3,"TypeArray"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"Abi"],[3,"Path"],[3,"Binding"],[3,"Constraint"],[3,"ParenthesizedGenericArguments"],[13,"Inner"],[13,"Add"],[13,"Sub"],[13,"Mul"],[13,"Div"],[13,"Rem"],[13,"And"],[13,"Or"],[13,"BitXor"],[13,"BitAnd"],[13,"BitOr"],[13,"Shl"],[13,"Shr"],[13,"Eq"],[13,"Lt"],[13,"Le"],[13,"Ne"],[13,"Ge"],[13,"Gt"],[13,"AddEq"],[13,"SubEq"],[13,"MulEq"],[13,"DivEq"],[13,"RemEq"],[13,"BitXorEq"],[13,"BitAndEq"],[13,"BitOrEq"],[13,"ShlEq"],[13,"ShrEq"],[13,"Struct"],[13,"Enum"],[13,"Union"],[13,"Array"],[13,"Assign"],[13,"AssignOp"],[13,"Async"],[13,"Await"],[13,"Binary"],[13,"Block"],[13,"Box"],[13,"Break"],[13,"Call"],[13,"Cast"],[13,"Closure"],[13,"Continue"],[13,"Field"],[13,"ForLoop"],[13,"Group"],[13,"If"],[13,"Index"],[13,"Let"],[13,"Lit"],[13,"Loop"],[13,"Macro"],[13,"Match"],[13,"MethodCall"],[13,"Paren"],[13,"Path"],[13,"Range"],[13,"Reference"],[13,"Repeat"],[13,"Return"],[13,"Struct"],[13,"Try"],[13,"TryBlock"],[13,"Tuple"],[13,"Type"],[13,"Unary"],[13,"Unsafe"],[13,"Verbatim"],[13,"While"],[13,"Yield"],[13,"Named"],[13,"Unnamed"],[13,"Lifetime"],[13,"Type"],[13,"Binding"],[13,"Constraint"],[13,"Const"],[13,"Type"],[13,"Lifetime"],[13,"Const"],[13,"Str"],[13,"ByteStr"],[13,"Byte"],[13,"Char"],[13,"Int"],[13,"Float"],[13,"Bool"],[13,"Verbatim"],[13,"Paren"],[13,"Brace"],[13,"Bracket"],[13,"Named"],[13,"Unnamed"],[13,"Path"],[13,"List"],[13,"NameValue"],[13,"Meta"],[13,"Lit"],[13,"AngleBracketed"],[13,"Parenthesized"],[13,"Type"],[13,"Raw"],[13,"Maybe"],[13,"Array"],[13,"BareFn"],[13,"Group"],[13,"ImplTrait"],[13,"Infer"],[13,"Macro"],[13,"Never"],[13,"Paren"],[13,"Path"],[13,"Ptr"],[13,"Reference"],[13,"Slice"],[13,"TraitObject"],[13,"Tuple"],[13,"Verbatim"],[13,"Trait"],[13,"Lifetime"],[13,"Deref"],[13,"Not"],[13,"Neg"],[13,"Public"],[13,"Crate"],[13,"Restricted"],[13,"Type"],[13,"Lifetime"],[13,"Eq"],[3,"TokenBuffer"],[3,"Cursor"],[8,"IdentExt"],[8,"Parser"],[3,"ParseBuffer"],[3,"Lookahead1"],[3,"StepCursor"],[3,"Nothing"],[3,"Error"],[8,"Parse"],[8,"Speculative"],[4,"Pair"],[3,"Punctuated"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[13,"Punctuated"],[13,"End"],[8,"Spanned"],[3,"Underscore"],[3,"Abstract"],[3,"As"],[3,"Async"],[3,"Auto"],[3,"Await"],[3,"Become"],[3,"Box"],[3,"Break"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Extern"],[3,"Final"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Override"],[3,"Priv"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"SelfType"],[3,"SelfValue"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Try"],[3,"Type"],[3,"Typeof"],[3,"Union"],[3,"Unsafe"],[3,"Unsized"],[3,"Use"],[3,"Virtual"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Tilde"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"]]},\
"textwrap":{"doc":"<code>textwrap</code> provides functions for word wrapping and filling …","t":[3,3,3,8,3,3,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,5,11,12,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,5,11,5,11],"n":["HyphenSplitter","IntoWrapIter","NoHyphenation","WordSplitter","WrapIter","Wrapper","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","break_words","break_words","clone","clone","clone","clone_into","clone_into","clone_into","dedent","fill","fill","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","indent","initial_indent","initial_indent","into","into","into","into","into","into_iter","into_iter","into_wrap_iter","new","next","next","split","split","split","splitter","subsequent_indent","subsequent_indent","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","width","with_splitter","wrap","wrap","wrap_iter","wrap_iter"],"q":["textwrap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Simple and default way to split words: splitting on …","An iterator over the lines of the input string which owns a","Use this as a <code>Wrapper.splitter</code> to avoid any kind of …","An interface for splitting words.","An iterator over the lines of the input string which …","A Wrapper holds settings for wrapping and filling text. …","","","","","","","","","","","Change <code>self.break_words</code>. This controls if words longer …","Allow long words to be broken if they cannot fit on a line.","","","","","","","Removes common leading whitespace from each line.","Fill a line of text at <code>width</code> characters. Strings are …","Fill a line of text at <code>self.width</code> characters. Strings are …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Add prefix to each non-empty line.","Change <code>self.initial_indent</code>. The initial indentation is …","Indentation used for the first line of output.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Lazily wrap a line of text at <code>self.width</code> characters. …","Create a new Wrapper for wrapping at the specified width. …","","","Return all possible splits of word. Each split is a triple …","","","The method for splitting words. If the <code>hyphenation</code> feature …","Change <code>self.subsequent_indent</code>. The subsequent indentation …","Indentation used for subsequent lines of output.","","","","","","","","","","","","","","","","","","","The width in columns at which the text will be wrapped.","Use the given <code>WordSplitter</code> to create a new Wrapper for …","Wrap a line of text at <code>width</code> characters. Strings are …","Wrap a line of text at <code>self.width</code> characters. Strings are …","Lazily wrap a line of text at <code>width</code> characters. Strings are","Lazily wrap a line of text at <code>self.width</code> characters. …"],"i":[0,0,0,0,0,0,1,2,3,4,5,1,2,3,4,5,3,3,1,2,3,1,2,3,0,0,3,1,2,3,4,5,1,2,3,4,5,0,3,3,1,2,3,4,5,4,5,3,3,4,5,6,1,2,3,3,3,1,2,3,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,3,3,0,3,0,3],"f":[null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["bool",0]],["wrapper",3]],null,[[["",0]],["nohyphenation",3]],[[["",0]],["hyphensplitter",3]],[[["",0]],["wrapper",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["str",0]],["string",3]],[[["str",0],["usize",0]],["string",3]],[[["",0],["str",0]],["string",3]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["str",0],["str",0]],["string",3]],[[["str",0]],["wrapper",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",0]],["intowrapiter",3]],[[["usize",0]],["wrapper",3,[["hyphensplitter",3]]]],[[["",0]],["option",4,[["cow",4,[["str",0]]]]]],[[["",0]],["option",4,[["cow",4,[["str",0]]]]]],[[["",0],["str",0]],["vec",3]],[[["",0],["str",0]],["vec",3]],[[["",0],["str",0]],["vec",3]],null,[[["str",0]],["wrapper",3]],null,[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[["usize",0]],["wrapper",3]],[[["str",0],["usize",0]],["vec",3,[["cow",4,[["str",0]]]]]],[[["",0],["str",0]],["vec",3,[["cow",4,[["str",0]]]]]],[[["str",0],["usize",0]],["intowrapiter",3,[["hyphensplitter",3]]]],[[["",0],["str",0]],["wrapiter",3]]],"p":[[3,"NoHyphenation"],[3,"HyphenSplitter"],[3,"Wrapper"],[3,"IntoWrapIter"],[3,"WrapIter"],[8,"WordSplitter"]]},\
"tinytemplate":{"doc":"TinyTemplate","t":[3,6,11,11,11,11,11,0,5,5,5,11,11,11,11,11,0,11,11,11,13,13,4,13,13,13,6,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],"n":["TinyTemplate","ValueFormatter","add_formatter","add_template","borrow","borrow_mut","default","error","escape","format","format_unescaped","from","into","new","render","set_default_formatter","syntax","try_from","try_into","type_id","CalledFormatterError","CalledTemplateError","Error","GenericError","ParseError","RenderError","Result","SerdeError","StdFormatError","borrow","borrow_mut","description","fmt","fmt","from","from","from","into","to_string","try_from","try_into","type_id","column","column","column","column","err","err","err","err","line","line","line","line","msg","msg","msg","name","name"],"q":["tinytemplate","","","","","","","","","","","","","","","","","","","","tinytemplate::error","","","","","","","","","","","","","","","","","","","","","","tinytemplate::error::Error","","","","","","","","","","","","","","","",""],"d":["The TinyTemplate struct is the entry point for the …","Type alias for closures which can be used as value …","Register the given formatter function under the given name.","Parse and compile the given template, then register it …","","","","Module containing the error type returned by TinyTemplate …","Appends <code>value</code> to <code>output</code>, performing HTML-escaping in the …","The format function is used as the default value formatter …","Identical to <code>format</code> except that this does not perform HTML …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new TinyTemplate registry. The returned registry …","Render the template with the given name using the given …","Changes the default formatter from <code>format</code> to <code>formatter</code>. …","Documentation of TinyTemplate’s template syntax.","","","","","","Enum representing the potential errors that TinyTemplate …","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,0,1,1,1,2,2,0,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,4,5,6,7,8,5,6,3,4,5,6,3,4,9,5,6],"f":[null,null,[[["",0],["str",0]]],[[["",0],["str",0],["str",0]],["result",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["tinytemplate",3]],null,[[["str",0],["string",3]]],[[["value",4],["string",3]],["result",6]],[[["value",4],["string",3]],["result",6]],[[]],[[]],[[],["tinytemplate",3]],[[["",0],["str",0],["",0]],["result",6,[["string",3]]]],[[["",0],["",0]]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["str",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["serdejsonerror",3]],["error",4]],[[["error",3]],["error",4]],[[]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[[3,"TinyTemplate"],[4,"Error"],[13,"ParseError"],[13,"RenderError"],[13,"CalledTemplateError"],[13,"CalledFormatterError"],[13,"SerdeError"],[13,"StdFormatError"],[13,"GenericError"]]},\
"unicode_ident":{"doc":"github crates-io docs-rs","t":[5,5],"n":["is_xid_continue","is_xid_start"],"q":["unicode_ident",""],"d":["",""],"i":[0,0],"f":[[[["char",0]],["bool",0]],[[["char",0]],["bool",0]]],"p":[]},\
"unicode_width":{"doc":"Determine displayed width of <code>char</code> and <code>str</code> types according …","t":[17,8,8,10,10,10,10],"n":["UNICODE_VERSION","UnicodeWidthChar","UnicodeWidthStr","width","width","width_cjk","width_cjk"],"q":["unicode_width","","","","","",""],"d":["The version of Unicode that this version of unicode-width …","Methods for determining displayed width of Unicode …","Methods for determining displayed width of Unicode strings.","Returns the character’s displayed width in columns, or …","Returns the string’s displayed width in columns.","Returns the character’s displayed width in columns, or …","Returns the string’s displayed width in columns."],"i":[0,0,0,1,2,1,2],"f":[null,null,null,[[],["option",4,[["usize",0]]]],[[["",0]],["usize",0]],[[],["option",4,[["usize",0]]]],[[["",0]],["usize",0]]],"p":[[8,"UnicodeWidthChar"],[8,"UnicodeWidthStr"]]},\
"walkdir":{"doc":"Crate <code>walkdir</code> provides an efficient and cross platform …","t":[3,8,3,3,3,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["DirEntry","DirEntryExt","Error","FilterEntry","IntoIter","Result","WalkDir","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone_into","contents_first","depth","depth","description","file_name","file_type","filter_entry","filter_entry","fmt","fmt","fmt","fmt","fmt","fmt","follow_links","from","from","from","from","from","ino","ino","into","into","into","into","into","into_io_error","into_iter","into_iter","into_iter","into_path","io_error","loop_ancestor","max_depth","max_open","metadata","min_depth","new","next","next","path","path","path_is_symlink","same_file_system","skip_current_dir","skip_current_dir","sort_by","sort_by_file_name","sort_by_key","source","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":["walkdir","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A directory entry.","Unix-specific extension methods for <code>walkdir::DirEntry</code>","An error produced by recursively walking a directory.","A recursive directory iterator that skips entries.","An iterator for recursively descending into a directory.","A result type for walkdir operations.","A builder to create an iterator for recursively walking a …","","","","","","","","","","","","","","Yield a directory’s contents before the directory …","Returns the depth at which this entry was created relative …","Returns the depth at which this error occurred relative to …","","Return the file name of this entry.","Return the file type for the file that this entry points …","Yields only entries which satisfy the given predicate and …","Yields only entries which satisfy the given predicate and …","","","","","","","Follow symbolic links. By default, this is disabled.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the underlying <code>d_ino</code> field in the contained <code>dirent</code> …","Returns the underlying <code>d_ino</code> field in the contained <code>dirent</code> …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Similar to <code>io_error</code> except consumes self to convert to the …","","","","The full path that this entry represents.","Inspect the original <code>io::Error</code> if there is one.","Returns the path at which a cycle was detected.","Set the maximum depth of entries yield by the iterator.","Set the maximum number of simultaneously open file …","Return the metadata for the file that this entry points to.","Set the minimum depth of entries yielded by the iterator.","Create a builder for a recursive directory iterator …","Advances the iterator and returns the next value.","Advances the iterator and returns the next value.","The full path that this entry represents.","Returns the path associated with this error if one exists.","Returns <code>true</code> if and only if this entry was created from a …","Do not cross file system boundaries.","Skips the current directory.","Skips the current directory.","Set a function for sorting directory entries with a …","Sort directory entries by file name, to ensure a …","Set a function for sorting directory entries with a key …","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,1,2,3,4,5,1,2,3,4,5,2,1,1,3,1,2,2,1,1,4,5,1,2,2,3,4,5,3,1,2,3,4,5,6,1,1,2,3,4,5,2,3,4,5,1,2,2,3,3,1,3,3,4,5,1,2,1,3,4,5,3,3,3,2,1,2,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5],"f":[null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["direntry",3]],[[["",0],["",0]]],[[["bool",0]]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["str",0]],[[["",0]],["osstr",3]],[[["",0]],["filetype",3]],[[],["filterentry",3]],[[],["filterentry",3]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["bool",0]]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],[[]],[[]],[[]],[[]],[[]],[[],["option",4,[["error",3]]]],[[],["intoiter",3]],[[]],[[]],[[],["pathbuf",3]],[[["",0]],["option",4,[["error",3]]]],[[["",0]],["option",4,[["path",3]]]],[[["usize",0]]],[[["usize",0]]],[[["",0]],["result",6,[["metadata",3]]]],[[["usize",0]]],[[["asref",8,[["path",3]]]]],[[["",0]],["option",4,[["result",6,[["direntry",3]]]]]],[[["",0]],["option",4,[["result",6,[["direntry",3]]]]]],[[["",0]],["path",3]],[[["",0]],["option",4,[["path",3]]]],[[["",0]],["bool",0]],[[["bool",0]]],[[["",0]]],[[["",0]]],[[]],[[]],[[]],[[["",0]],["option",4,[["error",8]]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[3,"DirEntry"],[3,"Error"],[3,"WalkDir"],[3,"IntoIter"],[3,"FilterEntry"],[8,"DirEntryExt"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};